// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RetCodeId.proto

package protocol;

public final class RetCodeId {
  private RetCodeId() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code RetCodeEnum}
   */
  public enum RetCodeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>RCE_Null = 0;</code>
     */
    RCE_Null(0),
    /**
     * <code>RCE_Success = 1;</code>
     */
    RCE_Success(1),
    /**
     * <code>RCE_Failure = 2;</code>
     */
    RCE_Failure(2),
    /**
     * <pre>
     *未知错误
     * </pre>
     *
     * <code>RCE_UnknownError = 3;</code>
     */
    RCE_UnknownError(3),
    /**
     * <pre>
     *玩家离线，需要重新登录
     * </pre>
     *
     * <code>RCE_PlayerOffline = 4;</code>
     */
    RCE_PlayerOffline(4),
    /**
     * <pre>
     *参数错误
     * </pre>
     *
     * <code>RCE_ErrorParam = 5;</code>
     */
    RCE_ErrorParam(5),
    /**
     * <pre>
     *功能未开放
     * </pre>
     *
     * <code>RCE_FunctionIsLock = 6;</code>
     */
    RCE_FunctionIsLock(6),
    /**
     * <pre>
     *商店类型不匹配
     * </pre>
     *
     * <code>RCE_ShopTypeMissMatch = 7;</code>
     */
    RCE_ShopTypeMissMatch(7),
    /**
     * <pre>
     *材料不足
     * </pre>
     *
     * <code>RCE_MatieralNotEnough = 8;</code>
     */
    RCE_MatieralNotEnough(8),
    /**
     * <pre>
     *等级不足
     * </pre>
     *
     * <code>RCE_LvNotEnough = 9;</code>
     */
    RCE_LvNotEnough(9),
    /**
     * <code>RCE_Login_ErrorPwd = 10;</code>
     */
    RCE_Login_ErrorPwd(10),
    /**
     * <code>RCE_Login_FullPlayer = 11;</code>
     */
    RCE_Login_FullPlayer(11),
    /**
     * <pre>
     *服务器维护中
     * </pre>
     *
     * <code>RCE_Login_ServerNotOpen = 12;</code>
     */
    RCE_Login_ServerNotOpen(12),
    /**
     * <pre>
     *配置不存在
     * </pre>
     *
     * <code>RSE_ConfigNotExist = 13;</code>
     */
    RSE_ConfigNotExist(13),
    /**
     * <pre>
     *当前vip等级礼包已经领取
     * </pre>
     *
     * <code>RSE_VipGiftClaimed = 14;</code>
     */
    RSE_VipGiftClaimed(14),
    /**
     * <code>RCE_CreateRole_DuplicateName = 20;</code>
     */
    RCE_CreateRole_DuplicateName(20),
    /**
     * <code>RCE_CreateRole_InvalidName = 21;</code>
     */
    RCE_CreateRole_InvalidName(21),
    /**
     * <pre>
     * 顺序错误,应先发login消息
     * </pre>
     *
     * <code>RCE_CreateRole_ErrorOrder = 22;</code>
     */
    RCE_CreateRole_ErrorOrder(22),
    /**
     * <code>RCE_KickOut_Null = 30;</code>
     */
    RCE_KickOut_Null(30),
    /**
     * <pre>
     * 重复登录
     * </pre>
     *
     * <code>RCE_KickOut_RepeatLogin = 31;</code>
     */
    RCE_KickOut_RepeatLogin(31),
    /**
     * <pre>
     * 服务器关闭
     * </pre>
     *
     * <code>RCE_KickOut_ServerClose = 32;</code>
     */
    RCE_KickOut_ServerClose(32),
    /**
     * <pre>
     * 防沉迷限制
     * </pre>
     *
     * <code>RCE_KickOut_AntiLimit = 33;</code>
     */
    RCE_KickOut_AntiLimit(33),
    /**
     * <pre>
     * 账号封禁
     * </pre>
     *
     * <code>RCE_KickOut_Banned = 34;</code>
     */
    RCE_KickOut_Banned(34),
    /**
     * <pre>
     *该邮件不存在
     * </pre>
     *
     * <code>RCE_Mail_UnExist = 41;</code>
     */
    RCE_Mail_UnExist(41),
    /**
     * <pre>
     *附件不存在
     * </pre>
     *
     * <code>RCE_Mail_NoAttachment = 42;</code>
     */
    RCE_Mail_NoAttachment(42),
    /**
     * <pre>
     *背包容量不足
     * </pre>
     *
     * <code>RCE_Mail_UnEnoughtCapacity = 43;</code>
     */
    RCE_Mail_UnEnoughtCapacity(43),
    /**
     * <pre>
     *附件已经领取过了
     * </pre>
     *
     * <code>RCE_Mail_AlreadyCliamed = 44;</code>
     */
    RCE_Mail_AlreadyCliamed(44),
    /**
     * <pre>
     *附件未领取
     * </pre>
     *
     * <code>RCE_Mail_AttachmentNoClaim = 45;</code>
     */
    RCE_Mail_AttachmentNoClaim(45),
    /**
     * <pre>
     *邮件未读
     * </pre>
     *
     * <code>RCE_Mail_UnRead = 46;</code>
     */
    RCE_Mail_UnRead(46),
    /**
     * <pre>
     *该位置已有宠物,无法上阵
     * </pre>
     *
     * <code>RCE_PrepareWar_TargetPositionHasPet = 47;</code>
     */
    RCE_PrepareWar_TargetPositionHasPet(47),
    /**
     * <pre>
     *宠物在宠物转化中还未确认不能备战
     * </pre>
     *
     * <code>RCE_PrepareWar_PetIsInPetTransfer = 48;</code>
     */
    RCE_PrepareWar_PetIsInPetTransfer(48),
    /**
     * <pre>
     *该小队已上锁，无法编辑（适用矿区小队）
     * </pre>
     *
     * <code>RCE_PrepareWar_TeamStatusIslock = 49;</code>
     */
    RCE_PrepareWar_TeamStatusIslock(49),
    /**
     * <pre>
     *该宠物已阵亡
     * </pre>
     *
     * <code>RCE_PrepareWar_PetIsDead = 50;</code>
     */
    RCE_PrepareWar_PetIsDead(50),
    /**
     * <pre>
     *宠物不存在
     * </pre>
     *
     * <code>RCE_PrepareWar_PetNoExist = 51;</code>
     */
    RCE_PrepareWar_PetNoExist(51),
    /**
     * <pre>
     *等级不足，不能使用该技能
     * </pre>
     *
     * <code>RCE_PrepareWar_LvNotEought = 52;</code>
     */
    RCE_PrepareWar_LvNotEought(52),
    /**
     * <pre>
     *非法小队名
     * </pre>
     *
     * <code>RCE_PrepareWar_IllegalTeamName = 53;</code>
     */
    RCE_PrepareWar_IllegalTeamName(53),
    /**
     * <pre>
     *无法再购买小队
     * </pre>
     *
     * <code>RCE_PrepareWar_CanNotBuyMore = 54;</code>
     */
    RCE_PrepareWar_CanNotBuyMore(54),
    /**
     * <pre>
     *钻石不足
     * </pre>
     *
     * <code>RCE_PrepareWar_DiamondNotEnought = 56;</code>
     */
    RCE_PrepareWar_DiamondNotEnought(56),
    /**
     * <pre>
     *该位置未解锁
     * </pre>
     *
     * <code>RCE_PrepareWar_PositionIsLock = 57;</code>
     */
    RCE_PrepareWar_PositionIsLock(57),
    /**
     * <pre>
     *该小队未解锁
     * </pre>
     *
     * <code>RCE_PrepareWar_TeamIslock = 58;</code>
     */
    RCE_PrepareWar_TeamIslock(58),
    /**
     * <pre>
     *技能不存在
     * </pre>
     *
     * <code>RCE_PrepareWar_SkillNotExist = 59;</code>
     */
    RCE_PrepareWar_SkillNotExist(59),
    /**
     * <pre>
     *重复上阵同一宠物
     * </pre>
     *
     * <code>RCE_PrepareWar_RepeatedSetSamePet = 60;</code>
     */
    RCE_PrepareWar_RepeatedSetSamePet(60),
    /**
     * <pre>
     *道具不存在
     * </pre>
     *
     * <code>RCE_Itembag_ItemNotExist = 61;</code>
     */
    RCE_Itembag_ItemNotExist(61),
    /**
     * <pre>
     *道具不足
     * </pre>
     *
     * <code>RCE_Itembag_ItemNotEnought = 62;</code>
     */
    RCE_Itembag_ItemNotEnought(62),
    /**
     * <pre>
     *该道具无法使用
     * </pre>
     *
     * <code>RCE_Itembag_ItemCanNotUsed = 63;</code>
     */
    RCE_Itembag_ItemCanNotUsed(63),
    /**
     * <pre>
     *该道具无法出售
     * </pre>
     *
     * <code>RCE_ItemBag_ItemCanNotSell = 64;</code>
     */
    RCE_ItemBag_ItemCanNotSell(64),
    /**
     * <pre>
     *迷雾森林宝箱每日次数限制
     * </pre>
     *
     * <code>RCE_ItemBag_MistBoxLimit = 65;</code>
     */
    RCE_ItemBag_MistBoxLimit(65),
    /**
     * <pre>
     *该头像还未拥有，不能更换
     * </pre>
     *
     * <code>RCE_Player_NotOwnedAvatar = 71;</code>
     */
    RCE_Player_NotOwnedAvatar(71),
    /**
     * <pre>
     *金币不足
     * </pre>
     *
     * <code>RCE_Player_GoldNotEnought = 72;</code>
     */
    RCE_Player_GoldNotEnought(72),
    /**
     * <pre>
     *钻石不足
     * </pre>
     *
     * <code>RCE_Player_DiamondNotEnought = 73;</code>
     */
    RCE_Player_DiamondNotEnought(73),
    /**
     * <pre>
     *货币不足（金币，魔石，魔晶）
     * </pre>
     *
     * <code>RCE_Player_CurrencysNotEnought = 74;</code>
     */
    RCE_Player_CurrencysNotEnought(74),
    /**
     * <pre>
     *展示的宠物不存在
     * </pre>
     *
     * <code>RCE_Player_DisplayPetNotExist = 75;</code>
     */
    RCE_Player_DisplayPetNotExist(75),
    /**
     * <pre>
     *查询的玩家不存在
     * </pre>
     *
     * <code>RCE_Player_QueryPlayerNotExist = 76;</code>
     */
    RCE_Player_QueryPlayerNotExist(76),
    /**
     * <pre>
     *该关卡不能游戏，请选择其他关卡
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvCanNotPlay = 81;</code>
     */
    RCE_EndlessSpire_ThisLvCanNotPlay(81),
    /**
     * <pre>
     *玩家状态繁忙
     * </pre>
     *
     * <code>RCE_EndlessSpire_PlayerStatusBusy = 82;</code>
     */
    RCE_EndlessSpire_PlayerStatusBusy(82),
    /**
     * <pre>
     *该关卡不能结算，
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvCanNotSettle = 83;</code>
     */
    RCE_EndlessSpire_ThisLvCanNotSettle(83),
    /**
     * <pre>
     *当前使用的小队没有宠物
     * </pre>
     *
     * <code>RCE_Battle_UsedTeamNotHavePet = 91;</code>
     */
    RCE_Battle_UsedTeamNotHavePet(91),
    /**
     * <pre>
     *当前使用小队的宠物数据为空
     * </pre>
     *
     * <code>RCE_Battle_UsedTeamPetDataIsNull = 92;</code>
     */
    RCE_Battle_UsedTeamPetDataIsNull(92),
    /**
     * <pre>
     *重复进入战斗
     * </pre>
     *
     * <code>RCE_Battle_RepeatedEnterBattle = 93;</code>
     */
    RCE_Battle_RepeatedEnterBattle(93),
    /**
     * <pre>
     * 未找到玩家
     * </pre>
     *
     * <code>RCE_AlterName_NotFoundPlayer = 100;</code>
     */
    RCE_AlterName_NotFoundPlayer(100),
    /**
     * <pre>
     * 非法玩家
     * </pre>
     *
     * <code>RCE_AlterName_EvilPlayer = 101;</code>
     */
    RCE_AlterName_EvilPlayer(101),
    /**
     * <pre>
     * 改名CD中
     * </pre>
     *
     * <code>RCE_AlterName_DuringRenameCD = 102;</code>
     */
    RCE_AlterName_DuringRenameCD(102),
    /**
     * <pre>
     *非法玩家名
     * </pre>
     *
     * <code>RCE_AlterName_IllegalName = 103;</code>
     */
    RCE_AlterName_IllegalName(103),
    /**
     * <pre>
     * 含有非法字符串
     * </pre>
     *
     * <code>RCE_AlterName_IllegalWords = 110;</code>
     */
    RCE_AlterName_IllegalWords(110),
    /**
     * <pre>
     * 名字过长
     * </pre>
     *
     * <code>RCE_AlterName_TooLong = 111;</code>
     */
    RCE_AlterName_TooLong(111),
    /**
     * <pre>
     * 名字重复
     * </pre>
     *
     * <code>RCE_AlterName_Duplicate = 112;</code>
     */
    RCE_AlterName_Duplicate(112),
    /**
     * <pre>
     * 新名字长度不足
     * </pre>
     *
     * <code>RCE_AlterName_Empty = 113;</code>
     */
    RCE_AlterName_Empty(113),
    /**
     * <pre>
     *===================迷雾森林start 预留200 - 300=================
     * </pre>
     *
     * <code>RCE_MistForest_CreateRoomFail = 200;</code>
     */
    RCE_MistForest_CreateRoomFail(200),
    /**
     * <pre>
     * 服务器未登录(服务器用)
     * </pre>
     *
     * <code>RCE_MistForest_ServerNotLogin = 260;</code>
     */
    RCE_MistForest_ServerNotLogin(260),
    /**
     * <pre>
     *活动状态不匹配
     * </pre>
     *
     * <code>RCE_ForInv_StatusMismatching = 301;</code>
     */
    RCE_ForInv_StatusMismatching(301),
    /**
     * <pre>
     *第一阶段小怪Idx不存在
     * </pre>
     *
     * <code>RCE_ForInv_MonsterIdxNotExist = 302;</code>
     */
    RCE_ForInv_MonsterIdxNotExist(302),
    /**
     * <pre>
     *bossIdx 不匹配
     * </pre>
     *
     * <code>RCE_ForInv_BossCloneNotExist = 303;</code>
     */
    RCE_ForInv_BossCloneNotExist(303),
    /**
     * <pre>
     *过渡阶段已达上限
     * </pre>
     *
     * <code>RCE_ForInv_ClaimCountLimit = 304;</code>
     */
    RCE_ForInv_ClaimCountLimit(304),
    /**
     * <pre>
     *移除小怪失败
     * </pre>
     *
     * <code>RCE_ForInv_RemoveMonsterFailed = 305;</code>
     */
    RCE_ForInv_RemoveMonsterFailed(305),
    /**
     * <pre>
     *生成小怪失败
     * </pre>
     *
     * <code>RCR_ForInv_CreateMonsterFailed = 306;</code>
     */
    RCR_ForInv_CreateMonsterFailed(306),
    /**
     * <pre>
     *好友已达上限
     * </pre>
     *
     * <code>RCE_Friend_FriendUpperLimit = 321;</code>
     */
    RCE_Friend_FriendUpperLimit(321),
    /**
     * <pre>
     *目标玩家不存在
     * </pre>
     *
     * <code>RCE_Friend_TargetPlayerNotExist = 322;</code>
     */
    RCE_Friend_TargetPlayerNotExist(322),
    /**
     * <pre>
     *目标玩家申请列表已达上限
     * </pre>
     *
     * <code>RCE_Friend_TargetApplyUpperLimit = 323;</code>
     */
    RCE_Friend_TargetApplyUpperLimit(323),
    /**
     * <pre>
     *目标好友列表已达上限
     * </pre>
     *
     * <code>RCE_Friend_TargetFriendUpperLimit = 324;</code>
     */
    RCE_Friend_TargetFriendUpperLimit(324),
    /**
     * <pre>
     *目标玩家还不是你的好友
     * </pre>
     *
     * <code>RCE_Friend_TargetIsNotFriend = 325;</code>
     */
    RCE_Friend_TargetIsNotFriend(325),
    /**
     * <pre>
     *不能查找自己
     * </pre>
     *
     * <code>RCE_Friend_CanNotFindSelf = 326;</code>
     */
    RCE_Friend_CanNotFindSelf(326),
    /**
     * <pre>
     *已经赠送友情点到目标玩家
     * </pre>
     *
     * <code>RCE_Friend_RepeatedSendToSameTarget = 327;</code>
     */
    RCE_Friend_RepeatedSendToSameTarget(327),
    /**
     * <pre>
     *还未收到该玩家赠送的友情点
     * </pre>
     *
     * <code>RCE_Friend_NotRecvPointFromThis = 328;</code>
     */
    RCE_Friend_NotRecvPointFromThis(328),
    /**
     * <pre>
     *已经领取该玩家的友情点
     * </pre>
     *
     * <code>RCE_Friend_RepeatedClaim = 329;</code>
     */
    RCE_Friend_RepeatedClaim(329),
    /**
     * <pre>
     *友情点不足无法兑换
     * </pre>
     *
     * <code>RCE_DrawCard_FriednshipPointNotEnought = 341;</code>
     */
    RCE_DrawCard_FriednshipPointNotEnought(341),
    /**
     * <pre>
     *低级召唤书不足
     * </pre>
     *
     * <code>RCE_DrawCard_LowBookNotEnought = 342;</code>
     */
    RCE_DrawCard_LowBookNotEnought(342),
    /**
     * <pre>
     *高级召唤书不足
     * </pre>
     *
     * <code>RCE_DrawCard_HighBookNotEnought = 343;</code>
     */
    RCE_DrawCard_HighBookNotEnought(343),
    /**
     * <pre>
     *当前高级奖池抽取次数达上限,需要刷新后才能继续抽取
     * </pre>
     *
     * <code>RCE_DrawCard_HighDrawCountUpperLimit = 344;</code>
     */
    RCE_DrawCard_HighDrawCountUpperLimit(344),
    /**
     * <pre>
     *兑换次数达上限
     * </pre>
     *
     * <code>RCE_GoldEx_ExUpperLimit = 361;</code>
     */
    RCE_GoldEx_ExUpperLimit(361),
    /**
     * <pre>
     *===================宠物系统end   预留381 - 400=================
     * 强化失败：觉醒失败
     * </pre>
     *
     * <code>RCE_Pet_UpLvlFailure = 381;</code>
     */
    RCE_Pet_UpLvlFailure(381),
    /**
     * <pre>
     * 宠物不存在
     * </pre>
     *
     * <code>RCE_Pet_PetNotExist = 382;</code>
     */
    RCE_Pet_PetNotExist(382),
    /**
     * <pre>
     * 符文不存在
     * </pre>
     *
     * <code>RCE_Pet_RuneNotExist = 383;</code>
     */
    RCE_Pet_RuneNotExist(383),
    /**
     * <pre>
     * 快速完成委托已结束
     * </pre>
     *
     * <code>RCE_Pet_MissionAlreadyFinished = 384;</code>
     */
    RCE_Pet_MissionAlreadyFinished(384),
    /**
     * <pre>
     * 委托数已经达到最大
     * </pre>
     *
     * <code>RCE_Pet_MissionMaxError = 385;</code>
     */
    RCE_Pet_MissionMaxError(385),
    /**
     * <pre>
     * 委托未找到
     * </pre>
     *
     * <code>RCE_Pet_MissionNotFound = 386;</code>
     */
    RCE_Pet_MissionNotFound(386),
    /**
     * <pre>
     * 接受委托的宠物不合要求
     * </pre>
     *
     * <code>RCE_Pet_MissionPetNotCorrect = 387;</code>
     */
    RCE_Pet_MissionPetNotCorrect(387),
    /**
     * <pre>
     * 合成碎片数量不足
     * </pre>
     *
     * <code>RCE_Pet_FragmentNotEnough = 388;</code>
     */
    RCE_Pet_FragmentNotEnough(388),
    /**
     * <pre>
     * 碎片未找到
     * </pre>
     *
     * <code>RCE_Pet_FragmentNotFound = 389;</code>
     */
    RCE_Pet_FragmentNotFound(389),
    /**
     * <pre>
     * 宠物状态：锁定中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusLock = 390;</code>
     */
    RCE_Pet_PetStatusLock(390),
    /**
     * <pre>
     * 宠物状态：宠物委托中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusMissionLock = 391;</code>
     */
    RCE_Pet_PetStatusMissionLock(391),
    /**
     * <pre>
     * 宠物状态：宠物矿区中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusMineLock = 392;</code>
     */
    RCE_Pet_PetStatusMineLock(392),
    /**
     * <pre>
     * 宠物状态：宠物备战中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusTeamLock = 393;</code>
     */
    RCE_Pet_PetStatusTeamLock(393),
    /**
     * <pre>
     * 宠物状态：宠物转换中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusChangeLock = 394;</code>
     */
    RCE_Pet_PetStatusChangeLock(394),
    /**
     * <pre>
     * 收集进度：不能领取奖励，奖励id/宠物收集进度错误
     * </pre>
     *
     * <code>RCE_Pet_PetColleciontRewardError = 395;</code>
     */
    RCE_Pet_PetColleciontRewardError(395),
    /**
     * <pre>
     * 宠物强化已到最大
     * </pre>
     *
     * <code>RCE_Pet_PetLvlMaxErroe = 396;</code>
     */
    RCE_Pet_PetLvlMaxErroe(396),
    /**
     * <pre>
     * 宠物符文已装备
     * </pre>
     *
     * <code>RCE_Pet_PetRuneAlreadyEquiped = 397;</code>
     */
    RCE_Pet_PetRuneAlreadyEquiped(397),
    /**
     * <pre>
     * 宠物背包容量不足
     * </pre>
     *
     * <code>RCE_Pet_PetBagNotEnough = 398;</code>
     */
    RCE_Pet_PetBagNotEnough(398),
    /**
     * <pre>
     *符文背包容量不足
     * </pre>
     *
     * <code>RCE_Pet_RuneBagNotEnough = 399;</code>
     */
    RCE_Pet_RuneBagNotEnough(399),
    /**
     * <pre>
     *请求关卡配置为空
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointCfgIsNull = 401;</code>
     */
    RCE_MainLine_CheckPointCfgIsNull(401),
    /**
     * <pre>
     *请求关卡未解锁
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointIsLock = 402;</code>
     */
    RCE_MainLine_CheckPointIsLock(402),
    /**
     * <pre>
     *请求关卡不能战斗
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointCanNotBattle = 403;</code>
     */
    RCE_MainLine_CheckPointCanNotBattle(403),
    /**
     * <pre>
     *当前关卡闯关顺序错误
     * </pre>
     *
     * <code>RCE_MainLine_FightOrderError = 404;</code>
     */
    RCE_MainLine_FightOrderError(404),
    /**
     * <pre>
     *当前节点不可达
     * </pre>
     *
     * <code>RCE_MainLine_NodeCanNotReach = 405;</code>
     */
    RCE_MainLine_NodeCanNotReach(405),
    /**
     * <pre>
     *请求关卡与当前关卡不匹配
     * </pre>
     *
     * <code>RCE_MainLine_CurLvMissMatch = 406;</code>
     */
    RCE_MainLine_CurLvMissMatch(406),
    /**
     * <pre>
     *节点类型不能进行战斗
     * </pre>
     *
     * <code>RCE_MainLine_NodeTypeCanNotBattle = 407;</code>
     */
    RCE_MainLine_NodeTypeCanNotBattle(407),
    /**
     * <pre>
     *当前节点已经打过了
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeIsPassed = 408;</code>
     */
    RCE_MainLine_CurNodeIsPassed(408),
    /**
     * <pre>
     *玩家没有正在挂机的关卡
     * </pre>
     *
     * <code>RCE_MainLine_PlayerHaveNoOnhook = 409;</code>
     */
    RCE_MainLine_PlayerHaveNoOnhook(409),
    /**
     * <pre>
     *节点配置为空
     * </pre>
     *
     * <code>RCE_MainLine_NodeCfgIsNull = 410;</code>
     */
    RCE_MainLine_NodeCfgIsNull(410),
    /**
     * <pre>
     *当前节点未解锁
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeIsLock = 411;</code>
     */
    RCE_MainLine_CurNodeIsLock(411),
    /**
     * <pre>
     *当前节点还不能战斗
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeCanNotBattle = 412;</code>
     */
    RCE_MainLine_CurNodeCanNotBattle(412),
    /**
     * <pre>
     *当前关卡的密码还未输入完毕
     * </pre>
     *
     * <code>RCE_MainLine_PswNotInputFinish = 413;</code>
     */
    RCE_MainLine_PswNotInputFinish(413),
    /**
     * <pre>
     *关卡类型不匹配
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointTypeMissMatch = 414;</code>
     */
    RCE_MainLine_CheckPointTypeMissMatch(414),
    /**
     * <pre>
     *密码长度不匹配
     * </pre>
     *
     * <code>RCE_MainLine_PswLengthError = 415;</code>
     */
    RCE_MainLine_PswLengthError(415),
    /**
     * <pre>
     *输入非密码型关卡
     * </pre>
     *
     * <code>RCE_MainLine_InputNotPswNode = 416;</code>
     */
    RCE_MainLine_InputNotPswNode(416),
    /**
     * <pre>
     *重复输入相同密码
     * </pre>
     *
     * <code>RCE_MainLine_InputTheSamePsw = 417;</code>
     */
    RCE_MainLine_InputTheSamePsw(417),
    /**
     * <pre>
     *快速挂机次数当日已达上限
     * </pre>
     *
     * <code>RCE_MainLine_QuickOnHookLimit = 418;</code>
     */
    RCE_MainLine_QuickOnHookLimit(418),
    /**
     * <pre>
     *===================巡逻队start   预留451 - 470===================
     * 当前位置不正确
     * </pre>
     *
     * <code>RCE_Patorl_ErrorLocation = 451;</code>
     */
    RCE_Patorl_ErrorLocation(451),
    /**
     * <pre>
     * 当前位置已被探索
     * </pre>
     *
     * <code>RCE_Patorl_Explored = 452;</code>
     */
    RCE_Patorl_Explored(452),
    /**
     * <pre>
     * 当前位置还未被探索
     * </pre>
     *
     * <code>RCE_Patrol_NotExplored = 453;</code>
     */
    RCE_Patrol_NotExplored(453),
    /**
     * <pre>
     * 探索事件不匹配
     * </pre>
     *
     * <code>RCE_Patorl_EventFail = 454;</code>
     */
    RCE_Patorl_EventFail(454),
    /**
     * <pre>
     * 当前已失败
     * </pre>
     *
     * <code>RCE_Patrol_FailureError = 455;</code>
     */
    RCE_Patrol_FailureError(455),
    /**
     * <pre>
     * 今日失败次数已达最大
     * </pre>
     *
     * <code>RCE_Patrol_DailyMaxFailure = 456;</code>
     */
    RCE_Patrol_DailyMaxFailure(456),
    /**
     * <pre>
     *商品Id不存在
     * </pre>
     *
     * <code>RCE_BlackMarket_GoodsIdNotExist = 471;</code>
     */
    RCE_BlackMarket_GoodsIdNotExist(471),
    /**
     * <pre>
     *商品购买次数上限
     * </pre>
     *
     * <code>RCE_BlackMarket_GoodsBuyUpperLimit = 472;</code>
     */
    RCE_BlackMarket_GoodsBuyUpperLimit(472),
    /**
     * <pre>
     *刷新次数上限
     * </pre>
     *
     * <code>RCE_BlackMarket_RefreshTimesLimit = 473;</code>
     */
    RCE_BlackMarket_RefreshTimesLimit(473),
    /**
     * <pre>
     *===================目标系统start 预留491 - 510===================
     * </pre>
     *
     * <code>RCE_Target_MissionUnfinished = 491;</code>
     */
    RCE_Target_MissionUnfinished(491),
    /**
     * <pre>
     *任务奖励已经领取
     * </pre>
     *
     * <code>RCE_Target_MissionAlreadyClaim = 492;</code>
     */
    RCE_Target_MissionAlreadyClaim(492),
    /**
     * <pre>
     *任务配置Id不存在
     * </pre>
     *
     * <code>RCE_Target_MissionCfgIdNotExist = 493;</code>
     */
    RCE_Target_MissionCfgIdNotExist(493),
    /**
     * <pre>
     *===================勇气试炼start   预留511 - 530===================
     * </pre>
     *
     * <code>RCE_BraveChallenge_ChoosenDifficulty = 511;</code>
     */
    RCE_BraveChallenge_ChoosenDifficulty(511),
    /**
     * <pre>
     * 游戏已经结束
     * </pre>
     *
     * <code>RCE_BraveChallenge_AlreadyFinish = 512;</code>
     */
    RCE_BraveChallenge_AlreadyFinish(512),
    /**
     * <pre>
     *===================矿区争夺start   预留531 - 560===================
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundMineSvr = 531;</code>
     */
    RCE_MineFight_NotFoundMineSvr(531),
    /**
     * <pre>
     * 未找到战斗服
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundBattleSrv = 532;</code>
     */
    RCE_MineFight_NotFoundBattleSrv(532),
    /**
     * <pre>
     * 未找到矿
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundMine = 533;</code>
     */
    RCE_MineFight_NotFoundMine(533),
    /**
     * <pre>
     * 开采劵不足
     * </pre>
     *
     * <code>RCE_MineFight_NotEnoughtExploitScroll = 534;</code>
     */
    RCE_MineFight_NotEnoughtExploitScroll(534),
    /**
     * <pre>
     * 小队掠夺中
     * </pre>
     *
     * <code>RCE_MineFight_PetFormPlundering = 535;</code>
     */
    RCE_MineFight_PetFormPlundering(535),
    /**
     * <pre>
     * 小队开采中
     * </pre>
     *
     * <code>RCE_MineFight_PetFormExploiting = 536;</code>
     */
    RCE_MineFight_PetFormExploiting(536),
    /**
     * <pre>
     * 小队奖励未领取
     * </pre>
     *
     * <code>RCE_MineFight_NotClaimPetFormReward = 537;</code>
     */
    RCE_MineFight_NotClaimPetFormReward(537),
    /**
     * <pre>
     * 矿正在被掠夺
     * </pre>
     *
     * <code>RCE_MineFight_MineIsBattling = 538;</code>
     */
    RCE_MineFight_MineIsBattling(538),
    /**
     * <pre>
     * 小队宠物为空
     * </pre>
     *
     * <code>RCE_MineFight_EmptyPetForm = 539;</code>
     */
    RCE_MineFight_EmptyPetForm(539),
    /**
     * <pre>
     * 敌方已放弃掠夺
     * </pre>
     *
     * <code>RCE_MineFight_EnemyGiveUp = 540;</code>
     */
    RCE_MineFight_EnemyGiveUp(540),
    /**
     * <pre>
     * 正在进行其他战斗
     * </pre>
     *
     * <code>RCE_MineFight_PlayerBattling = 541;</code>
     */
    RCE_MineFight_PlayerBattling(541),
    /**
     * <pre>
     * 未进入矿区
     * </pre>
     *
     * <code>RCE_MineFight_NotInMineFight = 542;</code>
     */
    RCE_MineFight_NotInMineFight(542),
    /**
     * <pre>
     * 选择奖励类型错误
     * </pre>
     *
     * <code>RCE_MineFight_ChooseRewardErrorIndex = 543;</code>
     */
    RCE_MineFight_ChooseRewardErrorIndex(543),
    /**
     * <pre>
     * 该矿未占领
     * </pre>
     *
     * <code>RCE_MineFight_NotOccupiedMine = 544;</code>
     */
    RCE_MineFight_NotOccupiedMine(544),
    /**
     * <pre>
     * 矿状态错误
     * </pre>
     *
     * <code>RCE_MineFight_ErrorMineState = 545;</code>
     */
    RCE_MineFight_ErrorMineState(545),
    /**
     * <pre>
     * 奖励已被领取
     * </pre>
     *
     * <code>RCE_MineFight_ClaimedReward = 546;</code>
     */
    RCE_MineFight_ClaimedReward(546),
    /**
     * <pre>
     * 未达到等级要求
     * </pre>
     *
     * <code>RCE_MineFight_LevelLimit = 547;</code>
     */
    RCE_MineFight_LevelLimit(547),
    /**
     * <pre>
     * 开采劵配置错误
     * </pre>
     *
     * <code>RCE_MineFight_ScrollPriceError = 548;</code>
     */
    RCE_MineFight_ScrollPriceError(548),
    /**
     * <pre>
     * 已经有好友助阵
     * </pre>
     *
     * <code>RCE_MineFight_FriendHelping = 549;</code>
     */
    RCE_MineFight_FriendHelping(549),
    /**
     * <pre>
     * 好友未设置助阵阵容
     * </pre>
     *
     * <code>RCE_MineFight_EmptyFriendPetForm = 550;</code>
     */
    RCE_MineFight_EmptyFriendPetForm(550),
    /**
     * <pre>
     * 好友正在帮助其他玩家
     * </pre>
     *
     * <code>RCE_MineFight_FriendPetFormLocked = 551;</code>
     */
    RCE_MineFight_FriendPetFormLocked(551),
    /**
     * <pre>
     * 好友拒绝帮助
     * </pre>
     *
     * <code>RCE_MineFight_FriendRefused = 552;</code>
     */
    RCE_MineFight_FriendRefused(552),
    /**
     * <pre>
     * 已经发送过申请了
     * </pre>
     *
     * <code>RCE_MineFight_AppliedFriendHelp = 553;</code>
     */
    RCE_MineFight_AppliedFriendHelp(553),
    /**
     * <pre>
     * 未找到小队信息
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundPetForm = 554;</code>
     */
    RCE_MineFight_NotFoundPetForm(554),
    /**
     * <pre>
     * 战斗中无法退出
     * </pre>
     *
     * <code>RCE_MineFight_ExitFailedForBattling = 555;</code>
     */
    RCE_MineFight_ExitFailedForBattling(555),
    /**
     * <pre>
     * 奖励对象已过期
     * </pre>
     *
     * <code>RCE_MineFight_BeyondGiftExpire = 556;</code>
     */
    RCE_MineFight_BeyondGiftExpire(556),
    /**
     * <pre>
     * 该好友正在帮助你，做人要厚道
     * </pre>
     *
     * <code>RCE_MineFight_FriendIsHelpingYou = 557;</code>
     */
    RCE_MineFight_FriendIsHelpingYou(557),
    /**
     * <pre>
     * 只能助阵一个好友
     * </pre>
     *
     * <code>RCE_MineFight_CanNotHelpMultiFriend = 558;</code>
     */
    RCE_MineFight_CanNotHelpMultiFriend(558),
    /**
     * <pre>
     * 不能掠夺正在助阵的好友
     * </pre>
     *
     * <code>RCE_MineFight_CannotOccupyHelpingFriend = 559;</code>
     */
    RCE_MineFight_CannotOccupyHelpingFriend(559),
    /**
     * <pre>
     *===================远古召唤start   预留561 - 580===================
     * </pre>
     *
     * <code>RCE_AncientCall_PetInTeam = 561;</code>
     */
    RCE_AncientCall_PetInTeam(561),
    /**
     * <pre>
     *不支持的宠物转化类型
     * </pre>
     *
     * <code>RCE_PetTransfer_UnsupportedTransferType = 562;</code>
     */
    RCE_PetTransfer_UnsupportedTransferType(562),
    /**
     * <pre>
     *当期没有宠物可以转化
     * </pre>
     *
     * <code>RCE_PetTramsfer_HavaNoPetInTrsnsfer = 563;</code>
     */
    RCE_PetTramsfer_HavaNoPetInTrsnsfer(563),
    /**
     * <pre>
     *===================资源副本  start 预留581 - 600===================
     * </pre>
     *
     * <code>RCE_ResCopy_ChallengeTimesLimit = 581;</code>
     */
    RCE_ResCopy_ChallengeTimesLimit(581),
    /**
     * <pre>
     *购买次数上限
     * </pre>
     *
     * <code>RCE_ResCopy_BuyTimesLimit = 582;</code>
     */
    RCE_ResCopy_BuyTimesLimit(582),
    /**
     * <pre>
     *挑战次数上限
     * </pre>
     *
     * <code>RCE_ResCopy_FightIsLimit = 583;</code>
     */
    RCE_ResCopy_FightIsLimit(583),
    /**
     * <pre>
     *关卡不能挑战
     * </pre>
     *
     * <code>RCE_ResCopy_IndexCanNotFight = 584;</code>
     */
    RCE_ResCopy_IndexCanNotFight(584),
    /**
     * <pre>
     *活动未开启
     * </pre>
     *
     * <code>RCE_Activity_NotOpen = 601;</code>
     */
    RCE_Activity_NotOpen(601),
    /**
     * <pre>
     *活动货币不足
     * </pre>
     *
     * <code>RCE_Activity_CurrencyNotEnough = 602;</code>
     */
    RCE_Activity_CurrencyNotEnough(602),
    /**
     * <pre>
     *活动已经超过时间
     * </pre>
     *
     * <code>RCE_Activity_MissionOutOfTime = 603;</code>
     */
    RCE_Activity_MissionOutOfTime(603),
    /**
     * <pre>
     *当前不能领取奖励
     * </pre>
     *
     * <code>RCE_Activity_MissionCanNotClaim = 604;</code>
     */
    RCE_Activity_MissionCanNotClaim(604),
    /**
     * <pre>
     *奖励已领取
     * </pre>
     *
     * <code>RCE_Activity_RewardAlreadyClaim = 605;</code>
     */
    RCE_Activity_RewardAlreadyClaim(605),
    /**
     * <pre>
     *重复签到 
     * </pre>
     *
     * <code>RCE_Activity_RepeatedSignIn = 606;</code>
     */
    RCE_Activity_RepeatedSignIn(606),
    /**
     * <pre>
     *兑换已达上限
     * </pre>
     *
     * <code>RCE_Activity_ExTimesLimit = 607;</code>
     */
    RCE_Activity_ExTimesLimit(607),
    /**
     * <pre>
     *不满足兑换条件
     * </pre>
     *
     * <code>RCE_Activity_DissatisfyAddition = 608;</code>
     */
    RCE_Activity_DissatisfyAddition(608),
    /**
     * <pre>
     *当前任务已过期
     * </pre>
     *
     * <code>RCE_Activity_MissionIsExpire = 609;</code>
     */
    RCE_Activity_MissionIsExpire(609),
    /**
     * <pre>
     * 符文已锁定
     * </pre>
     *
     * <code>RCE_Pet_PetRuneLock = 651;</code>
     */
    RCE_Pet_PetRuneLock(651),
    /**
     * <pre>
     *================== 激活码 start  700 - 750========================
     * </pre>
     *
     * <code>RCE_ActiveCode_LoseEfficacy = 701;</code>
     */
    RCE_ActiveCode_LoseEfficacy(701),
    /**
     * <pre>
     *激活码已被使用
     * </pre>
     *
     * <code>RCE_ActiveCode_Used = 702;</code>
     */
    RCE_ActiveCode_Used(702),
    /**
     * <pre>
     *激活码错误
     * </pre>
     *
     * <code>RCE_ActiveCode_Error = 703;</code>
     */
    RCE_ActiveCode_Error(703),
    /**
     * <pre>
     *激活码使用次数上限
     * </pre>
     *
     * <code>RCE_ActiveCode_UpperLimit = 704;</code>
     */
    RCE_ActiveCode_UpperLimit(704),
    /**
     * <pre>
     *使用过同类型的激活码
     * </pre>
     *
     * <code>RCE_ActiveCode_UseSameTypeCode = 705;</code>
     */
    RCE_ActiveCode_UseSameTypeCode(705),
    /**
     * <pre>
     *================== 新手引导 start  751 - 800==========================
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedName = 751;</code>
     */
    RCE_NewBee_RepeatedName(751),
    /**
     * <pre>
     *新手引导领取宠物
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedChoicePet = 752;</code>
     */
    RCE_NewBee_RepeatedChoicePet(752),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>RCE_Null = 0;</code>
     */
    public static final int RCE_Null_VALUE = 0;
    /**
     * <code>RCE_Success = 1;</code>
     */
    public static final int RCE_Success_VALUE = 1;
    /**
     * <code>RCE_Failure = 2;</code>
     */
    public static final int RCE_Failure_VALUE = 2;
    /**
     * <pre>
     *未知错误
     * </pre>
     *
     * <code>RCE_UnknownError = 3;</code>
     */
    public static final int RCE_UnknownError_VALUE = 3;
    /**
     * <pre>
     *玩家离线，需要重新登录
     * </pre>
     *
     * <code>RCE_PlayerOffline = 4;</code>
     */
    public static final int RCE_PlayerOffline_VALUE = 4;
    /**
     * <pre>
     *参数错误
     * </pre>
     *
     * <code>RCE_ErrorParam = 5;</code>
     */
    public static final int RCE_ErrorParam_VALUE = 5;
    /**
     * <pre>
     *功能未开放
     * </pre>
     *
     * <code>RCE_FunctionIsLock = 6;</code>
     */
    public static final int RCE_FunctionIsLock_VALUE = 6;
    /**
     * <pre>
     *商店类型不匹配
     * </pre>
     *
     * <code>RCE_ShopTypeMissMatch = 7;</code>
     */
    public static final int RCE_ShopTypeMissMatch_VALUE = 7;
    /**
     * <pre>
     *材料不足
     * </pre>
     *
     * <code>RCE_MatieralNotEnough = 8;</code>
     */
    public static final int RCE_MatieralNotEnough_VALUE = 8;
    /**
     * <pre>
     *等级不足
     * </pre>
     *
     * <code>RCE_LvNotEnough = 9;</code>
     */
    public static final int RCE_LvNotEnough_VALUE = 9;
    /**
     * <code>RCE_Login_ErrorPwd = 10;</code>
     */
    public static final int RCE_Login_ErrorPwd_VALUE = 10;
    /**
     * <code>RCE_Login_FullPlayer = 11;</code>
     */
    public static final int RCE_Login_FullPlayer_VALUE = 11;
    /**
     * <pre>
     *服务器维护中
     * </pre>
     *
     * <code>RCE_Login_ServerNotOpen = 12;</code>
     */
    public static final int RCE_Login_ServerNotOpen_VALUE = 12;
    /**
     * <pre>
     *配置不存在
     * </pre>
     *
     * <code>RSE_ConfigNotExist = 13;</code>
     */
    public static final int RSE_ConfigNotExist_VALUE = 13;
    /**
     * <pre>
     *当前vip等级礼包已经领取
     * </pre>
     *
     * <code>RSE_VipGiftClaimed = 14;</code>
     */
    public static final int RSE_VipGiftClaimed_VALUE = 14;
    /**
     * <code>RCE_CreateRole_DuplicateName = 20;</code>
     */
    public static final int RCE_CreateRole_DuplicateName_VALUE = 20;
    /**
     * <code>RCE_CreateRole_InvalidName = 21;</code>
     */
    public static final int RCE_CreateRole_InvalidName_VALUE = 21;
    /**
     * <pre>
     * 顺序错误,应先发login消息
     * </pre>
     *
     * <code>RCE_CreateRole_ErrorOrder = 22;</code>
     */
    public static final int RCE_CreateRole_ErrorOrder_VALUE = 22;
    /**
     * <code>RCE_KickOut_Null = 30;</code>
     */
    public static final int RCE_KickOut_Null_VALUE = 30;
    /**
     * <pre>
     * 重复登录
     * </pre>
     *
     * <code>RCE_KickOut_RepeatLogin = 31;</code>
     */
    public static final int RCE_KickOut_RepeatLogin_VALUE = 31;
    /**
     * <pre>
     * 服务器关闭
     * </pre>
     *
     * <code>RCE_KickOut_ServerClose = 32;</code>
     */
    public static final int RCE_KickOut_ServerClose_VALUE = 32;
    /**
     * <pre>
     * 防沉迷限制
     * </pre>
     *
     * <code>RCE_KickOut_AntiLimit = 33;</code>
     */
    public static final int RCE_KickOut_AntiLimit_VALUE = 33;
    /**
     * <pre>
     * 账号封禁
     * </pre>
     *
     * <code>RCE_KickOut_Banned = 34;</code>
     */
    public static final int RCE_KickOut_Banned_VALUE = 34;
    /**
     * <pre>
     *该邮件不存在
     * </pre>
     *
     * <code>RCE_Mail_UnExist = 41;</code>
     */
    public static final int RCE_Mail_UnExist_VALUE = 41;
    /**
     * <pre>
     *附件不存在
     * </pre>
     *
     * <code>RCE_Mail_NoAttachment = 42;</code>
     */
    public static final int RCE_Mail_NoAttachment_VALUE = 42;
    /**
     * <pre>
     *背包容量不足
     * </pre>
     *
     * <code>RCE_Mail_UnEnoughtCapacity = 43;</code>
     */
    public static final int RCE_Mail_UnEnoughtCapacity_VALUE = 43;
    /**
     * <pre>
     *附件已经领取过了
     * </pre>
     *
     * <code>RCE_Mail_AlreadyCliamed = 44;</code>
     */
    public static final int RCE_Mail_AlreadyCliamed_VALUE = 44;
    /**
     * <pre>
     *附件未领取
     * </pre>
     *
     * <code>RCE_Mail_AttachmentNoClaim = 45;</code>
     */
    public static final int RCE_Mail_AttachmentNoClaim_VALUE = 45;
    /**
     * <pre>
     *邮件未读
     * </pre>
     *
     * <code>RCE_Mail_UnRead = 46;</code>
     */
    public static final int RCE_Mail_UnRead_VALUE = 46;
    /**
     * <pre>
     *该位置已有宠物,无法上阵
     * </pre>
     *
     * <code>RCE_PrepareWar_TargetPositionHasPet = 47;</code>
     */
    public static final int RCE_PrepareWar_TargetPositionHasPet_VALUE = 47;
    /**
     * <pre>
     *宠物在宠物转化中还未确认不能备战
     * </pre>
     *
     * <code>RCE_PrepareWar_PetIsInPetTransfer = 48;</code>
     */
    public static final int RCE_PrepareWar_PetIsInPetTransfer_VALUE = 48;
    /**
     * <pre>
     *该小队已上锁，无法编辑（适用矿区小队）
     * </pre>
     *
     * <code>RCE_PrepareWar_TeamStatusIslock = 49;</code>
     */
    public static final int RCE_PrepareWar_TeamStatusIslock_VALUE = 49;
    /**
     * <pre>
     *该宠物已阵亡
     * </pre>
     *
     * <code>RCE_PrepareWar_PetIsDead = 50;</code>
     */
    public static final int RCE_PrepareWar_PetIsDead_VALUE = 50;
    /**
     * <pre>
     *宠物不存在
     * </pre>
     *
     * <code>RCE_PrepareWar_PetNoExist = 51;</code>
     */
    public static final int RCE_PrepareWar_PetNoExist_VALUE = 51;
    /**
     * <pre>
     *等级不足，不能使用该技能
     * </pre>
     *
     * <code>RCE_PrepareWar_LvNotEought = 52;</code>
     */
    public static final int RCE_PrepareWar_LvNotEought_VALUE = 52;
    /**
     * <pre>
     *非法小队名
     * </pre>
     *
     * <code>RCE_PrepareWar_IllegalTeamName = 53;</code>
     */
    public static final int RCE_PrepareWar_IllegalTeamName_VALUE = 53;
    /**
     * <pre>
     *无法再购买小队
     * </pre>
     *
     * <code>RCE_PrepareWar_CanNotBuyMore = 54;</code>
     */
    public static final int RCE_PrepareWar_CanNotBuyMore_VALUE = 54;
    /**
     * <pre>
     *钻石不足
     * </pre>
     *
     * <code>RCE_PrepareWar_DiamondNotEnought = 56;</code>
     */
    public static final int RCE_PrepareWar_DiamondNotEnought_VALUE = 56;
    /**
     * <pre>
     *该位置未解锁
     * </pre>
     *
     * <code>RCE_PrepareWar_PositionIsLock = 57;</code>
     */
    public static final int RCE_PrepareWar_PositionIsLock_VALUE = 57;
    /**
     * <pre>
     *该小队未解锁
     * </pre>
     *
     * <code>RCE_PrepareWar_TeamIslock = 58;</code>
     */
    public static final int RCE_PrepareWar_TeamIslock_VALUE = 58;
    /**
     * <pre>
     *技能不存在
     * </pre>
     *
     * <code>RCE_PrepareWar_SkillNotExist = 59;</code>
     */
    public static final int RCE_PrepareWar_SkillNotExist_VALUE = 59;
    /**
     * <pre>
     *重复上阵同一宠物
     * </pre>
     *
     * <code>RCE_PrepareWar_RepeatedSetSamePet = 60;</code>
     */
    public static final int RCE_PrepareWar_RepeatedSetSamePet_VALUE = 60;
    /**
     * <pre>
     *道具不存在
     * </pre>
     *
     * <code>RCE_Itembag_ItemNotExist = 61;</code>
     */
    public static final int RCE_Itembag_ItemNotExist_VALUE = 61;
    /**
     * <pre>
     *道具不足
     * </pre>
     *
     * <code>RCE_Itembag_ItemNotEnought = 62;</code>
     */
    public static final int RCE_Itembag_ItemNotEnought_VALUE = 62;
    /**
     * <pre>
     *该道具无法使用
     * </pre>
     *
     * <code>RCE_Itembag_ItemCanNotUsed = 63;</code>
     */
    public static final int RCE_Itembag_ItemCanNotUsed_VALUE = 63;
    /**
     * <pre>
     *该道具无法出售
     * </pre>
     *
     * <code>RCE_ItemBag_ItemCanNotSell = 64;</code>
     */
    public static final int RCE_ItemBag_ItemCanNotSell_VALUE = 64;
    /**
     * <pre>
     *迷雾森林宝箱每日次数限制
     * </pre>
     *
     * <code>RCE_ItemBag_MistBoxLimit = 65;</code>
     */
    public static final int RCE_ItemBag_MistBoxLimit_VALUE = 65;
    /**
     * <pre>
     *该头像还未拥有，不能更换
     * </pre>
     *
     * <code>RCE_Player_NotOwnedAvatar = 71;</code>
     */
    public static final int RCE_Player_NotOwnedAvatar_VALUE = 71;
    /**
     * <pre>
     *金币不足
     * </pre>
     *
     * <code>RCE_Player_GoldNotEnought = 72;</code>
     */
    public static final int RCE_Player_GoldNotEnought_VALUE = 72;
    /**
     * <pre>
     *钻石不足
     * </pre>
     *
     * <code>RCE_Player_DiamondNotEnought = 73;</code>
     */
    public static final int RCE_Player_DiamondNotEnought_VALUE = 73;
    /**
     * <pre>
     *货币不足（金币，魔石，魔晶）
     * </pre>
     *
     * <code>RCE_Player_CurrencysNotEnought = 74;</code>
     */
    public static final int RCE_Player_CurrencysNotEnought_VALUE = 74;
    /**
     * <pre>
     *展示的宠物不存在
     * </pre>
     *
     * <code>RCE_Player_DisplayPetNotExist = 75;</code>
     */
    public static final int RCE_Player_DisplayPetNotExist_VALUE = 75;
    /**
     * <pre>
     *查询的玩家不存在
     * </pre>
     *
     * <code>RCE_Player_QueryPlayerNotExist = 76;</code>
     */
    public static final int RCE_Player_QueryPlayerNotExist_VALUE = 76;
    /**
     * <pre>
     *该关卡不能游戏，请选择其他关卡
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvCanNotPlay = 81;</code>
     */
    public static final int RCE_EndlessSpire_ThisLvCanNotPlay_VALUE = 81;
    /**
     * <pre>
     *玩家状态繁忙
     * </pre>
     *
     * <code>RCE_EndlessSpire_PlayerStatusBusy = 82;</code>
     */
    public static final int RCE_EndlessSpire_PlayerStatusBusy_VALUE = 82;
    /**
     * <pre>
     *该关卡不能结算，
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvCanNotSettle = 83;</code>
     */
    public static final int RCE_EndlessSpire_ThisLvCanNotSettle_VALUE = 83;
    /**
     * <pre>
     *当前使用的小队没有宠物
     * </pre>
     *
     * <code>RCE_Battle_UsedTeamNotHavePet = 91;</code>
     */
    public static final int RCE_Battle_UsedTeamNotHavePet_VALUE = 91;
    /**
     * <pre>
     *当前使用小队的宠物数据为空
     * </pre>
     *
     * <code>RCE_Battle_UsedTeamPetDataIsNull = 92;</code>
     */
    public static final int RCE_Battle_UsedTeamPetDataIsNull_VALUE = 92;
    /**
     * <pre>
     *重复进入战斗
     * </pre>
     *
     * <code>RCE_Battle_RepeatedEnterBattle = 93;</code>
     */
    public static final int RCE_Battle_RepeatedEnterBattle_VALUE = 93;
    /**
     * <pre>
     * 未找到玩家
     * </pre>
     *
     * <code>RCE_AlterName_NotFoundPlayer = 100;</code>
     */
    public static final int RCE_AlterName_NotFoundPlayer_VALUE = 100;
    /**
     * <pre>
     * 非法玩家
     * </pre>
     *
     * <code>RCE_AlterName_EvilPlayer = 101;</code>
     */
    public static final int RCE_AlterName_EvilPlayer_VALUE = 101;
    /**
     * <pre>
     * 改名CD中
     * </pre>
     *
     * <code>RCE_AlterName_DuringRenameCD = 102;</code>
     */
    public static final int RCE_AlterName_DuringRenameCD_VALUE = 102;
    /**
     * <pre>
     *非法玩家名
     * </pre>
     *
     * <code>RCE_AlterName_IllegalName = 103;</code>
     */
    public static final int RCE_AlterName_IllegalName_VALUE = 103;
    /**
     * <pre>
     * 含有非法字符串
     * </pre>
     *
     * <code>RCE_AlterName_IllegalWords = 110;</code>
     */
    public static final int RCE_AlterName_IllegalWords_VALUE = 110;
    /**
     * <pre>
     * 名字过长
     * </pre>
     *
     * <code>RCE_AlterName_TooLong = 111;</code>
     */
    public static final int RCE_AlterName_TooLong_VALUE = 111;
    /**
     * <pre>
     * 名字重复
     * </pre>
     *
     * <code>RCE_AlterName_Duplicate = 112;</code>
     */
    public static final int RCE_AlterName_Duplicate_VALUE = 112;
    /**
     * <pre>
     * 新名字长度不足
     * </pre>
     *
     * <code>RCE_AlterName_Empty = 113;</code>
     */
    public static final int RCE_AlterName_Empty_VALUE = 113;
    /**
     * <pre>
     *===================迷雾森林start 预留200 - 300=================
     * </pre>
     *
     * <code>RCE_MistForest_CreateRoomFail = 200;</code>
     */
    public static final int RCE_MistForest_CreateRoomFail_VALUE = 200;
    /**
     * <pre>
     * 服务器未登录(服务器用)
     * </pre>
     *
     * <code>RCE_MistForest_ServerNotLogin = 260;</code>
     */
    public static final int RCE_MistForest_ServerNotLogin_VALUE = 260;
    /**
     * <pre>
     *活动状态不匹配
     * </pre>
     *
     * <code>RCE_ForInv_StatusMismatching = 301;</code>
     */
    public static final int RCE_ForInv_StatusMismatching_VALUE = 301;
    /**
     * <pre>
     *第一阶段小怪Idx不存在
     * </pre>
     *
     * <code>RCE_ForInv_MonsterIdxNotExist = 302;</code>
     */
    public static final int RCE_ForInv_MonsterIdxNotExist_VALUE = 302;
    /**
     * <pre>
     *bossIdx 不匹配
     * </pre>
     *
     * <code>RCE_ForInv_BossCloneNotExist = 303;</code>
     */
    public static final int RCE_ForInv_BossCloneNotExist_VALUE = 303;
    /**
     * <pre>
     *过渡阶段已达上限
     * </pre>
     *
     * <code>RCE_ForInv_ClaimCountLimit = 304;</code>
     */
    public static final int RCE_ForInv_ClaimCountLimit_VALUE = 304;
    /**
     * <pre>
     *移除小怪失败
     * </pre>
     *
     * <code>RCE_ForInv_RemoveMonsterFailed = 305;</code>
     */
    public static final int RCE_ForInv_RemoveMonsterFailed_VALUE = 305;
    /**
     * <pre>
     *生成小怪失败
     * </pre>
     *
     * <code>RCR_ForInv_CreateMonsterFailed = 306;</code>
     */
    public static final int RCR_ForInv_CreateMonsterFailed_VALUE = 306;
    /**
     * <pre>
     *好友已达上限
     * </pre>
     *
     * <code>RCE_Friend_FriendUpperLimit = 321;</code>
     */
    public static final int RCE_Friend_FriendUpperLimit_VALUE = 321;
    /**
     * <pre>
     *目标玩家不存在
     * </pre>
     *
     * <code>RCE_Friend_TargetPlayerNotExist = 322;</code>
     */
    public static final int RCE_Friend_TargetPlayerNotExist_VALUE = 322;
    /**
     * <pre>
     *目标玩家申请列表已达上限
     * </pre>
     *
     * <code>RCE_Friend_TargetApplyUpperLimit = 323;</code>
     */
    public static final int RCE_Friend_TargetApplyUpperLimit_VALUE = 323;
    /**
     * <pre>
     *目标好友列表已达上限
     * </pre>
     *
     * <code>RCE_Friend_TargetFriendUpperLimit = 324;</code>
     */
    public static final int RCE_Friend_TargetFriendUpperLimit_VALUE = 324;
    /**
     * <pre>
     *目标玩家还不是你的好友
     * </pre>
     *
     * <code>RCE_Friend_TargetIsNotFriend = 325;</code>
     */
    public static final int RCE_Friend_TargetIsNotFriend_VALUE = 325;
    /**
     * <pre>
     *不能查找自己
     * </pre>
     *
     * <code>RCE_Friend_CanNotFindSelf = 326;</code>
     */
    public static final int RCE_Friend_CanNotFindSelf_VALUE = 326;
    /**
     * <pre>
     *已经赠送友情点到目标玩家
     * </pre>
     *
     * <code>RCE_Friend_RepeatedSendToSameTarget = 327;</code>
     */
    public static final int RCE_Friend_RepeatedSendToSameTarget_VALUE = 327;
    /**
     * <pre>
     *还未收到该玩家赠送的友情点
     * </pre>
     *
     * <code>RCE_Friend_NotRecvPointFromThis = 328;</code>
     */
    public static final int RCE_Friend_NotRecvPointFromThis_VALUE = 328;
    /**
     * <pre>
     *已经领取该玩家的友情点
     * </pre>
     *
     * <code>RCE_Friend_RepeatedClaim = 329;</code>
     */
    public static final int RCE_Friend_RepeatedClaim_VALUE = 329;
    /**
     * <pre>
     *友情点不足无法兑换
     * </pre>
     *
     * <code>RCE_DrawCard_FriednshipPointNotEnought = 341;</code>
     */
    public static final int RCE_DrawCard_FriednshipPointNotEnought_VALUE = 341;
    /**
     * <pre>
     *低级召唤书不足
     * </pre>
     *
     * <code>RCE_DrawCard_LowBookNotEnought = 342;</code>
     */
    public static final int RCE_DrawCard_LowBookNotEnought_VALUE = 342;
    /**
     * <pre>
     *高级召唤书不足
     * </pre>
     *
     * <code>RCE_DrawCard_HighBookNotEnought = 343;</code>
     */
    public static final int RCE_DrawCard_HighBookNotEnought_VALUE = 343;
    /**
     * <pre>
     *当前高级奖池抽取次数达上限,需要刷新后才能继续抽取
     * </pre>
     *
     * <code>RCE_DrawCard_HighDrawCountUpperLimit = 344;</code>
     */
    public static final int RCE_DrawCard_HighDrawCountUpperLimit_VALUE = 344;
    /**
     * <pre>
     *兑换次数达上限
     * </pre>
     *
     * <code>RCE_GoldEx_ExUpperLimit = 361;</code>
     */
    public static final int RCE_GoldEx_ExUpperLimit_VALUE = 361;
    /**
     * <pre>
     *===================宠物系统end   预留381 - 400=================
     * 强化失败：觉醒失败
     * </pre>
     *
     * <code>RCE_Pet_UpLvlFailure = 381;</code>
     */
    public static final int RCE_Pet_UpLvlFailure_VALUE = 381;
    /**
     * <pre>
     * 宠物不存在
     * </pre>
     *
     * <code>RCE_Pet_PetNotExist = 382;</code>
     */
    public static final int RCE_Pet_PetNotExist_VALUE = 382;
    /**
     * <pre>
     * 符文不存在
     * </pre>
     *
     * <code>RCE_Pet_RuneNotExist = 383;</code>
     */
    public static final int RCE_Pet_RuneNotExist_VALUE = 383;
    /**
     * <pre>
     * 快速完成委托已结束
     * </pre>
     *
     * <code>RCE_Pet_MissionAlreadyFinished = 384;</code>
     */
    public static final int RCE_Pet_MissionAlreadyFinished_VALUE = 384;
    /**
     * <pre>
     * 委托数已经达到最大
     * </pre>
     *
     * <code>RCE_Pet_MissionMaxError = 385;</code>
     */
    public static final int RCE_Pet_MissionMaxError_VALUE = 385;
    /**
     * <pre>
     * 委托未找到
     * </pre>
     *
     * <code>RCE_Pet_MissionNotFound = 386;</code>
     */
    public static final int RCE_Pet_MissionNotFound_VALUE = 386;
    /**
     * <pre>
     * 接受委托的宠物不合要求
     * </pre>
     *
     * <code>RCE_Pet_MissionPetNotCorrect = 387;</code>
     */
    public static final int RCE_Pet_MissionPetNotCorrect_VALUE = 387;
    /**
     * <pre>
     * 合成碎片数量不足
     * </pre>
     *
     * <code>RCE_Pet_FragmentNotEnough = 388;</code>
     */
    public static final int RCE_Pet_FragmentNotEnough_VALUE = 388;
    /**
     * <pre>
     * 碎片未找到
     * </pre>
     *
     * <code>RCE_Pet_FragmentNotFound = 389;</code>
     */
    public static final int RCE_Pet_FragmentNotFound_VALUE = 389;
    /**
     * <pre>
     * 宠物状态：锁定中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusLock = 390;</code>
     */
    public static final int RCE_Pet_PetStatusLock_VALUE = 390;
    /**
     * <pre>
     * 宠物状态：宠物委托中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusMissionLock = 391;</code>
     */
    public static final int RCE_Pet_PetStatusMissionLock_VALUE = 391;
    /**
     * <pre>
     * 宠物状态：宠物矿区中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusMineLock = 392;</code>
     */
    public static final int RCE_Pet_PetStatusMineLock_VALUE = 392;
    /**
     * <pre>
     * 宠物状态：宠物备战中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusTeamLock = 393;</code>
     */
    public static final int RCE_Pet_PetStatusTeamLock_VALUE = 393;
    /**
     * <pre>
     * 宠物状态：宠物转换中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusChangeLock = 394;</code>
     */
    public static final int RCE_Pet_PetStatusChangeLock_VALUE = 394;
    /**
     * <pre>
     * 收集进度：不能领取奖励，奖励id/宠物收集进度错误
     * </pre>
     *
     * <code>RCE_Pet_PetColleciontRewardError = 395;</code>
     */
    public static final int RCE_Pet_PetColleciontRewardError_VALUE = 395;
    /**
     * <pre>
     * 宠物强化已到最大
     * </pre>
     *
     * <code>RCE_Pet_PetLvlMaxErroe = 396;</code>
     */
    public static final int RCE_Pet_PetLvlMaxErroe_VALUE = 396;
    /**
     * <pre>
     * 宠物符文已装备
     * </pre>
     *
     * <code>RCE_Pet_PetRuneAlreadyEquiped = 397;</code>
     */
    public static final int RCE_Pet_PetRuneAlreadyEquiped_VALUE = 397;
    /**
     * <pre>
     * 宠物背包容量不足
     * </pre>
     *
     * <code>RCE_Pet_PetBagNotEnough = 398;</code>
     */
    public static final int RCE_Pet_PetBagNotEnough_VALUE = 398;
    /**
     * <pre>
     *符文背包容量不足
     * </pre>
     *
     * <code>RCE_Pet_RuneBagNotEnough = 399;</code>
     */
    public static final int RCE_Pet_RuneBagNotEnough_VALUE = 399;
    /**
     * <pre>
     *请求关卡配置为空
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointCfgIsNull = 401;</code>
     */
    public static final int RCE_MainLine_CheckPointCfgIsNull_VALUE = 401;
    /**
     * <pre>
     *请求关卡未解锁
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointIsLock = 402;</code>
     */
    public static final int RCE_MainLine_CheckPointIsLock_VALUE = 402;
    /**
     * <pre>
     *请求关卡不能战斗
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointCanNotBattle = 403;</code>
     */
    public static final int RCE_MainLine_CheckPointCanNotBattle_VALUE = 403;
    /**
     * <pre>
     *当前关卡闯关顺序错误
     * </pre>
     *
     * <code>RCE_MainLine_FightOrderError = 404;</code>
     */
    public static final int RCE_MainLine_FightOrderError_VALUE = 404;
    /**
     * <pre>
     *当前节点不可达
     * </pre>
     *
     * <code>RCE_MainLine_NodeCanNotReach = 405;</code>
     */
    public static final int RCE_MainLine_NodeCanNotReach_VALUE = 405;
    /**
     * <pre>
     *请求关卡与当前关卡不匹配
     * </pre>
     *
     * <code>RCE_MainLine_CurLvMissMatch = 406;</code>
     */
    public static final int RCE_MainLine_CurLvMissMatch_VALUE = 406;
    /**
     * <pre>
     *节点类型不能进行战斗
     * </pre>
     *
     * <code>RCE_MainLine_NodeTypeCanNotBattle = 407;</code>
     */
    public static final int RCE_MainLine_NodeTypeCanNotBattle_VALUE = 407;
    /**
     * <pre>
     *当前节点已经打过了
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeIsPassed = 408;</code>
     */
    public static final int RCE_MainLine_CurNodeIsPassed_VALUE = 408;
    /**
     * <pre>
     *玩家没有正在挂机的关卡
     * </pre>
     *
     * <code>RCE_MainLine_PlayerHaveNoOnhook = 409;</code>
     */
    public static final int RCE_MainLine_PlayerHaveNoOnhook_VALUE = 409;
    /**
     * <pre>
     *节点配置为空
     * </pre>
     *
     * <code>RCE_MainLine_NodeCfgIsNull = 410;</code>
     */
    public static final int RCE_MainLine_NodeCfgIsNull_VALUE = 410;
    /**
     * <pre>
     *当前节点未解锁
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeIsLock = 411;</code>
     */
    public static final int RCE_MainLine_CurNodeIsLock_VALUE = 411;
    /**
     * <pre>
     *当前节点还不能战斗
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeCanNotBattle = 412;</code>
     */
    public static final int RCE_MainLine_CurNodeCanNotBattle_VALUE = 412;
    /**
     * <pre>
     *当前关卡的密码还未输入完毕
     * </pre>
     *
     * <code>RCE_MainLine_PswNotInputFinish = 413;</code>
     */
    public static final int RCE_MainLine_PswNotInputFinish_VALUE = 413;
    /**
     * <pre>
     *关卡类型不匹配
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointTypeMissMatch = 414;</code>
     */
    public static final int RCE_MainLine_CheckPointTypeMissMatch_VALUE = 414;
    /**
     * <pre>
     *密码长度不匹配
     * </pre>
     *
     * <code>RCE_MainLine_PswLengthError = 415;</code>
     */
    public static final int RCE_MainLine_PswLengthError_VALUE = 415;
    /**
     * <pre>
     *输入非密码型关卡
     * </pre>
     *
     * <code>RCE_MainLine_InputNotPswNode = 416;</code>
     */
    public static final int RCE_MainLine_InputNotPswNode_VALUE = 416;
    /**
     * <pre>
     *重复输入相同密码
     * </pre>
     *
     * <code>RCE_MainLine_InputTheSamePsw = 417;</code>
     */
    public static final int RCE_MainLine_InputTheSamePsw_VALUE = 417;
    /**
     * <pre>
     *快速挂机次数当日已达上限
     * </pre>
     *
     * <code>RCE_MainLine_QuickOnHookLimit = 418;</code>
     */
    public static final int RCE_MainLine_QuickOnHookLimit_VALUE = 418;
    /**
     * <pre>
     *===================巡逻队start   预留451 - 470===================
     * 当前位置不正确
     * </pre>
     *
     * <code>RCE_Patorl_ErrorLocation = 451;</code>
     */
    public static final int RCE_Patorl_ErrorLocation_VALUE = 451;
    /**
     * <pre>
     * 当前位置已被探索
     * </pre>
     *
     * <code>RCE_Patorl_Explored = 452;</code>
     */
    public static final int RCE_Patorl_Explored_VALUE = 452;
    /**
     * <pre>
     * 当前位置还未被探索
     * </pre>
     *
     * <code>RCE_Patrol_NotExplored = 453;</code>
     */
    public static final int RCE_Patrol_NotExplored_VALUE = 453;
    /**
     * <pre>
     * 探索事件不匹配
     * </pre>
     *
     * <code>RCE_Patorl_EventFail = 454;</code>
     */
    public static final int RCE_Patorl_EventFail_VALUE = 454;
    /**
     * <pre>
     * 当前已失败
     * </pre>
     *
     * <code>RCE_Patrol_FailureError = 455;</code>
     */
    public static final int RCE_Patrol_FailureError_VALUE = 455;
    /**
     * <pre>
     * 今日失败次数已达最大
     * </pre>
     *
     * <code>RCE_Patrol_DailyMaxFailure = 456;</code>
     */
    public static final int RCE_Patrol_DailyMaxFailure_VALUE = 456;
    /**
     * <pre>
     *商品Id不存在
     * </pre>
     *
     * <code>RCE_BlackMarket_GoodsIdNotExist = 471;</code>
     */
    public static final int RCE_BlackMarket_GoodsIdNotExist_VALUE = 471;
    /**
     * <pre>
     *商品购买次数上限
     * </pre>
     *
     * <code>RCE_BlackMarket_GoodsBuyUpperLimit = 472;</code>
     */
    public static final int RCE_BlackMarket_GoodsBuyUpperLimit_VALUE = 472;
    /**
     * <pre>
     *刷新次数上限
     * </pre>
     *
     * <code>RCE_BlackMarket_RefreshTimesLimit = 473;</code>
     */
    public static final int RCE_BlackMarket_RefreshTimesLimit_VALUE = 473;
    /**
     * <pre>
     *===================目标系统start 预留491 - 510===================
     * </pre>
     *
     * <code>RCE_Target_MissionUnfinished = 491;</code>
     */
    public static final int RCE_Target_MissionUnfinished_VALUE = 491;
    /**
     * <pre>
     *任务奖励已经领取
     * </pre>
     *
     * <code>RCE_Target_MissionAlreadyClaim = 492;</code>
     */
    public static final int RCE_Target_MissionAlreadyClaim_VALUE = 492;
    /**
     * <pre>
     *任务配置Id不存在
     * </pre>
     *
     * <code>RCE_Target_MissionCfgIdNotExist = 493;</code>
     */
    public static final int RCE_Target_MissionCfgIdNotExist_VALUE = 493;
    /**
     * <pre>
     *===================勇气试炼start   预留511 - 530===================
     * </pre>
     *
     * <code>RCE_BraveChallenge_ChoosenDifficulty = 511;</code>
     */
    public static final int RCE_BraveChallenge_ChoosenDifficulty_VALUE = 511;
    /**
     * <pre>
     * 游戏已经结束
     * </pre>
     *
     * <code>RCE_BraveChallenge_AlreadyFinish = 512;</code>
     */
    public static final int RCE_BraveChallenge_AlreadyFinish_VALUE = 512;
    /**
     * <pre>
     *===================矿区争夺start   预留531 - 560===================
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundMineSvr = 531;</code>
     */
    public static final int RCE_MineFight_NotFoundMineSvr_VALUE = 531;
    /**
     * <pre>
     * 未找到战斗服
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundBattleSrv = 532;</code>
     */
    public static final int RCE_MineFight_NotFoundBattleSrv_VALUE = 532;
    /**
     * <pre>
     * 未找到矿
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundMine = 533;</code>
     */
    public static final int RCE_MineFight_NotFoundMine_VALUE = 533;
    /**
     * <pre>
     * 开采劵不足
     * </pre>
     *
     * <code>RCE_MineFight_NotEnoughtExploitScroll = 534;</code>
     */
    public static final int RCE_MineFight_NotEnoughtExploitScroll_VALUE = 534;
    /**
     * <pre>
     * 小队掠夺中
     * </pre>
     *
     * <code>RCE_MineFight_PetFormPlundering = 535;</code>
     */
    public static final int RCE_MineFight_PetFormPlundering_VALUE = 535;
    /**
     * <pre>
     * 小队开采中
     * </pre>
     *
     * <code>RCE_MineFight_PetFormExploiting = 536;</code>
     */
    public static final int RCE_MineFight_PetFormExploiting_VALUE = 536;
    /**
     * <pre>
     * 小队奖励未领取
     * </pre>
     *
     * <code>RCE_MineFight_NotClaimPetFormReward = 537;</code>
     */
    public static final int RCE_MineFight_NotClaimPetFormReward_VALUE = 537;
    /**
     * <pre>
     * 矿正在被掠夺
     * </pre>
     *
     * <code>RCE_MineFight_MineIsBattling = 538;</code>
     */
    public static final int RCE_MineFight_MineIsBattling_VALUE = 538;
    /**
     * <pre>
     * 小队宠物为空
     * </pre>
     *
     * <code>RCE_MineFight_EmptyPetForm = 539;</code>
     */
    public static final int RCE_MineFight_EmptyPetForm_VALUE = 539;
    /**
     * <pre>
     * 敌方已放弃掠夺
     * </pre>
     *
     * <code>RCE_MineFight_EnemyGiveUp = 540;</code>
     */
    public static final int RCE_MineFight_EnemyGiveUp_VALUE = 540;
    /**
     * <pre>
     * 正在进行其他战斗
     * </pre>
     *
     * <code>RCE_MineFight_PlayerBattling = 541;</code>
     */
    public static final int RCE_MineFight_PlayerBattling_VALUE = 541;
    /**
     * <pre>
     * 未进入矿区
     * </pre>
     *
     * <code>RCE_MineFight_NotInMineFight = 542;</code>
     */
    public static final int RCE_MineFight_NotInMineFight_VALUE = 542;
    /**
     * <pre>
     * 选择奖励类型错误
     * </pre>
     *
     * <code>RCE_MineFight_ChooseRewardErrorIndex = 543;</code>
     */
    public static final int RCE_MineFight_ChooseRewardErrorIndex_VALUE = 543;
    /**
     * <pre>
     * 该矿未占领
     * </pre>
     *
     * <code>RCE_MineFight_NotOccupiedMine = 544;</code>
     */
    public static final int RCE_MineFight_NotOccupiedMine_VALUE = 544;
    /**
     * <pre>
     * 矿状态错误
     * </pre>
     *
     * <code>RCE_MineFight_ErrorMineState = 545;</code>
     */
    public static final int RCE_MineFight_ErrorMineState_VALUE = 545;
    /**
     * <pre>
     * 奖励已被领取
     * </pre>
     *
     * <code>RCE_MineFight_ClaimedReward = 546;</code>
     */
    public static final int RCE_MineFight_ClaimedReward_VALUE = 546;
    /**
     * <pre>
     * 未达到等级要求
     * </pre>
     *
     * <code>RCE_MineFight_LevelLimit = 547;</code>
     */
    public static final int RCE_MineFight_LevelLimit_VALUE = 547;
    /**
     * <pre>
     * 开采劵配置错误
     * </pre>
     *
     * <code>RCE_MineFight_ScrollPriceError = 548;</code>
     */
    public static final int RCE_MineFight_ScrollPriceError_VALUE = 548;
    /**
     * <pre>
     * 已经有好友助阵
     * </pre>
     *
     * <code>RCE_MineFight_FriendHelping = 549;</code>
     */
    public static final int RCE_MineFight_FriendHelping_VALUE = 549;
    /**
     * <pre>
     * 好友未设置助阵阵容
     * </pre>
     *
     * <code>RCE_MineFight_EmptyFriendPetForm = 550;</code>
     */
    public static final int RCE_MineFight_EmptyFriendPetForm_VALUE = 550;
    /**
     * <pre>
     * 好友正在帮助其他玩家
     * </pre>
     *
     * <code>RCE_MineFight_FriendPetFormLocked = 551;</code>
     */
    public static final int RCE_MineFight_FriendPetFormLocked_VALUE = 551;
    /**
     * <pre>
     * 好友拒绝帮助
     * </pre>
     *
     * <code>RCE_MineFight_FriendRefused = 552;</code>
     */
    public static final int RCE_MineFight_FriendRefused_VALUE = 552;
    /**
     * <pre>
     * 已经发送过申请了
     * </pre>
     *
     * <code>RCE_MineFight_AppliedFriendHelp = 553;</code>
     */
    public static final int RCE_MineFight_AppliedFriendHelp_VALUE = 553;
    /**
     * <pre>
     * 未找到小队信息
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundPetForm = 554;</code>
     */
    public static final int RCE_MineFight_NotFoundPetForm_VALUE = 554;
    /**
     * <pre>
     * 战斗中无法退出
     * </pre>
     *
     * <code>RCE_MineFight_ExitFailedForBattling = 555;</code>
     */
    public static final int RCE_MineFight_ExitFailedForBattling_VALUE = 555;
    /**
     * <pre>
     * 奖励对象已过期
     * </pre>
     *
     * <code>RCE_MineFight_BeyondGiftExpire = 556;</code>
     */
    public static final int RCE_MineFight_BeyondGiftExpire_VALUE = 556;
    /**
     * <pre>
     * 该好友正在帮助你，做人要厚道
     * </pre>
     *
     * <code>RCE_MineFight_FriendIsHelpingYou = 557;</code>
     */
    public static final int RCE_MineFight_FriendIsHelpingYou_VALUE = 557;
    /**
     * <pre>
     * 只能助阵一个好友
     * </pre>
     *
     * <code>RCE_MineFight_CanNotHelpMultiFriend = 558;</code>
     */
    public static final int RCE_MineFight_CanNotHelpMultiFriend_VALUE = 558;
    /**
     * <pre>
     * 不能掠夺正在助阵的好友
     * </pre>
     *
     * <code>RCE_MineFight_CannotOccupyHelpingFriend = 559;</code>
     */
    public static final int RCE_MineFight_CannotOccupyHelpingFriend_VALUE = 559;
    /**
     * <pre>
     *===================远古召唤start   预留561 - 580===================
     * </pre>
     *
     * <code>RCE_AncientCall_PetInTeam = 561;</code>
     */
    public static final int RCE_AncientCall_PetInTeam_VALUE = 561;
    /**
     * <pre>
     *不支持的宠物转化类型
     * </pre>
     *
     * <code>RCE_PetTransfer_UnsupportedTransferType = 562;</code>
     */
    public static final int RCE_PetTransfer_UnsupportedTransferType_VALUE = 562;
    /**
     * <pre>
     *当期没有宠物可以转化
     * </pre>
     *
     * <code>RCE_PetTramsfer_HavaNoPetInTrsnsfer = 563;</code>
     */
    public static final int RCE_PetTramsfer_HavaNoPetInTrsnsfer_VALUE = 563;
    /**
     * <pre>
     *===================资源副本  start 预留581 - 600===================
     * </pre>
     *
     * <code>RCE_ResCopy_ChallengeTimesLimit = 581;</code>
     */
    public static final int RCE_ResCopy_ChallengeTimesLimit_VALUE = 581;
    /**
     * <pre>
     *购买次数上限
     * </pre>
     *
     * <code>RCE_ResCopy_BuyTimesLimit = 582;</code>
     */
    public static final int RCE_ResCopy_BuyTimesLimit_VALUE = 582;
    /**
     * <pre>
     *挑战次数上限
     * </pre>
     *
     * <code>RCE_ResCopy_FightIsLimit = 583;</code>
     */
    public static final int RCE_ResCopy_FightIsLimit_VALUE = 583;
    /**
     * <pre>
     *关卡不能挑战
     * </pre>
     *
     * <code>RCE_ResCopy_IndexCanNotFight = 584;</code>
     */
    public static final int RCE_ResCopy_IndexCanNotFight_VALUE = 584;
    /**
     * <pre>
     *活动未开启
     * </pre>
     *
     * <code>RCE_Activity_NotOpen = 601;</code>
     */
    public static final int RCE_Activity_NotOpen_VALUE = 601;
    /**
     * <pre>
     *活动货币不足
     * </pre>
     *
     * <code>RCE_Activity_CurrencyNotEnough = 602;</code>
     */
    public static final int RCE_Activity_CurrencyNotEnough_VALUE = 602;
    /**
     * <pre>
     *活动已经超过时间
     * </pre>
     *
     * <code>RCE_Activity_MissionOutOfTime = 603;</code>
     */
    public static final int RCE_Activity_MissionOutOfTime_VALUE = 603;
    /**
     * <pre>
     *当前不能领取奖励
     * </pre>
     *
     * <code>RCE_Activity_MissionCanNotClaim = 604;</code>
     */
    public static final int RCE_Activity_MissionCanNotClaim_VALUE = 604;
    /**
     * <pre>
     *奖励已领取
     * </pre>
     *
     * <code>RCE_Activity_RewardAlreadyClaim = 605;</code>
     */
    public static final int RCE_Activity_RewardAlreadyClaim_VALUE = 605;
    /**
     * <pre>
     *重复签到 
     * </pre>
     *
     * <code>RCE_Activity_RepeatedSignIn = 606;</code>
     */
    public static final int RCE_Activity_RepeatedSignIn_VALUE = 606;
    /**
     * <pre>
     *兑换已达上限
     * </pre>
     *
     * <code>RCE_Activity_ExTimesLimit = 607;</code>
     */
    public static final int RCE_Activity_ExTimesLimit_VALUE = 607;
    /**
     * <pre>
     *不满足兑换条件
     * </pre>
     *
     * <code>RCE_Activity_DissatisfyAddition = 608;</code>
     */
    public static final int RCE_Activity_DissatisfyAddition_VALUE = 608;
    /**
     * <pre>
     *当前任务已过期
     * </pre>
     *
     * <code>RCE_Activity_MissionIsExpire = 609;</code>
     */
    public static final int RCE_Activity_MissionIsExpire_VALUE = 609;
    /**
     * <pre>
     * 符文已锁定
     * </pre>
     *
     * <code>RCE_Pet_PetRuneLock = 651;</code>
     */
    public static final int RCE_Pet_PetRuneLock_VALUE = 651;
    /**
     * <pre>
     *================== 激活码 start  700 - 750========================
     * </pre>
     *
     * <code>RCE_ActiveCode_LoseEfficacy = 701;</code>
     */
    public static final int RCE_ActiveCode_LoseEfficacy_VALUE = 701;
    /**
     * <pre>
     *激活码已被使用
     * </pre>
     *
     * <code>RCE_ActiveCode_Used = 702;</code>
     */
    public static final int RCE_ActiveCode_Used_VALUE = 702;
    /**
     * <pre>
     *激活码错误
     * </pre>
     *
     * <code>RCE_ActiveCode_Error = 703;</code>
     */
    public static final int RCE_ActiveCode_Error_VALUE = 703;
    /**
     * <pre>
     *激活码使用次数上限
     * </pre>
     *
     * <code>RCE_ActiveCode_UpperLimit = 704;</code>
     */
    public static final int RCE_ActiveCode_UpperLimit_VALUE = 704;
    /**
     * <pre>
     *使用过同类型的激活码
     * </pre>
     *
     * <code>RCE_ActiveCode_UseSameTypeCode = 705;</code>
     */
    public static final int RCE_ActiveCode_UseSameTypeCode_VALUE = 705;
    /**
     * <pre>
     *================== 新手引导 start  751 - 800==========================
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedName = 751;</code>
     */
    public static final int RCE_NewBee_RepeatedName_VALUE = 751;
    /**
     * <pre>
     *新手引导领取宠物
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedChoicePet = 752;</code>
     */
    public static final int RCE_NewBee_RepeatedChoicePet_VALUE = 752;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RetCodeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static RetCodeEnum forNumber(int value) {
      switch (value) {
        case 0: return RCE_Null;
        case 1: return RCE_Success;
        case 2: return RCE_Failure;
        case 3: return RCE_UnknownError;
        case 4: return RCE_PlayerOffline;
        case 5: return RCE_ErrorParam;
        case 6: return RCE_FunctionIsLock;
        case 7: return RCE_ShopTypeMissMatch;
        case 8: return RCE_MatieralNotEnough;
        case 9: return RCE_LvNotEnough;
        case 10: return RCE_Login_ErrorPwd;
        case 11: return RCE_Login_FullPlayer;
        case 12: return RCE_Login_ServerNotOpen;
        case 13: return RSE_ConfigNotExist;
        case 14: return RSE_VipGiftClaimed;
        case 20: return RCE_CreateRole_DuplicateName;
        case 21: return RCE_CreateRole_InvalidName;
        case 22: return RCE_CreateRole_ErrorOrder;
        case 30: return RCE_KickOut_Null;
        case 31: return RCE_KickOut_RepeatLogin;
        case 32: return RCE_KickOut_ServerClose;
        case 33: return RCE_KickOut_AntiLimit;
        case 34: return RCE_KickOut_Banned;
        case 41: return RCE_Mail_UnExist;
        case 42: return RCE_Mail_NoAttachment;
        case 43: return RCE_Mail_UnEnoughtCapacity;
        case 44: return RCE_Mail_AlreadyCliamed;
        case 45: return RCE_Mail_AttachmentNoClaim;
        case 46: return RCE_Mail_UnRead;
        case 47: return RCE_PrepareWar_TargetPositionHasPet;
        case 48: return RCE_PrepareWar_PetIsInPetTransfer;
        case 49: return RCE_PrepareWar_TeamStatusIslock;
        case 50: return RCE_PrepareWar_PetIsDead;
        case 51: return RCE_PrepareWar_PetNoExist;
        case 52: return RCE_PrepareWar_LvNotEought;
        case 53: return RCE_PrepareWar_IllegalTeamName;
        case 54: return RCE_PrepareWar_CanNotBuyMore;
        case 56: return RCE_PrepareWar_DiamondNotEnought;
        case 57: return RCE_PrepareWar_PositionIsLock;
        case 58: return RCE_PrepareWar_TeamIslock;
        case 59: return RCE_PrepareWar_SkillNotExist;
        case 60: return RCE_PrepareWar_RepeatedSetSamePet;
        case 61: return RCE_Itembag_ItemNotExist;
        case 62: return RCE_Itembag_ItemNotEnought;
        case 63: return RCE_Itembag_ItemCanNotUsed;
        case 64: return RCE_ItemBag_ItemCanNotSell;
        case 65: return RCE_ItemBag_MistBoxLimit;
        case 71: return RCE_Player_NotOwnedAvatar;
        case 72: return RCE_Player_GoldNotEnought;
        case 73: return RCE_Player_DiamondNotEnought;
        case 74: return RCE_Player_CurrencysNotEnought;
        case 75: return RCE_Player_DisplayPetNotExist;
        case 76: return RCE_Player_QueryPlayerNotExist;
        case 81: return RCE_EndlessSpire_ThisLvCanNotPlay;
        case 82: return RCE_EndlessSpire_PlayerStatusBusy;
        case 83: return RCE_EndlessSpire_ThisLvCanNotSettle;
        case 91: return RCE_Battle_UsedTeamNotHavePet;
        case 92: return RCE_Battle_UsedTeamPetDataIsNull;
        case 93: return RCE_Battle_RepeatedEnterBattle;
        case 100: return RCE_AlterName_NotFoundPlayer;
        case 101: return RCE_AlterName_EvilPlayer;
        case 102: return RCE_AlterName_DuringRenameCD;
        case 103: return RCE_AlterName_IllegalName;
        case 110: return RCE_AlterName_IllegalWords;
        case 111: return RCE_AlterName_TooLong;
        case 112: return RCE_AlterName_Duplicate;
        case 113: return RCE_AlterName_Empty;
        case 200: return RCE_MistForest_CreateRoomFail;
        case 260: return RCE_MistForest_ServerNotLogin;
        case 301: return RCE_ForInv_StatusMismatching;
        case 302: return RCE_ForInv_MonsterIdxNotExist;
        case 303: return RCE_ForInv_BossCloneNotExist;
        case 304: return RCE_ForInv_ClaimCountLimit;
        case 305: return RCE_ForInv_RemoveMonsterFailed;
        case 306: return RCR_ForInv_CreateMonsterFailed;
        case 321: return RCE_Friend_FriendUpperLimit;
        case 322: return RCE_Friend_TargetPlayerNotExist;
        case 323: return RCE_Friend_TargetApplyUpperLimit;
        case 324: return RCE_Friend_TargetFriendUpperLimit;
        case 325: return RCE_Friend_TargetIsNotFriend;
        case 326: return RCE_Friend_CanNotFindSelf;
        case 327: return RCE_Friend_RepeatedSendToSameTarget;
        case 328: return RCE_Friend_NotRecvPointFromThis;
        case 329: return RCE_Friend_RepeatedClaim;
        case 341: return RCE_DrawCard_FriednshipPointNotEnought;
        case 342: return RCE_DrawCard_LowBookNotEnought;
        case 343: return RCE_DrawCard_HighBookNotEnought;
        case 344: return RCE_DrawCard_HighDrawCountUpperLimit;
        case 361: return RCE_GoldEx_ExUpperLimit;
        case 381: return RCE_Pet_UpLvlFailure;
        case 382: return RCE_Pet_PetNotExist;
        case 383: return RCE_Pet_RuneNotExist;
        case 384: return RCE_Pet_MissionAlreadyFinished;
        case 385: return RCE_Pet_MissionMaxError;
        case 386: return RCE_Pet_MissionNotFound;
        case 387: return RCE_Pet_MissionPetNotCorrect;
        case 388: return RCE_Pet_FragmentNotEnough;
        case 389: return RCE_Pet_FragmentNotFound;
        case 390: return RCE_Pet_PetStatusLock;
        case 391: return RCE_Pet_PetStatusMissionLock;
        case 392: return RCE_Pet_PetStatusMineLock;
        case 393: return RCE_Pet_PetStatusTeamLock;
        case 394: return RCE_Pet_PetStatusChangeLock;
        case 395: return RCE_Pet_PetColleciontRewardError;
        case 396: return RCE_Pet_PetLvlMaxErroe;
        case 397: return RCE_Pet_PetRuneAlreadyEquiped;
        case 398: return RCE_Pet_PetBagNotEnough;
        case 399: return RCE_Pet_RuneBagNotEnough;
        case 401: return RCE_MainLine_CheckPointCfgIsNull;
        case 402: return RCE_MainLine_CheckPointIsLock;
        case 403: return RCE_MainLine_CheckPointCanNotBattle;
        case 404: return RCE_MainLine_FightOrderError;
        case 405: return RCE_MainLine_NodeCanNotReach;
        case 406: return RCE_MainLine_CurLvMissMatch;
        case 407: return RCE_MainLine_NodeTypeCanNotBattle;
        case 408: return RCE_MainLine_CurNodeIsPassed;
        case 409: return RCE_MainLine_PlayerHaveNoOnhook;
        case 410: return RCE_MainLine_NodeCfgIsNull;
        case 411: return RCE_MainLine_CurNodeIsLock;
        case 412: return RCE_MainLine_CurNodeCanNotBattle;
        case 413: return RCE_MainLine_PswNotInputFinish;
        case 414: return RCE_MainLine_CheckPointTypeMissMatch;
        case 415: return RCE_MainLine_PswLengthError;
        case 416: return RCE_MainLine_InputNotPswNode;
        case 417: return RCE_MainLine_InputTheSamePsw;
        case 418: return RCE_MainLine_QuickOnHookLimit;
        case 451: return RCE_Patorl_ErrorLocation;
        case 452: return RCE_Patorl_Explored;
        case 453: return RCE_Patrol_NotExplored;
        case 454: return RCE_Patorl_EventFail;
        case 455: return RCE_Patrol_FailureError;
        case 456: return RCE_Patrol_DailyMaxFailure;
        case 471: return RCE_BlackMarket_GoodsIdNotExist;
        case 472: return RCE_BlackMarket_GoodsBuyUpperLimit;
        case 473: return RCE_BlackMarket_RefreshTimesLimit;
        case 491: return RCE_Target_MissionUnfinished;
        case 492: return RCE_Target_MissionAlreadyClaim;
        case 493: return RCE_Target_MissionCfgIdNotExist;
        case 511: return RCE_BraveChallenge_ChoosenDifficulty;
        case 512: return RCE_BraveChallenge_AlreadyFinish;
        case 531: return RCE_MineFight_NotFoundMineSvr;
        case 532: return RCE_MineFight_NotFoundBattleSrv;
        case 533: return RCE_MineFight_NotFoundMine;
        case 534: return RCE_MineFight_NotEnoughtExploitScroll;
        case 535: return RCE_MineFight_PetFormPlundering;
        case 536: return RCE_MineFight_PetFormExploiting;
        case 537: return RCE_MineFight_NotClaimPetFormReward;
        case 538: return RCE_MineFight_MineIsBattling;
        case 539: return RCE_MineFight_EmptyPetForm;
        case 540: return RCE_MineFight_EnemyGiveUp;
        case 541: return RCE_MineFight_PlayerBattling;
        case 542: return RCE_MineFight_NotInMineFight;
        case 543: return RCE_MineFight_ChooseRewardErrorIndex;
        case 544: return RCE_MineFight_NotOccupiedMine;
        case 545: return RCE_MineFight_ErrorMineState;
        case 546: return RCE_MineFight_ClaimedReward;
        case 547: return RCE_MineFight_LevelLimit;
        case 548: return RCE_MineFight_ScrollPriceError;
        case 549: return RCE_MineFight_FriendHelping;
        case 550: return RCE_MineFight_EmptyFriendPetForm;
        case 551: return RCE_MineFight_FriendPetFormLocked;
        case 552: return RCE_MineFight_FriendRefused;
        case 553: return RCE_MineFight_AppliedFriendHelp;
        case 554: return RCE_MineFight_NotFoundPetForm;
        case 555: return RCE_MineFight_ExitFailedForBattling;
        case 556: return RCE_MineFight_BeyondGiftExpire;
        case 557: return RCE_MineFight_FriendIsHelpingYou;
        case 558: return RCE_MineFight_CanNotHelpMultiFriend;
        case 559: return RCE_MineFight_CannotOccupyHelpingFriend;
        case 561: return RCE_AncientCall_PetInTeam;
        case 562: return RCE_PetTransfer_UnsupportedTransferType;
        case 563: return RCE_PetTramsfer_HavaNoPetInTrsnsfer;
        case 581: return RCE_ResCopy_ChallengeTimesLimit;
        case 582: return RCE_ResCopy_BuyTimesLimit;
        case 583: return RCE_ResCopy_FightIsLimit;
        case 584: return RCE_ResCopy_IndexCanNotFight;
        case 601: return RCE_Activity_NotOpen;
        case 602: return RCE_Activity_CurrencyNotEnough;
        case 603: return RCE_Activity_MissionOutOfTime;
        case 604: return RCE_Activity_MissionCanNotClaim;
        case 605: return RCE_Activity_RewardAlreadyClaim;
        case 606: return RCE_Activity_RepeatedSignIn;
        case 607: return RCE_Activity_ExTimesLimit;
        case 608: return RCE_Activity_DissatisfyAddition;
        case 609: return RCE_Activity_MissionIsExpire;
        case 651: return RCE_Pet_PetRuneLock;
        case 701: return RCE_ActiveCode_LoseEfficacy;
        case 702: return RCE_ActiveCode_Used;
        case 703: return RCE_ActiveCode_Error;
        case 704: return RCE_ActiveCode_UpperLimit;
        case 705: return RCE_ActiveCode_UseSameTypeCode;
        case 751: return RCE_NewBee_RepeatedName;
        case 752: return RCE_NewBee_RepeatedChoicePet;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RetCodeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RetCodeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RetCodeEnum>() {
            public RetCodeEnum findValueByNumber(int number) {
              return RetCodeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return protocol.RetCodeId.getDescriptor().getEnumTypes().get(0);
    }

    private static final RetCodeEnum[] VALUES = values();

    public static RetCodeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RetCodeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:RetCodeEnum)
  }

  public interface RetCodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RetCode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.RetCodeEnum retCode = 1;</code>
     */
    int getRetCodeValue();
    /**
     * <code>.RetCodeEnum retCode = 1;</code>
     */
    protocol.RetCodeId.RetCodeEnum getRetCode();

    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    java.util.List<protocol.RetCodeId.ParamInfo> 
        getParamsList();
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    protocol.RetCodeId.ParamInfo getParams(int index);
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    int getParamsCount();
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    java.util.List<? extends protocol.RetCodeId.ParamInfoOrBuilder> 
        getParamsOrBuilderList();
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    protocol.RetCodeId.ParamInfoOrBuilder getParamsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code RetCode}
   */
  public  static final class RetCode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:RetCode)
      RetCodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RetCode.newBuilder() to construct.
    private RetCode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RetCode() {
      retCode_ = 0;
      params_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RetCode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              retCode_ = rawValue;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                params_ = new java.util.ArrayList<protocol.RetCodeId.ParamInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              params_.add(
                  input.readMessage(protocol.RetCodeId.ParamInfo.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          params_ = java.util.Collections.unmodifiableList(params_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.RetCodeId.internal_static_RetCode_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.RetCodeId.internal_static_RetCode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.RetCodeId.RetCode.class, protocol.RetCodeId.RetCode.Builder.class);
    }

    private int bitField0_;
    public static final int RETCODE_FIELD_NUMBER = 1;
    private int retCode_;
    /**
     * <code>.RetCodeEnum retCode = 1;</code>
     */
    public int getRetCodeValue() {
      return retCode_;
    }
    /**
     * <code>.RetCodeEnum retCode = 1;</code>
     */
    public protocol.RetCodeId.RetCodeEnum getRetCode() {
      protocol.RetCodeId.RetCodeEnum result = protocol.RetCodeId.RetCodeEnum.valueOf(retCode_);
      return result == null ? protocol.RetCodeId.RetCodeEnum.UNRECOGNIZED : result;
    }

    public static final int PARAMS_FIELD_NUMBER = 2;
    private java.util.List<protocol.RetCodeId.ParamInfo> params_;
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public java.util.List<protocol.RetCodeId.ParamInfo> getParamsList() {
      return params_;
    }
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public java.util.List<? extends protocol.RetCodeId.ParamInfoOrBuilder> 
        getParamsOrBuilderList() {
      return params_;
    }
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public int getParamsCount() {
      return params_.size();
    }
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public protocol.RetCodeId.ParamInfo getParams(int index) {
      return params_.get(index);
    }
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public protocol.RetCodeId.ParamInfoOrBuilder getParamsOrBuilder(
        int index) {
      return params_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (retCode_ != protocol.RetCodeId.RetCodeEnum.RCE_Null.getNumber()) {
        output.writeEnum(1, retCode_);
      }
      for (int i = 0; i < params_.size(); i++) {
        output.writeMessage(2, params_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (retCode_ != protocol.RetCodeId.RetCodeEnum.RCE_Null.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, retCode_);
      }
      for (int i = 0; i < params_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, params_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocol.RetCodeId.RetCode)) {
        return super.equals(obj);
      }
      protocol.RetCodeId.RetCode other = (protocol.RetCodeId.RetCode) obj;

      boolean result = true;
      result = result && retCode_ == other.retCode_;
      result = result && getParamsList()
          .equals(other.getParamsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RETCODE_FIELD_NUMBER;
      hash = (53 * hash) + retCode_;
      if (getParamsCount() > 0) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getParamsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocol.RetCodeId.RetCode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.RetCode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocol.RetCodeId.RetCode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RetCode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RetCode)
        protocol.RetCodeId.RetCodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocol.RetCodeId.internal_static_RetCode_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocol.RetCodeId.internal_static_RetCode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocol.RetCodeId.RetCode.class, protocol.RetCodeId.RetCode.Builder.class);
      }

      // Construct using protocol.RetCodeId.RetCode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        retCode_ = 0;

        if (paramsBuilder_ == null) {
          params_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          paramsBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocol.RetCodeId.internal_static_RetCode_descriptor;
      }

      public protocol.RetCodeId.RetCode getDefaultInstanceForType() {
        return protocol.RetCodeId.RetCode.getDefaultInstance();
      }

      public protocol.RetCodeId.RetCode build() {
        protocol.RetCodeId.RetCode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocol.RetCodeId.RetCode buildPartial() {
        protocol.RetCodeId.RetCode result = new protocol.RetCodeId.RetCode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.retCode_ = retCode_;
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            params_ = java.util.Collections.unmodifiableList(params_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocol.RetCodeId.RetCode) {
          return mergeFrom((protocol.RetCodeId.RetCode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocol.RetCodeId.RetCode other) {
        if (other == protocol.RetCodeId.RetCode.getDefaultInstance()) return this;
        if (other.retCode_ != 0) {
          setRetCodeValue(other.getRetCodeValue());
        }
        if (paramsBuilder_ == null) {
          if (!other.params_.isEmpty()) {
            if (params_.isEmpty()) {
              params_ = other.params_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureParamsIsMutable();
              params_.addAll(other.params_);
            }
            onChanged();
          }
        } else {
          if (!other.params_.isEmpty()) {
            if (paramsBuilder_.isEmpty()) {
              paramsBuilder_.dispose();
              paramsBuilder_ = null;
              params_ = other.params_;
              bitField0_ = (bitField0_ & ~0x00000002);
              paramsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getParamsFieldBuilder() : null;
            } else {
              paramsBuilder_.addAllMessages(other.params_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocol.RetCodeId.RetCode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocol.RetCodeId.RetCode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int retCode_ = 0;
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public int getRetCodeValue() {
        return retCode_;
      }
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public Builder setRetCodeValue(int value) {
        retCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public protocol.RetCodeId.RetCodeEnum getRetCode() {
        protocol.RetCodeId.RetCodeEnum result = protocol.RetCodeId.RetCodeEnum.valueOf(retCode_);
        return result == null ? protocol.RetCodeId.RetCodeEnum.UNRECOGNIZED : result;
      }
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public Builder setRetCode(protocol.RetCodeId.RetCodeEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        retCode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public Builder clearRetCode() {
        
        retCode_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<protocol.RetCodeId.ParamInfo> params_ =
        java.util.Collections.emptyList();
      private void ensureParamsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          params_ = new java.util.ArrayList<protocol.RetCodeId.ParamInfo>(params_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocol.RetCodeId.ParamInfo, protocol.RetCodeId.ParamInfo.Builder, protocol.RetCodeId.ParamInfoOrBuilder> paramsBuilder_;

      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public java.util.List<protocol.RetCodeId.ParamInfo> getParamsList() {
        if (paramsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(params_);
        } else {
          return paramsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public int getParamsCount() {
        if (paramsBuilder_ == null) {
          return params_.size();
        } else {
          return paramsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfo getParams(int index) {
        if (paramsBuilder_ == null) {
          return params_.get(index);
        } else {
          return paramsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder setParams(
          int index, protocol.RetCodeId.ParamInfo value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.set(index, value);
          onChanged();
        } else {
          paramsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder setParams(
          int index, protocol.RetCodeId.ParamInfo.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.set(index, builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addParams(protocol.RetCodeId.ParamInfo value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.add(value);
          onChanged();
        } else {
          paramsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addParams(
          int index, protocol.RetCodeId.ParamInfo value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.add(index, value);
          onChanged();
        } else {
          paramsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addParams(
          protocol.RetCodeId.ParamInfo.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.add(builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addParams(
          int index, protocol.RetCodeId.ParamInfo.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.add(index, builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addAllParams(
          java.lang.Iterable<? extends protocol.RetCodeId.ParamInfo> values) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, params_);
          onChanged();
        } else {
          paramsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder removeParams(int index) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.remove(index);
          onChanged();
        } else {
          paramsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfo.Builder getParamsBuilder(
          int index) {
        return getParamsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfoOrBuilder getParamsOrBuilder(
          int index) {
        if (paramsBuilder_ == null) {
          return params_.get(index);  } else {
          return paramsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public java.util.List<? extends protocol.RetCodeId.ParamInfoOrBuilder> 
           getParamsOrBuilderList() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(params_);
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfo.Builder addParamsBuilder() {
        return getParamsFieldBuilder().addBuilder(
            protocol.RetCodeId.ParamInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfo.Builder addParamsBuilder(
          int index) {
        return getParamsFieldBuilder().addBuilder(
            index, protocol.RetCodeId.ParamInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public java.util.List<protocol.RetCodeId.ParamInfo.Builder> 
           getParamsBuilderList() {
        return getParamsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocol.RetCodeId.ParamInfo, protocol.RetCodeId.ParamInfo.Builder, protocol.RetCodeId.ParamInfoOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              protocol.RetCodeId.ParamInfo, protocol.RetCodeId.ParamInfo.Builder, protocol.RetCodeId.ParamInfoOrBuilder>(
                  params_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:RetCode)
    }

    // @@protoc_insertion_point(class_scope:RetCode)
    private static final protocol.RetCodeId.RetCode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocol.RetCodeId.RetCode();
    }

    public static protocol.RetCodeId.RetCode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RetCode>
        PARSER = new com.google.protobuf.AbstractParser<RetCode>() {
      public RetCode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new RetCode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RetCode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RetCode> getParserForType() {
      return PARSER;
    }

    public protocol.RetCodeId.RetCode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ParamInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ParamInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 0为int32，1为string，2为int64
     * </pre>
     *
     * <code>int32 pramType = 1;</code>
     */
    int getPramType();

    /**
     * <code>string paramVal = 2;</code>
     */
    java.lang.String getParamVal();
    /**
     * <code>string paramVal = 2;</code>
     */
    com.google.protobuf.ByteString
        getParamValBytes();
  }
  /**
   * Protobuf type {@code ParamInfo}
   */
  public  static final class ParamInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ParamInfo)
      ParamInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ParamInfo.newBuilder() to construct.
    private ParamInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ParamInfo() {
      pramType_ = 0;
      paramVal_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ParamInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              pramType_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              paramVal_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.RetCodeId.internal_static_ParamInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.RetCodeId.internal_static_ParamInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.RetCodeId.ParamInfo.class, protocol.RetCodeId.ParamInfo.Builder.class);
    }

    public static final int PRAMTYPE_FIELD_NUMBER = 1;
    private int pramType_;
    /**
     * <pre>
     * 0为int32，1为string，2为int64
     * </pre>
     *
     * <code>int32 pramType = 1;</code>
     */
    public int getPramType() {
      return pramType_;
    }

    public static final int PARAMVAL_FIELD_NUMBER = 2;
    private volatile java.lang.Object paramVal_;
    /**
     * <code>string paramVal = 2;</code>
     */
    public java.lang.String getParamVal() {
      java.lang.Object ref = paramVal_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        paramVal_ = s;
        return s;
      }
    }
    /**
     * <code>string paramVal = 2;</code>
     */
    public com.google.protobuf.ByteString
        getParamValBytes() {
      java.lang.Object ref = paramVal_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        paramVal_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (pramType_ != 0) {
        output.writeInt32(1, pramType_);
      }
      if (!getParamValBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, paramVal_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (pramType_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, pramType_);
      }
      if (!getParamValBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, paramVal_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocol.RetCodeId.ParamInfo)) {
        return super.equals(obj);
      }
      protocol.RetCodeId.ParamInfo other = (protocol.RetCodeId.ParamInfo) obj;

      boolean result = true;
      result = result && (getPramType()
          == other.getPramType());
      result = result && getParamVal()
          .equals(other.getParamVal());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PRAMTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getPramType();
      hash = (37 * hash) + PARAMVAL_FIELD_NUMBER;
      hash = (53 * hash) + getParamVal().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocol.RetCodeId.ParamInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.ParamInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocol.RetCodeId.ParamInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ParamInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ParamInfo)
        protocol.RetCodeId.ParamInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocol.RetCodeId.internal_static_ParamInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocol.RetCodeId.internal_static_ParamInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocol.RetCodeId.ParamInfo.class, protocol.RetCodeId.ParamInfo.Builder.class);
      }

      // Construct using protocol.RetCodeId.ParamInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        pramType_ = 0;

        paramVal_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocol.RetCodeId.internal_static_ParamInfo_descriptor;
      }

      public protocol.RetCodeId.ParamInfo getDefaultInstanceForType() {
        return protocol.RetCodeId.ParamInfo.getDefaultInstance();
      }

      public protocol.RetCodeId.ParamInfo build() {
        protocol.RetCodeId.ParamInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocol.RetCodeId.ParamInfo buildPartial() {
        protocol.RetCodeId.ParamInfo result = new protocol.RetCodeId.ParamInfo(this);
        result.pramType_ = pramType_;
        result.paramVal_ = paramVal_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocol.RetCodeId.ParamInfo) {
          return mergeFrom((protocol.RetCodeId.ParamInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocol.RetCodeId.ParamInfo other) {
        if (other == protocol.RetCodeId.ParamInfo.getDefaultInstance()) return this;
        if (other.getPramType() != 0) {
          setPramType(other.getPramType());
        }
        if (!other.getParamVal().isEmpty()) {
          paramVal_ = other.paramVal_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocol.RetCodeId.ParamInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocol.RetCodeId.ParamInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int pramType_ ;
      /**
       * <pre>
       * 0为int32，1为string，2为int64
       * </pre>
       *
       * <code>int32 pramType = 1;</code>
       */
      public int getPramType() {
        return pramType_;
      }
      /**
       * <pre>
       * 0为int32，1为string，2为int64
       * </pre>
       *
       * <code>int32 pramType = 1;</code>
       */
      public Builder setPramType(int value) {
        
        pramType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 0为int32，1为string，2为int64
       * </pre>
       *
       * <code>int32 pramType = 1;</code>
       */
      public Builder clearPramType() {
        
        pramType_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object paramVal_ = "";
      /**
       * <code>string paramVal = 2;</code>
       */
      public java.lang.String getParamVal() {
        java.lang.Object ref = paramVal_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          paramVal_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string paramVal = 2;</code>
       */
      public com.google.protobuf.ByteString
          getParamValBytes() {
        java.lang.Object ref = paramVal_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          paramVal_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string paramVal = 2;</code>
       */
      public Builder setParamVal(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        paramVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string paramVal = 2;</code>
       */
      public Builder clearParamVal() {
        
        paramVal_ = getDefaultInstance().getParamVal();
        onChanged();
        return this;
      }
      /**
       * <code>string paramVal = 2;</code>
       */
      public Builder setParamValBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        paramVal_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ParamInfo)
    }

    // @@protoc_insertion_point(class_scope:ParamInfo)
    private static final protocol.RetCodeId.ParamInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocol.RetCodeId.ParamInfo();
    }

    public static protocol.RetCodeId.ParamInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ParamInfo>
        PARSER = new com.google.protobuf.AbstractParser<ParamInfo>() {
      public ParamInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ParamInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ParamInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ParamInfo> getParserForType() {
      return PARSER;
    }

    public protocol.RetCodeId.ParamInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RetCode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RetCode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ParamInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ParamInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017RetCodeId.proto\"D\n\007RetCode\022\035\n\007retCode\030" +
      "\001 \001(\0162\014.RetCodeEnum\022\032\n\006params\030\002 \003(\0132\n.Pa" +
      "ramInfo\"/\n\tParamInfo\022\020\n\010pramType\030\001 \001(\005\022\020" +
      "\n\010paramVal\030\002 \001(\t*\3232\n\013RetCodeEnum\022\014\n\010RCE_" +
      "Null\020\000\022\017\n\013RCE_Success\020\001\022\017\n\013RCE_Failure\020\002" +
      "\022\024\n\020RCE_UnknownError\020\003\022\025\n\021RCE_PlayerOffl" +
      "ine\020\004\022\022\n\016RCE_ErrorParam\020\005\022\026\n\022RCE_Functio" +
      "nIsLock\020\006\022\031\n\025RCE_ShopTypeMissMatch\020\007\022\031\n\025" +
      "RCE_MatieralNotEnough\020\010\022\023\n\017RCE_LvNotEnou" +
      "gh\020\t\022\026\n\022RCE_Login_ErrorPwd\020\n\022\030\n\024RCE_Logi",
      "n_FullPlayer\020\013\022\033\n\027RCE_Login_ServerNotOpe" +
      "n\020\014\022\026\n\022RSE_ConfigNotExist\020\r\022\026\n\022RSE_VipGi" +
      "ftClaimed\020\016\022 \n\034RCE_CreateRole_DuplicateN" +
      "ame\020\024\022\036\n\032RCE_CreateRole_InvalidName\020\025\022\035\n" +
      "\031RCE_CreateRole_ErrorOrder\020\026\022\024\n\020RCE_Kick" +
      "Out_Null\020\036\022\033\n\027RCE_KickOut_RepeatLogin\020\037\022" +
      "\033\n\027RCE_KickOut_ServerClose\020 \022\031\n\025RCE_Kick" +
      "Out_AntiLimit\020!\022\026\n\022RCE_KickOut_Banned\020\"\022" +
      "\024\n\020RCE_Mail_UnExist\020)\022\031\n\025RCE_Mail_NoAtta" +
      "chment\020*\022\036\n\032RCE_Mail_UnEnoughtCapacity\020+",
      "\022\033\n\027RCE_Mail_AlreadyCliamed\020,\022\036\n\032RCE_Mai" +
      "l_AttachmentNoClaim\020-\022\023\n\017RCE_Mail_UnRead" +
      "\020.\022\'\n#RCE_PrepareWar_TargetPositionHasPe" +
      "t\020/\022%\n!RCE_PrepareWar_PetIsInPetTransfer" +
      "\0200\022#\n\037RCE_PrepareWar_TeamStatusIslock\0201\022" +
      "\034\n\030RCE_PrepareWar_PetIsDead\0202\022\035\n\031RCE_Pre" +
      "pareWar_PetNoExist\0203\022\036\n\032RCE_PrepareWar_L" +
      "vNotEought\0204\022\"\n\036RCE_PrepareWar_IllegalTe" +
      "amName\0205\022 \n\034RCE_PrepareWar_CanNotBuyMore" +
      "\0206\022$\n RCE_PrepareWar_DiamondNotEnought\0208",
      "\022!\n\035RCE_PrepareWar_PositionIsLock\0209\022\035\n\031R" +
      "CE_PrepareWar_TeamIslock\020:\022 \n\034RCE_Prepar" +
      "eWar_SkillNotExist\020;\022%\n!RCE_PrepareWar_R" +
      "epeatedSetSamePet\020<\022\034\n\030RCE_Itembag_ItemN" +
      "otExist\020=\022\036\n\032RCE_Itembag_ItemNotEnought\020" +
      ">\022\036\n\032RCE_Itembag_ItemCanNotUsed\020?\022\036\n\032RCE" +
      "_ItemBag_ItemCanNotSell\020@\022\034\n\030RCE_ItemBag" +
      "_MistBoxLimit\020A\022\035\n\031RCE_Player_NotOwnedAv" +
      "atar\020G\022\035\n\031RCE_Player_GoldNotEnought\020H\022 \n" +
      "\034RCE_Player_DiamondNotEnought\020I\022\"\n\036RCE_P",
      "layer_CurrencysNotEnought\020J\022!\n\035RCE_Playe" +
      "r_DisplayPetNotExist\020K\022\"\n\036RCE_Player_Que" +
      "ryPlayerNotExist\020L\022%\n!RCE_EndlessSpire_T" +
      "hisLvCanNotPlay\020Q\022%\n!RCE_EndlessSpire_Pl" +
      "ayerStatusBusy\020R\022\'\n#RCE_EndlessSpire_Thi" +
      "sLvCanNotSettle\020S\022!\n\035RCE_Battle_UsedTeam" +
      "NotHavePet\020[\022$\n RCE_Battle_UsedTeamPetDa" +
      "taIsNull\020\\\022\"\n\036RCE_Battle_RepeatedEnterBa" +
      "ttle\020]\022 \n\034RCE_AlterName_NotFoundPlayer\020d" +
      "\022\034\n\030RCE_AlterName_EvilPlayer\020e\022 \n\034RCE_Al",
      "terName_DuringRenameCD\020f\022\035\n\031RCE_AlterNam" +
      "e_IllegalName\020g\022\036\n\032RCE_AlterName_Illegal" +
      "Words\020n\022\031\n\025RCE_AlterName_TooLong\020o\022\033\n\027RC" +
      "E_AlterName_Duplicate\020p\022\027\n\023RCE_AlterName" +
      "_Empty\020q\022\"\n\035RCE_MistForest_CreateRoomFai" +
      "l\020\310\001\022\"\n\035RCE_MistForest_ServerNotLogin\020\204\002" +
      "\022!\n\034RCE_ForInv_StatusMismatching\020\255\002\022\"\n\035R" +
      "CE_ForInv_MonsterIdxNotExist\020\256\002\022!\n\034RCE_F" +
      "orInv_BossCloneNotExist\020\257\002\022\037\n\032RCE_ForInv" +
      "_ClaimCountLimit\020\260\002\022#\n\036RCE_ForInv_Remove",
      "MonsterFailed\020\261\002\022#\n\036RCR_ForInv_CreateMon" +
      "sterFailed\020\262\002\022 \n\033RCE_Friend_FriendUpperL" +
      "imit\020\301\002\022$\n\037RCE_Friend_TargetPlayerNotExi" +
      "st\020\302\002\022%\n RCE_Friend_TargetApplyUpperLimi" +
      "t\020\303\002\022&\n!RCE_Friend_TargetFriendUpperLimi" +
      "t\020\304\002\022!\n\034RCE_Friend_TargetIsNotFriend\020\305\002\022" +
      "\036\n\031RCE_Friend_CanNotFindSelf\020\306\002\022(\n#RCE_F" +
      "riend_RepeatedSendToSameTarget\020\307\002\022$\n\037RCE" +
      "_Friend_NotRecvPointFromThis\020\310\002\022\035\n\030RCE_F" +
      "riend_RepeatedClaim\020\311\002\022+\n&RCE_DrawCard_F",
      "riednshipPointNotEnought\020\325\002\022#\n\036RCE_DrawC" +
      "ard_LowBookNotEnought\020\326\002\022$\n\037RCE_DrawCard" +
      "_HighBookNotEnought\020\327\002\022)\n$RCE_DrawCard_H" +
      "ighDrawCountUpperLimit\020\330\002\022\034\n\027RCE_GoldEx_" +
      "ExUpperLimit\020\351\002\022\031\n\024RCE_Pet_UpLvlFailure\020" +
      "\375\002\022\030\n\023RCE_Pet_PetNotExist\020\376\002\022\031\n\024RCE_Pet_" +
      "RuneNotExist\020\377\002\022#\n\036RCE_Pet_MissionAlread" +
      "yFinished\020\200\003\022\034\n\027RCE_Pet_MissionMaxError\020" +
      "\201\003\022\034\n\027RCE_Pet_MissionNotFound\020\202\003\022!\n\034RCE_" +
      "Pet_MissionPetNotCorrect\020\203\003\022\036\n\031RCE_Pet_F",
      "ragmentNotEnough\020\204\003\022\035\n\030RCE_Pet_FragmentN" +
      "otFound\020\205\003\022\032\n\025RCE_Pet_PetStatusLock\020\206\003\022!" +
      "\n\034RCE_Pet_PetStatusMissionLock\020\207\003\022\036\n\031RCE" +
      "_Pet_PetStatusMineLock\020\210\003\022\036\n\031RCE_Pet_Pet" +
      "StatusTeamLock\020\211\003\022 \n\033RCE_Pet_PetStatusCh" +
      "angeLock\020\212\003\022%\n RCE_Pet_PetColleciontRewa" +
      "rdError\020\213\003\022\033\n\026RCE_Pet_PetLvlMaxErroe\020\214\003\022" +
      "\"\n\035RCE_Pet_PetRuneAlreadyEquiped\020\215\003\022\034\n\027R" +
      "CE_Pet_PetBagNotEnough\020\216\003\022\035\n\030RCE_Pet_Run" +
      "eBagNotEnough\020\217\003\022%\n RCE_MainLine_CheckPo",
      "intCfgIsNull\020\221\003\022\"\n\035RCE_MainLine_CheckPoi" +
      "ntIsLock\020\222\003\022(\n#RCE_MainLine_CheckPointCa" +
      "nNotBattle\020\223\003\022!\n\034RCE_MainLine_FightOrder" +
      "Error\020\224\003\022!\n\034RCE_MainLine_NodeCanNotReach" +
      "\020\225\003\022 \n\033RCE_MainLine_CurLvMissMatch\020\226\003\022&\n" +
      "!RCE_MainLine_NodeTypeCanNotBattle\020\227\003\022!\n" +
      "\034RCE_MainLine_CurNodeIsPassed\020\230\003\022$\n\037RCE_" +
      "MainLine_PlayerHaveNoOnhook\020\231\003\022\037\n\032RCE_Ma" +
      "inLine_NodeCfgIsNull\020\232\003\022\037\n\032RCE_MainLine_" +
      "CurNodeIsLock\020\233\003\022%\n RCE_MainLine_CurNode",
      "CanNotBattle\020\234\003\022#\n\036RCE_MainLine_PswNotIn" +
      "putFinish\020\235\003\022)\n$RCE_MainLine_CheckPointT" +
      "ypeMissMatch\020\236\003\022 \n\033RCE_MainLine_PswLengt" +
      "hError\020\237\003\022!\n\034RCE_MainLine_InputNotPswNod" +
      "e\020\240\003\022!\n\034RCE_MainLine_InputTheSamePsw\020\241\003\022" +
      "\"\n\035RCE_MainLine_QuickOnHookLimit\020\242\003\022\035\n\030R" +
      "CE_Patorl_ErrorLocation\020\303\003\022\030\n\023RCE_Patorl" +
      "_Explored\020\304\003\022\033\n\026RCE_Patrol_NotExplored\020\305" +
      "\003\022\031\n\024RCE_Patorl_EventFail\020\306\003\022\034\n\027RCE_Patr" +
      "ol_FailureError\020\307\003\022\037\n\032RCE_Patrol_DailyMa",
      "xFailure\020\310\003\022$\n\037RCE_BlackMarket_GoodsIdNo" +
      "tExist\020\327\003\022\'\n\"RCE_BlackMarket_GoodsBuyUpp" +
      "erLimit\020\330\003\022&\n!RCE_BlackMarket_RefreshTim" +
      "esLimit\020\331\003\022!\n\034RCE_Target_MissionUnfinish" +
      "ed\020\353\003\022#\n\036RCE_Target_MissionAlreadyClaim\020" +
      "\354\003\022$\n\037RCE_Target_MissionCfgIdNotExist\020\355\003" +
      "\022)\n$RCE_BraveChallenge_ChoosenDifficulty" +
      "\020\377\003\022%\n RCE_BraveChallenge_AlreadyFinish\020" +
      "\200\004\022\"\n\035RCE_MineFight_NotFoundMineSvr\020\223\004\022$" +
      "\n\037RCE_MineFight_NotFoundBattleSrv\020\224\004\022\037\n\032",
      "RCE_MineFight_NotFoundMine\020\225\004\022*\n%RCE_Min" +
      "eFight_NotEnoughtExploitScroll\020\226\004\022$\n\037RCE" +
      "_MineFight_PetFormPlundering\020\227\004\022$\n\037RCE_M" +
      "ineFight_PetFormExploiting\020\230\004\022(\n#RCE_Min" +
      "eFight_NotClaimPetFormReward\020\231\004\022!\n\034RCE_M" +
      "ineFight_MineIsBattling\020\232\004\022\037\n\032RCE_MineFi" +
      "ght_EmptyPetForm\020\233\004\022\036\n\031RCE_MineFight_Ene" +
      "myGiveUp\020\234\004\022!\n\034RCE_MineFight_PlayerBattl" +
      "ing\020\235\004\022!\n\034RCE_MineFight_NotInMineFight\020\236" +
      "\004\022)\n$RCE_MineFight_ChooseRewardErrorInde",
      "x\020\237\004\022\"\n\035RCE_MineFight_NotOccupiedMine\020\240\004" +
      "\022!\n\034RCE_MineFight_ErrorMineState\020\241\004\022 \n\033R" +
      "CE_MineFight_ClaimedReward\020\242\004\022\035\n\030RCE_Min" +
      "eFight_LevelLimit\020\243\004\022#\n\036RCE_MineFight_Sc" +
      "rollPriceError\020\244\004\022 \n\033RCE_MineFight_Frien" +
      "dHelping\020\245\004\022%\n RCE_MineFight_EmptyFriend" +
      "PetForm\020\246\004\022&\n!RCE_MineFight_FriendPetFor" +
      "mLocked\020\247\004\022 \n\033RCE_MineFight_FriendRefuse" +
      "d\020\250\004\022$\n\037RCE_MineFight_AppliedFriendHelp\020" +
      "\251\004\022\"\n\035RCE_MineFight_NotFoundPetForm\020\252\004\022(",
      "\n#RCE_MineFight_ExitFailedForBattling\020\253\004" +
      "\022#\n\036RCE_MineFight_BeyondGiftExpire\020\254\004\022%\n" +
      " RCE_MineFight_FriendIsHelpingYou\020\255\004\022(\n#" +
      "RCE_MineFight_CanNotHelpMultiFriend\020\256\004\022," +
      "\n\'RCE_MineFight_CannotOccupyHelpingFrien" +
      "d\020\257\004\022\036\n\031RCE_AncientCall_PetInTeam\020\261\004\022,\n\'" +
      "RCE_PetTransfer_UnsupportedTransferType\020" +
      "\262\004\022(\n#RCE_PetTramsfer_HavaNoPetInTrsnsfe" +
      "r\020\263\004\022$\n\037RCE_ResCopy_ChallengeTimesLimit\020" +
      "\305\004\022\036\n\031RCE_ResCopy_BuyTimesLimit\020\306\004\022\035\n\030RC",
      "E_ResCopy_FightIsLimit\020\307\004\022!\n\034RCE_ResCopy" +
      "_IndexCanNotFight\020\310\004\022\031\n\024RCE_Activity_Not" +
      "Open\020\331\004\022#\n\036RCE_Activity_CurrencyNotEnoug" +
      "h\020\332\004\022\"\n\035RCE_Activity_MissionOutOfTime\020\333\004" +
      "\022$\n\037RCE_Activity_MissionCanNotClaim\020\334\004\022$" +
      "\n\037RCE_Activity_RewardAlreadyClaim\020\335\004\022 \n\033" +
      "RCE_Activity_RepeatedSignIn\020\336\004\022\036\n\031RCE_Ac" +
      "tivity_ExTimesLimit\020\337\004\022$\n\037RCE_Activity_D" +
      "issatisfyAddition\020\340\004\022!\n\034RCE_Activity_Mis" +
      "sionIsExpire\020\341\004\022\030\n\023RCE_Pet_PetRuneLock\020\213",
      "\005\022 \n\033RCE_ActiveCode_LoseEfficacy\020\275\005\022\030\n\023R" +
      "CE_ActiveCode_Used\020\276\005\022\031\n\024RCE_ActiveCode_" +
      "Error\020\277\005\022\036\n\031RCE_ActiveCode_UpperLimit\020\300\005" +
      "\022#\n\036RCE_ActiveCode_UseSameTypeCode\020\301\005\022\034\n" +
      "\027RCE_NewBee_RepeatedName\020\357\005\022!\n\034RCE_NewBe" +
      "e_RepeatedChoicePet\020\360\005B\033\n\010protocol\252\002\016ETH" +
      "otfix.Protob\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_RetCode_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_RetCode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RetCode_descriptor,
        new java.lang.String[] { "RetCode", "Params", });
    internal_static_ParamInfo_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_ParamInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ParamInfo_descriptor,
        new java.lang.String[] { "PramType", "ParamVal", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
