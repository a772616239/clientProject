// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RetCodeId.proto

package protocol;

public final class RetCodeId {
  private RetCodeId() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code RetCodeEnum}
   */
  public enum RetCodeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>RCE_Null = 0;</code>
     */
    RCE_Null(0),
    /**
     * <code>RCE_Success = 1;</code>
     */
    RCE_Success(1),
    /**
     * <code>RCE_Failure = 2;</code>
     */
    RCE_Failure(2),
    /**
     * <pre>
     *未知错误
     * </pre>
     *
     * <code>RCE_UnknownError = 3;</code>
     */
    RCE_UnknownError(3),
    /**
     * <pre>
     *玩家离线，需要重新登录
     * </pre>
     *
     * <code>RCE_PlayerOffline = 4;</code>
     */
    RCE_PlayerOffline(4),
    /**
     * <pre>
     *参数错误
     * </pre>
     *
     * <code>RCE_ErrorParam = 5;</code>
     */
    RCE_ErrorParam(5),
    /**
     * <pre>
     *功能解锁
     * </pre>
     *
     * <code>RCE_FunctionIsLock = 6;</code>
     */
    RCE_FunctionIsLock(6),
    /**
     * <pre>
     *商店类型不匹配
     * </pre>
     *
     * <code>RCE_ShopTypeMissMatch = 7;</code>
     */
    RCE_ShopTypeMissMatch(7),
    /**
     * <pre>
     *材料不足
     * </pre>
     *
     * <code>RCE_MatieralNotEnough = 8;</code>
     */
    RCE_MatieralNotEnough(8),
    /**
     * <pre>
     *等级不足
     * </pre>
     *
     * <code>RCE_LvNotEnough = 9;</code>
     */
    RCE_LvNotEnough(9),
    /**
     * <code>RCE_Login_ErrorPwd = 10;</code>
     */
    RCE_Login_ErrorPwd(10),
    /**
     * <code>RCE_Login_FullPlayer = 11;</code>
     */
    RCE_Login_FullPlayer(11),
    /**
     * <pre>
     *服务器维护中
     * </pre>
     *
     * <code>RCE_Login_ServerNotOpen = 12;</code>
     */
    RCE_Login_ServerNotOpen(12),
    /**
     * <pre>
     *客户端版本错误
     * </pre>
     *
     * <code>RCE_Login_ClientVersionError = 13;</code>
     */
    RCE_Login_ClientVersionError(13),
    /**
     * <pre>
     *配置错误
     * </pre>
     *
     * <code>RCE_ConfigError = 14;</code>
     */
    RCE_ConfigError(14),
    /**
     * <pre>
     *配置不存在
     * </pre>
     *
     * <code>RSE_ConfigNotExist = 15;</code>
     */
    RSE_ConfigNotExist(15),
    /**
     * <pre>
     *当前vip等级礼包已经领取
     * </pre>
     *
     * <code>RSE_VipGiftClaimed = 16;</code>
     */
    RSE_VipGiftClaimed(16),
    /**
     * <pre>
     *无效请求
     * </pre>
     *
     * <code>RSE_InvalidRequest = 17;</code>
     */
    RSE_InvalidRequest(17),
    /**
     * <pre>
     *当前功能异常维护中
     * </pre>
     *
     * <code>RSE_Function_AbnormalMaintenance = 18;</code>
     */
    RSE_Function_AbnormalMaintenance(18),
    /**
     * <pre>
     *账号锁定
     * </pre>
     *
     * <code>RSE_Login_AccountLock = 19;</code>
     */
    RSE_Login_AccountLock(19),
    /**
     * <code>RCE_CreateRole_DuplicateName = 20;</code>
     */
    RCE_CreateRole_DuplicateName(20),
    /**
     * <code>RCE_CreateRole_InvalidName = 21;</code>
     */
    RCE_CreateRole_InvalidName(21),
    /**
     * <pre>
     * 顺序错误,应先发login消息
     * </pre>
     *
     * <code>RCE_CreateRole_ErrorOrder = 22;</code>
     */
    RCE_CreateRole_ErrorOrder(22),
    /**
     * <pre>
     *禁止修改性别
     * </pre>
     *
     * <code>RCE_CreateRole_ForbidModifySex = 23;</code>
     */
    RCE_CreateRole_ForbidModifySex(23),
    /**
     * <pre>
     * 服务器繁忙
     * </pre>
     *
     * <code>RCE_Login_ServerBusy = 29;</code>
     */
    RCE_Login_ServerBusy(29),
    /**
     * <pre>
     * 频繁登录
     * </pre>
     *
     * <code>RCE_Login_LoginTooFast = 30;</code>
     */
    RCE_Login_LoginTooFast(30),
    /**
     * <pre>
     * 重复登录
     * </pre>
     *
     * <code>RCE_KickOut_RepeatLogin = 31;</code>
     */
    RCE_KickOut_RepeatLogin(31),
    /**
     * <pre>
     * 服务器关闭
     * </pre>
     *
     * <code>RCE_KickOut_ServerClose = 32;</code>
     */
    RCE_KickOut_ServerClose(32),
    /**
     * <pre>
     * 防沉迷限制
     * </pre>
     *
     * <code>RCE_KickOut_AntiLimit = 33;</code>
     */
    RCE_KickOut_AntiLimit(33),
    /**
     * <pre>
     * 账号封禁
     * </pre>
     *
     * <code>RCE_KickOut_Banned = 34;</code>
     */
    RCE_KickOut_Banned(34),
    /**
     * <pre>
     * 新手引导跳过
     * </pre>
     *
     * <code>RCE_KickOut_SkipNewBeeGuide = 35;</code>
     */
    RCE_KickOut_SkipNewBeeGuide(35),
    /**
     * <pre>
     * 相同地址重复登录
     * </pre>
     *
     * <code>RCE_KickOut_RepeatLoginWithSameIp = 36;</code>
     */
    RCE_KickOut_RepeatLoginWithSameIp(36),
    /**
     * <pre>
     *宝石背包满
     * </pre>
     *
     * <code>RCE_Mail_GemBagIsFull = 37;</code>
     */
    RCE_Mail_GemBagIsFull(37),
    /**
     * <pre>
     *道具背包满
     * </pre>
     *
     * <code>RCE_Mail_ItemBagIsFull = 38;</code>
     */
    RCE_Mail_ItemBagIsFull(38),
    /**
     * <pre>
     *宠物背包满
     * </pre>
     *
     * <code>RCE_Mail_PetBagIsFull = 39;</code>
     */
    RCE_Mail_PetBagIsFull(39),
    /**
     * <pre>
     *符文背包满
     * </pre>
     *
     * <code>RCE_Mail_RuneBagIsFull = 40;</code>
     */
    RCE_Mail_RuneBagIsFull(40),
    /**
     * <pre>
     *该邮件不存在
     * </pre>
     *
     * <code>RCE_Mail_UnExist = 41;</code>
     */
    RCE_Mail_UnExist(41),
    /**
     * <pre>
     *附件不存在
     * </pre>
     *
     * <code>RCE_Mail_NoAttachment = 42;</code>
     */
    RCE_Mail_NoAttachment(42),
    /**
     * <pre>
     *背包容量不足
     * </pre>
     *
     * <code>RCE_Mail_UnEnoughtCapacity = 43;</code>
     */
    RCE_Mail_UnEnoughtCapacity(43),
    /**
     * <pre>
     *附件已经领取过了
     * </pre>
     *
     * <code>RCE_Mail_AlreadyCliamed = 44;</code>
     */
    RCE_Mail_AlreadyCliamed(44),
    /**
     * <pre>
     *附件未领取
     * </pre>
     *
     * <code>RCE_Mail_AttachmentNoClaim = 45;</code>
     */
    RCE_Mail_AttachmentNoClaim(45),
    /**
     * <pre>
     *邮件未读
     * </pre>
     *
     * <code>RCE_Mail_UnRead = 46;</code>
     */
    RCE_Mail_UnRead(46),
    /**
     * <pre>
     *该位置已有宠物,无法上阵
     * </pre>
     *
     * <code>RCE_PrepareWar_TargetPositionHasPet = 47;</code>
     */
    RCE_PrepareWar_TargetPositionHasPet(47),
    /**
     * <pre>
     *宠物在宠物转化中还未确认不能备战
     * </pre>
     *
     * <code>RCE_PrepareWar_PetIsInPetTransfer = 48;</code>
     */
    RCE_PrepareWar_PetIsInPetTransfer(48),
    /**
     * <pre>
     *该小队已上锁，无法编辑（适用矿区小队）
     * </pre>
     *
     * <code>RCE_PrepareWar_TeamStatusIslock = 49;</code>
     */
    RCE_PrepareWar_TeamStatusIslock(49),
    /**
     * <pre>
     *该宠物已阵亡
     * </pre>
     *
     * <code>RCE_PrepareWar_PetIsDead = 50;</code>
     */
    RCE_PrepareWar_PetIsDead(50),
    /**
     * <pre>
     *宠物不存在
     * </pre>
     *
     * <code>RCE_PrepareWar_PetNoExist = 51;</code>
     */
    RCE_PrepareWar_PetNoExist(51),
    /**
     * <pre>
     *等级不足，不能使用该技能
     * </pre>
     *
     * <code>RCE_PrepareWar_LvNotEought = 52;</code>
     */
    RCE_PrepareWar_LvNotEought(52),
    /**
     * <pre>
     *非法小队名
     * </pre>
     *
     * <code>RCE_PrepareWar_IllegalTeamName = 53;</code>
     */
    RCE_PrepareWar_IllegalTeamName(53),
    /**
     * <pre>
     *无法再购买小队
     * </pre>
     *
     * <code>RCE_PrepareWar_CanNotBuyMore = 54;</code>
     */
    RCE_PrepareWar_CanNotBuyMore(54),
    /**
     * <pre>
     *钻石不足
     * </pre>
     *
     * <code>RCE_PrepareWar_DiamondNotEnought = 56;</code>
     */
    RCE_PrepareWar_DiamondNotEnought(56),
    /**
     * <pre>
     *该位置未解锁
     * </pre>
     *
     * <code>RCE_PrepareWar_PositionIsLock = 57;</code>
     */
    RCE_PrepareWar_PositionIsLock(57),
    /**
     * <pre>
     *该小队未解锁
     * </pre>
     *
     * <code>RCE_PrepareWar_TeamIslock = 58;</code>
     */
    RCE_PrepareWar_TeamIslock(58),
    /**
     * <pre>
     *技能不存在
     * </pre>
     *
     * <code>RCE_PrepareWar_SkillNotExist = 59;</code>
     */
    RCE_PrepareWar_SkillNotExist(59),
    /**
     * <pre>
     *重复上阵同一宠物
     * </pre>
     *
     * <code>RCE_PrepareWar_RepeatedSetSamePet = 60;</code>
     */
    RCE_PrepareWar_RepeatedSetSamePet(60),
    /**
     * <pre>
     *道具不存在
     * </pre>
     *
     * <code>RCE_Itembag_ItemNotExist = 61;</code>
     */
    RCE_Itembag_ItemNotExist(61),
    /**
     * <pre>
     *道具不足
     * </pre>
     *
     * <code>RCE_Itembag_ItemNotEnought = 62;</code>
     */
    RCE_Itembag_ItemNotEnought(62),
    /**
     * <pre>
     *该道具无法使用
     * </pre>
     *
     * <code>RCE_Itembag_ItemCanNotUsed = 63;</code>
     */
    RCE_Itembag_ItemCanNotUsed(63),
    /**
     * <pre>
     *该道具无法出售
     * </pre>
     *
     * <code>RCE_ItemBag_ItemCanNotSell = 64;</code>
     */
    RCE_ItemBag_ItemCanNotSell(64),
    /**
     * <pre>
     *迷雾森林宝箱每日次数限制
     * </pre>
     *
     * <code>RCE_ItemBag_MistBoxLimit = 65;</code>
     */
    RCE_ItemBag_MistBoxLimit(65),
    /**
     * <pre>
     *无法再次使用该道具
     * </pre>
     *
     * <code>RCE_ItemBag_CanNotUseMore = 66;</code>
     */
    RCE_ItemBag_CanNotUseMore(66),
    /**
     * <pre>
     *该头像还未拥有，不能更换
     * </pre>
     *
     * <code>RCE_Player_NotOwnedAvatar = 71;</code>
     */
    RCE_Player_NotOwnedAvatar(71),
    /**
     * <pre>
     *金币不足
     * </pre>
     *
     * <code>RCE_Player_GoldNotEnought = 72;</code>
     */
    RCE_Player_GoldNotEnought(72),
    /**
     * <pre>
     *钻石不足
     * </pre>
     *
     * <code>RCE_Player_DiamondNotEnought = 73;</code>
     */
    RCE_Player_DiamondNotEnought(73),
    /**
     * <pre>
     *货币不足（金币，魔石，魔晶）
     * </pre>
     *
     * <code>RCE_Player_CurrencysNotEnought = 74;</code>
     */
    RCE_Player_CurrencysNotEnought(74),
    /**
     * <pre>
     *展示的宠物不存在
     * </pre>
     *
     * <code>RCE_Player_DisplayPetNotExist = 75;</code>
     */
    RCE_Player_DisplayPetNotExist(75),
    /**
     * <pre>
     *查询的玩家不存在
     * </pre>
     *
     * <code>RCE_Player_QueryPlayerNotExist = 76;</code>
     */
    RCE_Player_QueryPlayerNotExist(76),
    /**
     * <pre>
     *头像框未解锁
     * </pre>
     *
     * <code>RCE_Player_AvatarBorderLocked = 77;</code>
     */
    RCE_Player_AvatarBorderLocked(77),
    /**
     * <pre>
     *头像框已过期
     * </pre>
     *
     * <code>RCE_Player_AvatarBorderExpire = 78;</code>
     */
    RCE_Player_AvatarBorderExpire(78),
    /**
     * <pre>
     *商品已过期
     * </pre>
     *
     * <code>RCE_Player_GoodsExpired = 79;</code>
     */
    RCE_Player_GoodsExpired(79),
    /**
     * <pre>
     *该关卡不能游戏，请选择其他关卡
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvCanNotPlay = 81;</code>
     */
    RCE_EndlessSpire_ThisLvCanNotPlay(81),
    /**
     * <pre>
     *玩家状态繁忙
     * </pre>
     *
     * <code>RCE_EndlessSpire_PlayerStatusBusy = 82;</code>
     */
    RCE_EndlessSpire_PlayerStatusBusy(82),
    /**
     * <pre>
     *该关卡不能结算，
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvCanNotSettle = 83;</code>
     */
    RCE_EndlessSpire_ThisLvCanNotSettle(83),
    /**
     * <pre>
     *当前关卡没有对应的成就奖励，
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvHaveNoAchievementReward = 84;</code>
     */
    RCE_EndlessSpire_ThisLvHaveNoAchievementReward(84),
    /**
     * <pre>
     *当前关卡成就奖励已经领取
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvAchievementRewardClaimed = 85;</code>
     */
    RCE_EndlessSpire_ThisLvAchievementRewardClaimed(85),
    /**
     * <pre>
     *当前成就未完成
     * </pre>
     *
     * <code>RCE_EndlessSpire_CurAchievementNotFinished = 86;</code>
     */
    RCE_EndlessSpire_CurAchievementNotFinished(86),
    /**
     * <pre>
     *敌方小队为空
     * </pre>
     *
     * <code>RCE_Battle_EnemyPetIsEmpty = 90;</code>
     */
    RCE_Battle_EnemyPetIsEmpty(90),
    /**
     * <pre>
     *当前使用的小队没有宠物
     * </pre>
     *
     * <code>RCE_Battle_UsedTeamNotHavePet = 91;</code>
     */
    RCE_Battle_UsedTeamNotHavePet(91),
    /**
     * <code>RCE_Battle_FightMakeIsNotExist = 92;</code>
     */
    RCE_Battle_FightMakeIsNotExist(92),
    /**
     * <pre>
     *重复进入战斗
     * </pre>
     *
     * <code>RCE_Battle_RepeatedEnterBattle = 93;</code>
     */
    RCE_Battle_RepeatedEnterBattle(93),
    /**
     * <pre>
     *战斗数据错误
     * </pre>
     *
     * <code>RCE_Battle_DataError = 94;</code>
     */
    RCE_Battle_DataError(94),
    /**
     * <pre>
     *战斗已结束
     * </pre>
     *
     * <code>RCE_Battle_NotInBattle = 96;</code>
     */
    RCE_Battle_NotInBattle(96),
    /**
     * <pre>
     *战斗超过限制
     * </pre>
     *
     * <code>RCE_Battle_OutOfLimit = 97;</code>
     */
    RCE_Battle_OutOfLimit(97),
    /**
     * <pre>
     *战斗频繁
     * </pre>
     *
     * <code>RCE_Battle_BattleTooFast = 98;</code>
     */
    RCE_Battle_BattleTooFast(98),
    /**
     * <pre>
     *宠物数量超过限制
     * </pre>
     *
     * <code>RCE_PrepareWar_PetCountOutOfLimit = 99;</code>
     */
    RCE_PrepareWar_PetCountOutOfLimit(99),
    /**
     * <pre>
     * 未找到玩家
     * </pre>
     *
     * <code>RCE_AlterName_NotFoundPlayer = 100;</code>
     */
    RCE_AlterName_NotFoundPlayer(100),
    /**
     * <pre>
     * 非法玩家
     * </pre>
     *
     * <code>RCE_AlterName_EvilPlayer = 101;</code>
     */
    RCE_AlterName_EvilPlayer(101),
    /**
     * <pre>
     * 改名CD中
     * </pre>
     *
     * <code>RCE_AlterName_DuringRenameCD = 102;</code>
     */
    RCE_AlterName_DuringRenameCD(102),
    /**
     * <pre>
     *非法玩家名z
     * </pre>
     *
     * <code>RCE_AlterName_IllegalName = 103;</code>
     */
    RCE_AlterName_IllegalName(103),
    /**
     * <pre>
     * 含有非法字符串
     * </pre>
     *
     * <code>RCE_AlterName_IllegalWords = 110;</code>
     */
    RCE_AlterName_IllegalWords(110),
    /**
     * <pre>
     * 名字过长
     * </pre>
     *
     * <code>RCE_AlterName_TooLong = 111;</code>
     */
    RCE_AlterName_TooLong(111),
    /**
     * <pre>
     * 名字重复
     * </pre>
     *
     * <code>RCE_AlterName_Duplicate = 112;</code>
     */
    RCE_AlterName_Duplicate(112),
    /**
     * <pre>
     * 新名字长度不足
     * </pre>
     *
     * <code>RCE_AlterName_Empty = 113;</code>
     */
    RCE_AlterName_Empty(113),
    /**
     * <pre>
     *vip经验卡达到购买次数上限
     * </pre>
     *
     * <code>RCE_VipExpMaxBuyTimeLimit = 114;</code>
     */
    RCE_VipExpMaxBuyTimeLimit(114),
    /**
     * <pre>
     *功能未解锁
     * </pre>
     *
     * <code>RCE_FunctionNotUnLock = 115;</code>
     */
    RCE_FunctionNotUnLock(115),
    /**
     * <pre>
     *功能未解锁
     * </pre>
     *
     * <code>RCE_PlayerLvNotEnough = 116;</code>
     */
    RCE_PlayerLvNotEnough(116),
    /**
     * <pre>
     *===================迷雾森林start 预留200 - 300=================
     * </pre>
     *
     * <code>RCE_MistForest_CreateRoomFail = 200;</code>
     */
    RCE_MistForest_CreateRoomFail(200),
    /**
     * <pre>
     * 未找到迷雾森林玩家
     * </pre>
     *
     * <code>RCE_MistForest_NotFoundMistPlayer = 201;</code>
     */
    RCE_MistForest_NotFoundMistPlayer(201),
    /**
     * <pre>
     * 玩家未进入迷雾森林房间
     * </pre>
     *
     * <code>RCE_MistForest_NotInMistRoom = 202;</code>
     */
    RCE_MistForest_NotInMistRoom(202),
    /**
     * <pre>
     * 未分配迷雾森林玩家
     * </pre>
     *
     * <code>RCE_MistForest_NotFoundMistFighter = 203;</code>
     */
    RCE_MistForest_NotFoundMistFighter(203),
    /**
     * <pre>
     * 玩家未在安全区
     * </pre>
     *
     * <code>RCE_MistForest_NotInSafeRegion = 204;</code>
     */
    RCE_MistForest_NotInSafeRegion(204),
    /**
     * <pre>
     * 玩家在迷雾森林中
     * </pre>
     *
     * <code>RCE_MistForest_AlreadyInMist = 205;</code>
     */
    RCE_MistForest_AlreadyInMist(205),
    /**
     * <pre>
     * 当前不可交互
     * </pre>
     *
     * <code>RCE_MistForest_CanNotTouch = 206;</code>
     */
    RCE_MistForest_CanNotTouch(206),
    /**
     * <pre>
     * 已经上交宝珠
     * </pre>
     *
     * <code>RCE_MistForest_AlreadySubmitJewelry = 207;</code>
     */
    RCE_MistForest_AlreadySubmitJewelry(207),
    /**
     * <pre>
     * 封印宝箱不存在或不可交互
     * </pre>
     *
     * <code>RCE_MistForest_NotFoundSealBox = 208;</code>
     */
    RCE_MistForest_NotFoundSealBox(208),
    /**
     * <pre>
     * 宝珠数量不足
     * </pre>
     *
     * <code>RCE_MistForest_NotEnoughJewelry = 209;</code>
     */
    RCE_MistForest_NotEnoughJewelry(209),
    /**
     * <pre>
     * 宝珠id不匹配
     * </pre>
     *
     * <code>RCE_MistForest_JewelryIdNotMatch = 210;</code>
     */
    RCE_MistForest_JewelryIdNotMatch(210),
    /**
     * <pre>
     * 隐藏魔物未召唤
     * </pre>
     *
     * <code>RCE_MistForest_HiddenEvilNotFound = 211;</code>
     */
    RCE_MistForest_HiddenEvilNotFound(211),
    /**
     * <pre>
     * 隐藏魔物已过期
     * </pre>
     *
     * <code>RCE_MistForest_HiddenEvilExpired = 212;</code>
     */
    RCE_MistForest_HiddenEvilExpired(212),
    /**
     * <pre>
     * 已召唤隐藏魔物
     * </pre>
     *
     * <code>RCE_MistForest_HiddenEvilSummoned = 213;</code>
     */
    RCE_MistForest_HiddenEvilSummoned(213),
    /**
     * <pre>
     * 服务器未登录(服务器用)
     * </pre>
     *
     * <code>RCE_MistForest_ServerNotLogin = 260;</code>
     */
    RCE_MistForest_ServerNotLogin(260),
    /**
     * <pre>
     *活动状态不匹配
     * </pre>
     *
     * <code>RCE_ForInv_StatusMismatching = 301;</code>
     */
    RCE_ForInv_StatusMismatching(301),
    /**
     * <pre>
     *第一阶段小怪Idx不存在
     * </pre>
     *
     * <code>RCE_ForInv_MonsterIdxNotExist = 302;</code>
     */
    RCE_ForInv_MonsterIdxNotExist(302),
    /**
     * <pre>
     *bossIdx 不匹配
     * </pre>
     *
     * <code>RCE_ForInv_BossCloneNotExist = 303;</code>
     */
    RCE_ForInv_BossCloneNotExist(303),
    /**
     * <pre>
     *过渡阶段已达上限
     * </pre>
     *
     * <code>RCE_ForInv_ClaimCountLimit = 304;</code>
     */
    RCE_ForInv_ClaimCountLimit(304),
    /**
     * <pre>
     *移除小怪失败
     * </pre>
     *
     * <code>RCE_ForInv_RemoveMonsterFailed = 305;</code>
     */
    RCE_ForInv_RemoveMonsterFailed(305),
    /**
     * <pre>
     *生成小怪失败
     * </pre>
     *
     * <code>RCE_ForInv_CreateMonsterFailed = 306;</code>
     */
    RCE_ForInv_CreateMonsterFailed(306),
    /**
     * <pre>
     *建筑已解放
     * </pre>
     *
     * <code>RCE_ForInv_BuildingFreed = 307;</code>
     */
    RCE_ForInv_BuildingFreed(307),
    /**
     * <pre>
     *好友已达上限
     * </pre>
     *
     * <code>RCE_Friend_FriendUpperLimit = 321;</code>
     */
    RCE_Friend_FriendUpperLimit(321),
    /**
     * <pre>
     *目标玩家不存在
     * </pre>
     *
     * <code>RCE_Friend_TargetPlayerNotExist = 322;</code>
     */
    RCE_Friend_TargetPlayerNotExist(322),
    /**
     * <pre>
     *目标玩家申请列表已达上限
     * </pre>
     *
     * <code>RCE_Friend_TargetApplyUpperLimit = 323;</code>
     */
    RCE_Friend_TargetApplyUpperLimit(323),
    /**
     * <pre>
     *目标好友列表已达上限
     * </pre>
     *
     * <code>RCE_Friend_TargetFriendUpperLimit = 324;</code>
     */
    RCE_Friend_TargetFriendUpperLimit(324),
    /**
     * <pre>
     *目标玩家还不是你的好友
     * </pre>
     *
     * <code>RCE_Friend_TargetIsNotFriend = 325;</code>
     */
    RCE_Friend_TargetIsNotFriend(325),
    /**
     * <pre>
     *不能查找自己
     * </pre>
     *
     * <code>RCE_Friend_CanNotFindSelf = 326;</code>
     */
    RCE_Friend_CanNotFindSelf(326),
    /**
     * <pre>
     *已经赠送友情点到目标玩家
     * </pre>
     *
     * <code>RCE_Friend_RepeatedSendToSameTarget = 327;</code>
     */
    RCE_Friend_RepeatedSendToSameTarget(327),
    /**
     * <pre>
     *还未收到该玩家赠送的友情点
     * </pre>
     *
     * <code>RCE_Friend_NotRecvPointFromThis = 328;</code>
     */
    RCE_Friend_NotRecvPointFromThis(328),
    /**
     * <pre>
     *已经领取该玩家的友情点
     * </pre>
     *
     * <code>RCE_Friend_RepeatedClaim = 329;</code>
     */
    RCE_Friend_RepeatedClaim(329),
    /**
     * <pre>
     *友情点获取上限
     * </pre>
     *
     * <code>RCE_Friend_FriendItemGainLimit = 330;</code>
     */
    RCE_Friend_FriendItemGainLimit(330),
    /**
     * <pre>
     *友情点不足无法兑换
     * </pre>
     *
     * <code>RCE_DrawCard_FriednshipPointNotEnought = 341;</code>
     */
    RCE_DrawCard_FriednshipPointNotEnought(341),
    /**
     * <pre>
     *低级召唤书不足
     * </pre>
     *
     * <code>RCE_DrawCard_LowBookNotEnought = 342;</code>
     */
    RCE_DrawCard_LowBookNotEnought(342),
    /**
     * <pre>
     *高级召唤书不足
     * </pre>
     *
     * <code>RCE_DrawCard_HighBookNotEnought = 343;</code>
     */
    RCE_DrawCard_HighBookNotEnought(343),
    /**
     * <pre>
     *当前高级奖池抽取次数达上限,需要刷新后才能继续抽取
     * </pre>
     *
     * <code>RCE_DrawCard_HighDrawCountUpperLimit = 344;</code>
     */
    RCE_DrawCard_HighDrawCountUpperLimit(344),
    /**
     * <pre>
     *兑换次数达上限
     * </pre>
     *
     * <code>RCE_GoldEx_ExUpperLimit = 361;</code>
     */
    RCE_GoldEx_ExUpperLimit(361),
    /**
     * <pre>
     *===================宠物系统end   预留370 - 400=================
     * </pre>
     *
     * <code>RCE_Pet_PetNumLessThanCoupTeamNeed = 373;</code>
     */
    RCE_Pet_PetNumLessThanCoupTeamNeed(373),
    /**
     * <pre>
     *魔晶编队中宠物等级差距过大
     * </pre>
     *
     * <code>RCE_Pet_CoupTeamPetLvDifferGreatly = 374;</code>
     */
    RCE_Pet_CoupTeamPetLvDifferGreatly(374),
    /**
     * <pre>
     *虚空宝石已解锁
     * </pre>
     *
     * <code>RCE_Pet_VoidStoneIsUnLock = 375;</code>
     */
    RCE_Pet_VoidStoneIsUnLock(375),
    /**
     * <pre>
     * 未达到等级要求
     * </pre>
     *
     * <code>RCE_Pet_LevelLimit = 376;</code>
     */
    RCE_Pet_LevelLimit(376),
    /**
     * <pre>
     *宠物品质达到最大等级
     * </pre>
     *
     * <code>RCE_Pet_RarityMaxLvLimit = 377;</code>
     */
    RCE_Pet_RarityMaxLvLimit(377),
    /**
     * <pre>
     *虚空宝石已达到最大等级
     * </pre>
     *
     * <code>RCE_Pet_VoidStoneMaxLvLimit = 378;</code>
     */
    RCE_Pet_VoidStoneMaxLvLimit(378),
    /**
     * <pre>
     *尚未获得虚空宝石
     * </pre>
     *
     * <code>RCE_Pet_VoidStoneNotExist = 379;</code>
     */
    RCE_Pet_VoidStoneNotExist(379),
    /**
     * <pre>
     *魔灵等级不能大于玩家等级
     * </pre>
     *
     * <code>RCE_Pet_PetLvGtPlayerLv = 380;</code>
     */
    RCE_Pet_PetLvGtPlayerLv(380),
    /**
     * <pre>
     * 强化失败：觉醒失败
     * </pre>
     *
     * <code>RCE_Pet_UpLvlFailure = 381;</code>
     */
    RCE_Pet_UpLvlFailure(381),
    /**
     * <pre>
     * 宠物不存在
     * </pre>
     *
     * <code>RCE_Pet_PetNotExist = 382;</code>
     */
    RCE_Pet_PetNotExist(382),
    /**
     * <pre>
     * 符文不存在
     * </pre>
     *
     * <code>RCE_Pet_RuneNotExist = 383;</code>
     */
    RCE_Pet_RuneNotExist(383),
    /**
     * <pre>
     * 快速完成委托已结束
     * </pre>
     *
     * <code>RCE_Pet_MissionAlreadyFinished = 384;</code>
     */
    RCE_Pet_MissionAlreadyFinished(384),
    /**
     * <pre>
     * 委托数已经达到最大
     * </pre>
     *
     * <code>RCE_Pet_MissionMaxError = 385;</code>
     */
    RCE_Pet_MissionMaxError(385),
    /**
     * <pre>
     * 委托未找到
     * </pre>
     *
     * <code>RCE_Pet_MissionNotFound = 386;</code>
     */
    RCE_Pet_MissionNotFound(386),
    /**
     * <pre>
     * 接受委托的宠物不合要求
     * </pre>
     *
     * <code>RCE_Pet_MissionPetNotCorrect = 387;</code>
     */
    RCE_Pet_MissionPetNotCorrect(387),
    /**
     * <pre>
     * 合成碎片数量不足
     * </pre>
     *
     * <code>RCE_Pet_FragmentNotEnough = 388;</code>
     */
    RCE_Pet_FragmentNotEnough(388),
    /**
     * <pre>
     * 碎片未找到
     * </pre>
     *
     * <code>RCE_Pet_FragmentNotFound = 389;</code>
     */
    RCE_Pet_FragmentNotFound(389),
    /**
     * <pre>
     * 宠物状态：锁定中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusLock = 390;</code>
     */
    RCE_Pet_PetStatusLock(390),
    /**
     * <pre>
     * 宠物状态：宠物委托中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusMissionLock = 391;</code>
     */
    RCE_Pet_PetStatusMissionLock(391),
    /**
     * <pre>
     * 宠物状态：宠物矿区中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusMineLock = 392;</code>
     */
    RCE_Pet_PetStatusMineLock(392),
    /**
     * <pre>
     * 宠物状态：宠物备战中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusTeamLock = 393;</code>
     */
    RCE_Pet_PetStatusTeamLock(393),
    /**
     * <pre>
     * 宠物状态：宠物转换中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusChangeLock = 394;</code>
     */
    RCE_Pet_PetStatusChangeLock(394),
    /**
     * <pre>
     * 收集进度：不能领取奖励，奖励id/宠物收集进度错误
     * </pre>
     *
     * <code>RCE_Pet_PetColleciontRewardError = 395;</code>
     */
    RCE_Pet_PetColleciontRewardError(395),
    /**
     * <pre>
     * 宠物强化已到最大
     * </pre>
     *
     * <code>RCE_Pet_PetLvlMaxErroe = 396;</code>
     */
    RCE_Pet_PetLvlMaxErroe(396),
    /**
     * <pre>
     * 宠物符文已装备
     * </pre>
     *
     * <code>RCE_Pet_PetRuneAlreadyEquiped = 397;</code>
     */
    RCE_Pet_PetRuneAlreadyEquiped(397),
    /**
     * <pre>
     * 宠物背包容量不足
     * </pre>
     *
     * <code>RCE_Pet_PetBagNotEnough = 398;</code>
     */
    RCE_Pet_PetBagNotEnough(398),
    /**
     * <pre>
     * 符文背包容量不足
     * </pre>
     *
     * <code>RCE_Pet_RuneBagNotEnough = 399;</code>
     */
    RCE_Pet_RuneBagNotEnough(399),
    /**
     * <pre>
     *委托还未完成额
     * </pre>
     *
     * <code>RCE_Pet_MissionNotComplete = 400;</code>
     */
    RCE_Pet_MissionNotComplete(400),
    /**
     * <pre>
     *请求关卡配置为空
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointCfgIsNull = 401;</code>
     */
    RCE_MainLine_CheckPointCfgIsNull(401),
    /**
     * <pre>
     *请求关卡未解锁
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointIsLock = 402;</code>
     */
    RCE_MainLine_CheckPointIsLock(402),
    /**
     * <pre>
     *请求关卡不能战斗
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointCanNotBattle = 403;</code>
     */
    RCE_MainLine_CheckPointCanNotBattle(403),
    /**
     * <pre>
     *当前关卡闯关顺序错误
     * </pre>
     *
     * <code>RCE_MainLine_FightOrderError = 404;</code>
     */
    RCE_MainLine_FightOrderError(404),
    /**
     * <pre>
     *当前节点不可达
     * </pre>
     *
     * <code>RCE_MainLine_NodeCanNotReach = 405;</code>
     */
    RCE_MainLine_NodeCanNotReach(405),
    /**
     * <pre>
     *请求关卡与当前关卡不匹配
     * </pre>
     *
     * <code>RCE_MainLine_CurLvMissMatch = 406;</code>
     */
    RCE_MainLine_CurLvMissMatch(406),
    /**
     * <pre>
     *节点类型不能进行战斗
     * </pre>
     *
     * <code>RCE_MainLine_NodeTypeCanNotBattle = 407;</code>
     */
    RCE_MainLine_NodeTypeCanNotBattle(407),
    /**
     * <pre>
     *当前节点已经打过了
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeIsPassed = 408;</code>
     */
    RCE_MainLine_CurNodeIsPassed(408),
    /**
     * <pre>
     *玩家没有正在挂机的关卡
     * </pre>
     *
     * <code>RCE_MainLine_PlayerHaveNoOnhook = 409;</code>
     */
    RCE_MainLine_PlayerHaveNoOnhook(409),
    /**
     * <pre>
     *节点配置为空
     * </pre>
     *
     * <code>RCE_MainLine_NodeCfgIsNull = 410;</code>
     */
    RCE_MainLine_NodeCfgIsNull(410),
    /**
     * <pre>
     *当前节点未解锁
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeIsLock = 411;</code>
     */
    RCE_MainLine_CurNodeIsLock(411),
    /**
     * <pre>
     *当前节点还不能战斗
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeCanNotBattle = 412;</code>
     */
    RCE_MainLine_CurNodeCanNotBattle(412),
    /**
     * <pre>
     *当前关卡的密码还未输入完毕
     * </pre>
     *
     * <code>RCE_MainLine_PswNotInputFinish = 413;</code>
     */
    RCE_MainLine_PswNotInputFinish(413),
    /**
     * <pre>
     *关卡类型不匹配
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointTypeMissMatch = 414;</code>
     */
    RCE_MainLine_CheckPointTypeMissMatch(414),
    /**
     * <pre>
     *密码长度不匹配
     * </pre>
     *
     * <code>RCE_MainLine_PswLengthError = 415;</code>
     */
    RCE_MainLine_PswLengthError(415),
    /**
     * <pre>
     *输入非密码型关卡
     * </pre>
     *
     * <code>RCE_MainLine_InputNotPswNode = 416;</code>
     */
    RCE_MainLine_InputNotPswNode(416),
    /**
     * <pre>
     *重复输入相同密码
     * </pre>
     *
     * <code>RCE_MainLine_InputTheSamePsw = 417;</code>
     */
    RCE_MainLine_InputTheSamePsw(417),
    /**
     * <pre>
     *快速挂机次数当日已达上限
     * </pre>
     *
     * <code>RCE_MainLine_QuickOnHookLimit = 418;</code>
     */
    RCE_MainLine_QuickOnHookLimit(418),
    /**
     * <pre>
     *该主线阶段奖励已经领取过了
     * </pre>
     *
     * <code>RCE_MainLIne_ThisMainMissionRewardClaimed = 419;</code>
     */
    RCE_MainLIne_ThisMainMissionRewardClaimed(419),
    /**
     * <pre>
     *当前节点额外奖励已经领取过了
     * </pre>
     *
     * <code>RCE_MainLine_ThisAdditionRewardClaimed = 420;</code>
     */
    RCE_MainLine_ThisAdditionRewardClaimed(420),
    /**
     * <pre>
     *当前节点额外奖励无法领取
     * </pre>
     *
     * <code>RCE_MainLine_ThisAdditionRewardCanNotClaimed = 421;</code>
     */
    RCE_MainLine_ThisAdditionRewardCanNotClaimed(421),
    /**
     * <pre>
     *关键节点任务尚未完成
     * </pre>
     *
     * <code>RCE_MainLine_KeyNodeMissionNotComplete = 422;</code>
     */
    RCE_MainLine_KeyNodeMissionNotComplete(422),
    /**
     * <pre>
     *请先完成关键节点任务
     * </pre>
     *
     * <code>RCE_MainLine_CompleteKeyNodeMissionFirst = 423;</code>
     */
    RCE_MainLine_CompleteKeyNodeMissionFirst(423),
    /**
     * <pre>
     *===================巡逻队start   预留451 - 470===================
     * 当前位置不正确
     * </pre>
     *
     * <code>RCE_Patorl_ErrorLocation = 451;</code>
     */
    RCE_Patorl_ErrorLocation(451),
    /**
     * <pre>
     * 当前位置已被探索
     * </pre>
     *
     * <code>RCE_Patorl_Explored = 452;</code>
     */
    RCE_Patorl_Explored(452),
    /**
     * <pre>
     * 当前位置还未被探索
     * </pre>
     *
     * <code>RCE_Patrol_NotExplored = 453;</code>
     */
    RCE_Patrol_NotExplored(453),
    /**
     * <pre>
     * 探索事件不匹配
     * </pre>
     *
     * <code>RCE_Patorl_EventFail = 454;</code>
     */
    RCE_Patorl_EventFail(454),
    /**
     * <pre>
     * 当前已失败
     * </pre>
     *
     * <code>RCE_Patrol_FailureError = 455;</code>
     */
    RCE_Patrol_FailureError(455),
    /**
     * <pre>
     * 今日失败次数已达最大
     * </pre>
     *
     * <code>RCE_Patrol_DailyMaxFailure = 456;</code>
     */
    RCE_Patrol_DailyMaxFailure(456),
    /**
     * <pre>
     *贪婪值不满足
     * </pre>
     *
     * <code>RCE_Patrol_DissatisfyGreed = 457;</code>
     */
    RCE_Patrol_DissatisfyGreed(457),
    /**
     * <pre>
     *虚空秘境任务不存在
     * </pre>
     *
     * <code>RCE_Patrol_MissionNotExists = 458;</code>
     */
    RCE_Patrol_MissionNotExists(458),
    /**
     * <pre>
     *虚空秘境任务已结束
     * </pre>
     *
     * <code>RCE_Patrol_MissionEnd = 459;</code>
     */
    RCE_Patrol_MissionEnd(459),
    /**
     * <pre>
     *虚空秘境今天已打完
     * </pre>
     *
     * <code>RCE_Patrol_TodayAlreadyPlay = 460;</code>
     */
    RCE_Patrol_TodayAlreadyPlay(460),
    /**
     * <pre>
     *虚空秘境今天没打完
     * </pre>
     *
     * <code>RCE_Patrol_TodayNotFinishPlay = 461;</code>
     */
    RCE_Patrol_TodayNotFinishPlay(461),
    /**
     * <pre>
     *商品Id不存在
     * </pre>
     *
     * <code>RCE_Store_GoodsIdNotExist = 471;</code>
     */
    RCE_Store_GoodsIdNotExist(471),
    /**
     * <pre>
     *商品购买次数上限
     * </pre>
     *
     * <code>RCE_Store_GoodsBuyUpperLimit = 472;</code>
     */
    RCE_Store_GoodsBuyUpperLimit(472),
    /**
     * <pre>
     *刷新次数上限
     * </pre>
     *
     * <code>RCE_Store_RefreshTimesLimit = 473;</code>
     */
    RCE_Store_RefreshTimesLimit(473),
    /**
     * <pre>
     *该商店不支持手动刷新
     * </pre>
     *
     * <code>RCE_Store_UnsupportManualRefresh = 474;</code>
     */
    RCE_Store_UnsupportManualRefresh(474),
    /**
     * <pre>
     *===================目标系统start 预留491 - 510===================
     * </pre>
     *
     * <code>RCE_Target_MissionUnfinished = 491;</code>
     */
    RCE_Target_MissionUnfinished(491),
    /**
     * <pre>
     *任务奖励已经领取
     * </pre>
     *
     * <code>RCE_Target_MissionAlreadyClaim = 492;</code>
     */
    RCE_Target_MissionAlreadyClaim(492),
    /**
     * <pre>
     *任务配置Id不存在
     * </pre>
     *
     * <code>RCE_Target_MissionCfgIdNotExist = 493;</code>
     */
    RCE_Target_MissionCfgIdNotExist(493),
    /**
     * <pre>
     *任务未领取
     * </pre>
     *
     * <code>RCE_Target_MissionNotAccept = 494;</code>
     */
    RCE_Target_MissionNotAccept(494),
    /**
     * <pre>
     *===================勇气试炼start   预留511 - 530===================
     * </pre>
     *
     * <code>RCE_BraveChallenge_ChoosenDifficulty = 511;</code>
     */
    RCE_BraveChallenge_ChoosenDifficulty(511),
    /**
     * <pre>
     * 游戏已经结束
     * </pre>
     *
     * <code>RCE_BraveChallenge_AlreadyFinish = 512;</code>
     */
    RCE_BraveChallenge_AlreadyFinish(512),
    /**
     * <pre>
     *勇气试炼重生次数使用完
     * </pre>
     *
     * <code>RCE_BraveChallenge_RebornTimesUseUp = 513;</code>
     */
    RCE_BraveChallenge_RebornTimesUseUp(513),
    /**
     * <pre>
     *===================矿区争夺start   预留531 - 560===================
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundMineSvr = 531;</code>
     */
    RCE_MineFight_NotFoundMineSvr(531),
    /**
     * <pre>
     * 未找到战斗服
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundBattleSrv = 532;</code>
     */
    RCE_MineFight_NotFoundBattleSrv(532),
    /**
     * <pre>
     * 未找到矿
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundMine = 533;</code>
     */
    RCE_MineFight_NotFoundMine(533),
    /**
     * <pre>
     * 开采劵不足
     * </pre>
     *
     * <code>RCE_MineFight_NotEnoughtExploitScroll = 534;</code>
     */
    RCE_MineFight_NotEnoughtExploitScroll(534),
    /**
     * <pre>
     * 小队掠夺中
     * </pre>
     *
     * <code>RCE_MineFight_PetFormPlundering = 535;</code>
     */
    RCE_MineFight_PetFormPlundering(535),
    /**
     * <pre>
     * 小队开采中
     * </pre>
     *
     * <code>RCE_MineFight_PetFormExploiting = 536;</code>
     */
    RCE_MineFight_PetFormExploiting(536),
    /**
     * <pre>
     * 小队奖励未领取
     * </pre>
     *
     * <code>RCE_MineFight_NotClaimPetFormReward = 537;</code>
     */
    RCE_MineFight_NotClaimPetFormReward(537),
    /**
     * <pre>
     * 矿正在被掠夺
     * </pre>
     *
     * <code>RCE_MineFight_MineIsBattling = 538;</code>
     */
    RCE_MineFight_MineIsBattling(538),
    /**
     * <pre>
     * 小队宠物为空
     * </pre>
     *
     * <code>RCE_MineFight_EmptyPetForm = 539;</code>
     */
    RCE_MineFight_EmptyPetForm(539),
    /**
     * <pre>
     * 敌方已放弃掠夺
     * </pre>
     *
     * <code>RCE_MineFight_EnemyGiveUp = 540;</code>
     */
    RCE_MineFight_EnemyGiveUp(540),
    /**
     * <pre>
     * 正在进行其他战斗
     * </pre>
     *
     * <code>RCE_MineFight_PlayerBattling = 541;</code>
     */
    RCE_MineFight_PlayerBattling(541),
    /**
     * <pre>
     * 未进入矿区
     * </pre>
     *
     * <code>RCE_MineFight_NotInMineFight = 542;</code>
     */
    RCE_MineFight_NotInMineFight(542),
    /**
     * <pre>
     * 选择奖励类型错误
     * </pre>
     *
     * <code>RCE_MineFight_ChooseRewardErrorIndex = 543;</code>
     */
    RCE_MineFight_ChooseRewardErrorIndex(543),
    /**
     * <pre>
     * 该矿未占领
     * </pre>
     *
     * <code>RCE_MineFight_NotOccupiedMine = 544;</code>
     */
    RCE_MineFight_NotOccupiedMine(544),
    /**
     * <pre>
     * 矿状态错误
     * </pre>
     *
     * <code>RCE_MineFight_ErrorMineState = 545;</code>
     */
    RCE_MineFight_ErrorMineState(545),
    /**
     * <pre>
     * 奖励已被领取
     * </pre>
     *
     * <code>RCE_MineFight_ClaimedReward = 546;</code>
     */
    RCE_MineFight_ClaimedReward(546),
    /**
     * <pre>
     * 未达到等级要求
     * </pre>
     *
     * <code>RCE_MineFight_LevelLimit = 547;</code>
     */
    RCE_MineFight_LevelLimit(547),
    /**
     * <pre>
     * 开采劵配置错误
     * </pre>
     *
     * <code>RCE_MineFight_ScrollPriceError = 548;</code>
     */
    RCE_MineFight_ScrollPriceError(548),
    /**
     * <pre>
     * 已经有好友助阵
     * </pre>
     *
     * <code>RCE_MineFight_FriendHelping = 549;</code>
     */
    RCE_MineFight_FriendHelping(549),
    /**
     * <pre>
     * 好友未设置助阵阵容
     * </pre>
     *
     * <code>RCE_MineFight_EmptyFriendPetForm = 550;</code>
     */
    RCE_MineFight_EmptyFriendPetForm(550),
    /**
     * <pre>
     * 好友正在帮助其他玩家
     * </pre>
     *
     * <code>RCE_MineFight_FriendPetFormLocked = 551;</code>
     */
    RCE_MineFight_FriendPetFormLocked(551),
    /**
     * <pre>
     * 好友拒绝帮助
     * </pre>
     *
     * <code>RCE_MineFight_FriendRefused = 552;</code>
     */
    RCE_MineFight_FriendRefused(552),
    /**
     * <pre>
     * 已经发送过申请了
     * </pre>
     *
     * <code>RCE_MineFight_AppliedFriendHelp = 553;</code>
     */
    RCE_MineFight_AppliedFriendHelp(553),
    /**
     * <pre>
     * 未找到小队信息
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundPetForm = 554;</code>
     */
    RCE_MineFight_NotFoundPetForm(554),
    /**
     * <pre>
     * 战斗中无法退出
     * </pre>
     *
     * <code>RCE_MineFight_ExitFailedForBattling = 555;</code>
     */
    RCE_MineFight_ExitFailedForBattling(555),
    /**
     * <pre>
     * 奖励对象已过期
     * </pre>
     *
     * <code>RCE_MineFight_BeyondGiftExpire = 556;</code>
     */
    RCE_MineFight_BeyondGiftExpire(556),
    /**
     * <pre>
     * 该好友正在帮助你，做人要厚道
     * </pre>
     *
     * <code>RCE_MineFight_FriendIsHelpingYou = 557;</code>
     */
    RCE_MineFight_FriendIsHelpingYou(557),
    /**
     * <pre>
     * 只能助阵一个好友
     * </pre>
     *
     * <code>RCE_MineFight_CanNotHelpMultiFriend = 558;</code>
     */
    RCE_MineFight_CanNotHelpMultiFriend(558),
    /**
     * <pre>
     * 不能掠夺正在助阵的好友
     * </pre>
     *
     * <code>RCE_MineFight_CannotOccupyHelpingFriend = 559;</code>
     */
    RCE_MineFight_CannotOccupyHelpingFriend(559),
    /**
     * <pre>
     *===================远古召唤start   预留561 - 580===================
     * </pre>
     *
     * <code>RCE_AncientCall_PetInTeam = 561;</code>
     */
    RCE_AncientCall_PetInTeam(561),
    /**
     * <pre>
     *不支持的宠物转化类型
     * </pre>
     *
     * <code>RCE_PetTransfer_UnsupportedTransferType = 562;</code>
     */
    RCE_PetTransfer_UnsupportedTransferType(562),
    /**
     * <pre>
     *当期没有宠物可以转化
     * </pre>
     *
     * <code>RCE_PetTramsfer_HavaNoPetInTrsnsfer = 563;</code>
     */
    RCE_PetTramsfer_HavaNoPetInTrsnsfer(563),
    /**
     * <pre>
     *===================资源副本  start 预留581 - 600===================
     * </pre>
     *
     * <code>RCE_ResCopy_ChallengeTimesLimit = 581;</code>
     */
    RCE_ResCopy_ChallengeTimesLimit(581),
    /**
     * <pre>
     *购买次数上限
     * </pre>
     *
     * <code>RCE_ResCopy_BuyTimesLimit = 582;</code>
     */
    RCE_ResCopy_BuyTimesLimit(582),
    /**
     * <pre>
     *挑战次数上限
     * </pre>
     *
     * <code>RCE_ResCopy_FightIsLimit = 583;</code>
     */
    RCE_ResCopy_FightIsLimit(583),
    /**
     * <pre>
     *关卡不能挑战
     * </pre>
     *
     * <code>RCE_ResCopy_IndexCanNotFight = 584;</code>
     */
    RCE_ResCopy_IndexCanNotFight(584),
    /**
     * <pre>
     *活动未开启
     * </pre>
     *
     * <code>RCE_Activity_NotOpen = 601;</code>
     */
    RCE_Activity_NotOpen(601),
    /**
     * <pre>
     *活动货币不足
     * </pre>
     *
     * <code>RCE_Activity_CurrencyNotEnough = 602;</code>
     */
    RCE_Activity_CurrencyNotEnough(602),
    /**
     * <pre>
     *活动已经超过时间
     * </pre>
     *
     * <code>RCE_Activity_MissionOutOfTime = 603;</code>
     */
    RCE_Activity_MissionOutOfTime(603),
    /**
     * <pre>
     *当前不能领取奖励
     * </pre>
     *
     * <code>RCE_Activity_MissionCanNotClaim = 604;</code>
     */
    RCE_Activity_MissionCanNotClaim(604),
    /**
     * <pre>
     *奖励已领取
     * </pre>
     *
     * <code>RCE_Activity_RewardAlreadyClaim = 605;</code>
     */
    RCE_Activity_RewardAlreadyClaim(605),
    /**
     * <pre>
     *重复签到
     * </pre>
     *
     * <code>RCE_Activity_RepeatedSignIn = 606;</code>
     */
    RCE_Activity_RepeatedSignIn(606),
    /**
     * <pre>
     *兑换已达上限
     * </pre>
     *
     * <code>RCE_Activity_ExTimesLimit = 607;</code>
     */
    RCE_Activity_ExTimesLimit(607),
    /**
     * <pre>
     *不满足兑换条件
     * </pre>
     *
     * <code>RCE_Activity_DissatisfyAddition = 608;</code>
     */
    RCE_Activity_DissatisfyAddition(608),
    /**
     * <pre>
     *当前任务已过期
     * </pre>
     *
     * <code>RCE_Activity_MissionIsExpire = 609;</code>
     */
    RCE_Activity_MissionIsExpire(609),
    /**
     * <pre>
     *积分不足
     * </pre>
     *
     * <code>RCE_Activity_PointNotEnough = 610;</code>
     */
    RCE_Activity_PointNotEnough(610),
    /**
     * <pre>
     *重复购买
     * </pre>
     *
     * <code>RCE_Activity_RepeatedBuy = 611;</code>
     */
    RCE_Activity_RepeatedBuy(611),
    /**
     * <pre>
     * 符文已锁定
     * </pre>
     *
     * <code>RCE_Pet_PetRuneLock = 651;</code>
     */
    RCE_Pet_PetRuneLock(651),
    /**
     * <pre>
     * 符文升级：材料符文错误
     * </pre>
     *
     * <code>RCE_Pet_RuneMaterailRuneError = 652;</code>
     */
    RCE_Pet_RuneMaterailRuneError(652),
    /**
     * <pre>
     * 符文升级：等级已满
     * </pre>
     *
     * <code>RCE_Pet_RuneLvlMaxError = 653;</code>
     */
    RCE_Pet_RuneLvlMaxError(653),
    /**
     * <pre>
     *宠物宝石不存在
     * </pre>
     *
     * <code>RCE_Pet_GemNotExist = 654;</code>
     */
    RCE_Pet_GemNotExist(654),
    /**
     * <pre>
     *宠物宝石已锁定
     * </pre>
     *
     * <code>RCE_Pet_PetGemLock = 655;</code>
     */
    RCE_Pet_PetGemLock(655),
    /**
     * <pre>
     *宠物宝石已装备
     * </pre>
     *
     * <code>RCE_Pet_PetGemAlreadyEquip = 656;</code>
     */
    RCE_Pet_PetGemAlreadyEquip(656),
    /**
     * <pre>
     *排行榜宠物不存在或被放生
     * </pre>
     *
     * <code>RCE_Pet_RankingPetNotExist = 657;</code>
     */
    RCE_Pet_RankingPetNotExist(657),
    /**
     * <pre>
     *当前宠物不符合条件
     * </pre>
     *
     * <code>RCE_Pet_NotMathCondition = 658;</code>
     */
    RCE_Pet_NotMathCondition(658),
    /**
     * <pre>
     *宠物进化到最大等级
     * </pre>
     *
     * <code>RCE_Pet_MaxEvolveLvLimit = 659;</code>
     */
    RCE_Pet_MaxEvolveLvLimit(659),
    /**
     * <pre>
     *没有可完成的宠物委托任务
     * </pre>
     *
     * <code>RCE_Pet_NoCanCompleteMission = 660;</code>
     */
    RCE_Pet_NoCanCompleteMission(660),
    /**
     * <pre>
     *================== 激活码 start  700 - 750========================
     * </pre>
     *
     * <code>RCE_ActiveCode_LoseEfficacy = 701;</code>
     */
    RCE_ActiveCode_LoseEfficacy(701),
    /**
     * <pre>
     *激活码已被使用
     * </pre>
     *
     * <code>RCE_ActiveCode_Used = 702;</code>
     */
    RCE_ActiveCode_Used(702),
    /**
     * <pre>
     *激活码错误
     * </pre>
     *
     * <code>RCE_ActiveCode_Error = 703;</code>
     */
    RCE_ActiveCode_Error(703),
    /**
     * <pre>
     *激活码使用次数上限
     * </pre>
     *
     * <code>RCE_ActiveCode_UpperLimit = 704;</code>
     */
    RCE_ActiveCode_UpperLimit(704),
    /**
     * <pre>
     *使用过同类型的激活码
     * </pre>
     *
     * <code>RCE_ActiveCode_UseSameTypeCode = 705;</code>
     */
    RCE_ActiveCode_UseSameTypeCode(705),
    /**
     * <pre>
     *================== 新手引导 start  751 - 800==========================
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedName = 751;</code>
     */
    RCE_NewBee_RepeatedName(751),
    /**
     * <pre>
     *新手引导领取宠物
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedChoicePet = 752;</code>
     */
    RCE_NewBee_RepeatedChoicePet(752),
    /**
     * <pre>
     *新手引导重复抽卡
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedDrawCard = 753;</code>
     */
    RCE_NewBee_RepeatedDrawCard(753),
    /**
     * <pre>
     *新手引导迷雾森林奖励配置错误
     * </pre>
     *
     * <code>RCE_NewBee_MistRewardCfgError = 754;</code>
     */
    RCE_NewBee_MistRewardCfgError(754),
    /**
     * <pre>
     *新手引导已经领取过迷雾森林宝箱
     * </pre>
     *
     * <code>RCE_NewBee_ClaimedMistNewbeeReward = 755;</code>
     */
    RCE_NewBee_ClaimedMistNewbeeReward(755),
    /**
     * <pre>
     *================== 竞技场 start  801 - 850==========================
     * </pre>
     *
     * <code>RCE_Arena_ChallengeItemNotEnough = 801;</code>
     */
    RCE_Arena_ChallengeItemNotEnough(801),
    /**
     * <pre>
     *挑战道具持有上限
     * </pre>
     *
     * <code>RCE_Arena_ChallengeItemOwnedCap = 802;</code>
     */
    RCE_Arena_ChallengeItemOwnedCap(802),
    /**
     * <pre>
     *无法挑战
     * </pre>
     *
     * <code>RCE_Arena_OpponentCanNotBattle = 803;</code>
     */
    RCE_Arena_OpponentCanNotBattle(803),
    /**
     * <pre>
     *分配房间失败
     * </pre>
     *
     * <code>RCE_Arena_AllocationRoomFailed = 804;</code>
     */
    RCE_Arena_AllocationRoomFailed(804),
    /**
     * <pre>
     *玩家不存在
     * </pre>
     *
     * <code>RCE_Arena_PlayerIsNotExist = 805;</code>
     */
    RCE_Arena_PlayerIsNotExist(805),
    /**
     * <pre>
     *未找到竞技场服务器
     * </pre>
     *
     * <code>RCE_Arena_CanNotFindServer = 806;</code>
     */
    RCE_Arena_CanNotFindServer(806),
    /**
     * <pre>
     *================== boss战活动 start  851 - 860==========================
     * </pre>
     *
     * <code>RCE_ActivityBoss_Closed = 851;</code>
     */
    RCE_ActivityBoss_Closed(851),
    /**
     * <pre>
     * 今日次数已用尽
     * </pre>
     *
     * <code>RCE_ActivityBoss_UseUpTime = 852;</code>
     */
    RCE_ActivityBoss_UseUpTime(852),
    /**
     * <pre>
     *刷新过于频繁
     * </pre>
     *
     * <code>RCE_Arena_RefreshFrequently = 853;</code>
     */
    RCE_Arena_RefreshFrequently(853),
    /**
     * <pre>
     *不能再购买
     * </pre>
     *
     * <code>RCE_ActivityBoss_CanNotBuyMore = 854;</code>
     */
    RCE_ActivityBoss_CanNotBuyMore(854),
    /**
     * <pre>
     * </pre>
     *
     * <code>RCE_ActivityBoss_PlayerLvLimit = 855;</code>
     */
    RCE_ActivityBoss_PlayerLvLimit(855),
    /**
     * <pre>
     *================== 通用评论 start  861 - 870==========================
     * </pre>
     *
     * <code>RCE_Comment_NotFoundComment = 861;</code>
     */
    RCE_Comment_NotFoundComment(861),
    /**
     * <pre>
     * 类型参数错误
     * </pre>
     *
     * <code>RCE_Comment_ErrorParam = 862;</code>
     */
    RCE_Comment_ErrorParam(862),
    /**
     * <pre>
     * 评论内容超过最大长度
     * </pre>
     *
     * <code>RCE_Comment_ErrorLength = 863;</code>
     */
    RCE_Comment_ErrorLength(863),
    /**
     * <pre>
     * 评论内容为空
     * </pre>
     *
     * <code>RCE_Comment_EmptyContent = 864;</code>
     */
    RCE_Comment_EmptyContent(864),
    /**
     * <pre>
     * 评论包含非法字符
     * </pre>
     *
     * <code>RCE_Comment_InvalidWord = 865;</code>
     */
    RCE_Comment_InvalidWord(865),
    /**
     * <pre>
     * 已点赞，不可重复操作
     * </pre>
     *
     * <code>RCE_Comment_AlreadyLiked = 866;</code>
     */
    RCE_Comment_AlreadyLiked(866),
    /**
     * <pre>
     * 已评论，不可重复操作
     * </pre>
     *
     * <code>RCE_Comment_AlreadyComment = 867;</code>
     */
    RCE_Comment_AlreadyComment(867),
    /**
     * <pre>
     *================== 购买月卡 start  871 - 880==========================
     * </pre>
     *
     * <code>RCE_MonthCard_NotFound = 871;</code>
     */
    RCE_MonthCard_NotFound(871),
    /**
     * <pre>
     * 超过购买限制
     * </pre>
     *
     * <code>RCE_MonthCard_LimitBuy = 872;</code>
     */
    RCE_MonthCard_LimitBuy(872),
    /**
     * <pre>
     *月卡已激活
     * </pre>
     *
     * <code>RCE_MonthCard_AlreadyActive = 873;</code>
     */
    RCE_MonthCard_AlreadyActive(873),
    /**
     * <pre>
     *================== 购买功勋 start  881 - 900==========================
     * </pre>
     *
     * <code>RCE_Feats_NotEnough = 881;</code>
     */
    RCE_Feats_NotEnough(881),
    /**
     * <pre>
     * 奖励已领取
     * </pre>
     *
     * <code>RCE_Feats_RewardAlreadyClaim = 882;</code>
     */
    RCE_Feats_RewardAlreadyClaim(882),
    /**
     * <pre>
     * 超过购买限制
     * </pre>
     *
     * <code>RCE_Feats_HasBuyAdvancedFeats = 883;</code>
     */
    RCE_Feats_HasBuyAdvancedFeats(883),
    /**
     * <pre>
     *功勋已激活
     * </pre>
     *
     * <code>RCE_Feats_AlreadyActive = 884;</code>
     */
    RCE_Feats_AlreadyActive(884),
    /**
     * <pre>
     *================== 充值 start  901 - 920==========================
     * </pre>
     *
     * <code>RCE_Recharge_Success = 902;</code>
     */
    RCE_Recharge_Success(902),
    /**
     * <pre>
     *================== 版署 start  921 - 950==========================
     * </pre>
     *
     * <code>RCE_BanShu_OutOfLimit = 921;</code>
     */
    RCE_BanShu_OutOfLimit(921),
    /**
     * <pre>
     *================== 成长基金 start  951 - 960==========================
     * </pre>
     *
     * <code>RCE_GrowthFund_NotBuy = 951;</code>
     */
    RCE_GrowthFund_NotBuy(951),
    /**
     * <pre>
     *================== 外接广告 start  961 - 970==========================
     * </pre>
     *
     * <code>RCE_AdsBonus_NoBonusTimes = 961;</code>
     */
    RCE_AdsBonus_NoBonusTimes(961),
    /**
     * <pre>
     *广告次数已用完
     * </pre>
     *
     * <code>RCE_AdsBonus_NoWatchAdsTimes = 962;</code>
     */
    RCE_AdsBonus_NoWatchAdsTimes(962),
    /**
     * <pre>
     *非奖励玩家
     * </pre>
     *
     * <code>RCE_AdsBonus_InvalidPlayer = 963;</code>
     */
    RCE_AdsBonus_InvalidPlayer(963),
    /**
     * <pre>
     *================== 成长基金 start  971 - 980==========================
     * </pre>
     *
     * <code>RCE_TimeLimitGift_NotActive = 964;</code>
     */
    RCE_TimeLimitGift_NotActive(964),
    /**
     * <pre>
     *================== 举报 start  981 - 1000==========================
     * </pre>
     *
     * <code>RCE_Report_Repeated = 981;</code>
     */
    RCE_Report_Repeated(981),
    /**
     * <pre>
     *举报次数已达上限
     * </pre>
     *
     * <code>RCE_Report_TimesLimit = 982;</code>
     */
    RCE_Report_TimesLimit(982),
    /**
     * <pre>
     *禁评
     * </pre>
     *
     * <code>RCE_Ban_Comment = 983;</code>
     */
    RCE_Ban_Comment(983),
    /**
     * <pre>
     *================== 统计/埋点 start  1101 - 1110==========================
     * </pre>
     *
     * <code>RCE_UploadTooFast = 1101;</code>
     */
    RCE_UploadTooFast(1101),
    /**
     * <pre>
     *==================玩家技能 start  1111 - 1130==========================
     * </pre>
     *
     * <code>RCE_Player_SkillMaxLvError = 1111;</code>
     */
    RCE_Player_SkillMaxLvError(1111),
    /**
     * <pre>
     *玩家技能星级上限
     * </pre>
     *
     * <code>RCE_Player_SkillMaxStarError = 1112;</code>
     */
    RCE_Player_SkillMaxStarError(1112),
    /**
     * <pre>
     *玩家技能星级上限
     * </pre>
     *
     * <code>RCE_Player_SkillNotExists = 1113;</code>
     */
    RCE_Player_SkillNotExists(1113),
    /**
     * <pre>
     *玩家技能未激活
     * </pre>
     *
     * <code>RCE_Player_SkillNotActive = 1114;</code>
     */
    RCE_Player_SkillNotActive(1114),
    /**
     * <pre>
     *================== 魔灵降临 start  1131 - 1150==========================
     * </pre>
     *
     * <code>RCE_DemonDescends_RechargeItemAlreadyClaimed = 1131;</code>
     */
    RCE_DemonDescends_RechargeItemAlreadyClaimed(1131),
    /**
     * <pre>
     *魔灵降临道具购买上限
     * </pre>
     *
     * <code>RCE_DemonDescends_ItemBuyLimit = 1132;</code>
     */
    RCE_DemonDescends_ItemBuyLimit(1132),
    /**
     * <pre>
     *================== 魔灵降临 start  1151 - 1170========================
     * </pre>
     *
     * <code>RCE_Hades_RemainNoWorshipTimes = 1151;</code>
     */
    RCE_Hades_RemainNoWorshipTimes(1151),
    /**
     * <pre>
     *================== 新称号系统 start  1171 - 1190========================
     * </pre>
     *
     * <code>RCE_NewTitle_Inactivated = 1171;</code>
     */
    RCE_NewTitle_Inactivated(1171),
    /**
     * <pre>
     *称号已过期
     * </pre>
     *
     * <code>RCE_NewTitle_Expired = 1172;</code>
     */
    RCE_NewTitle_Expired(1172),
    /**
     * <pre>
     *称号未装备
     * </pre>
     *
     * <code>RCE_NewTitle_NotEquip = 1173;</code>
     */
    RCE_NewTitle_NotEquip(1173),
    /**
     * <pre>
     *================== 荣耀之路 start  1191 - 1250==========================
     * </pre>
     *
     * <code>RCE_GloryRoad_RedBag_OutOfTime = 1191;</code>
     */
    RCE_GloryRoad_RedBag_OutOfTime(1191),
    /**
     * <pre>
     *红包已经领取过了
     * </pre>
     *
     * <code>RCE_GloryRoad_RedBag_AlreadyClaimed = 1192;</code>
     */
    RCE_GloryRoad_RedBag_AlreadyClaimed(1192),
    /**
     * <pre>
     *不在竞猜时间段内
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_OutOfTime = 1193;</code>
     */
    RCE_GloryRoad_Quiz_OutOfTime(1193),
    /**
     * <pre>
     *已经竞猜过了
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_AlreadySupported = 1194;</code>
     */
    RCE_GloryRoad_Quiz_AlreadySupported(1194),
    /**
     * <pre>
     *非法评论
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_IllegalComment = 1195;</code>
     */
    RCE_GloryRoad_Quiz_IllegalComment(1195),
    /**
     * <pre>
     *评论过长
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_CommentTooLong = 1196;</code>
     */
    RCE_GloryRoad_Quiz_CommentTooLong(1196),
    /**
     * <pre>
     *评论过于频繁
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_CommentFrequently = 1197;</code>
     */
    RCE_GloryRoad_Quiz_CommentFrequently(1197),
    /**
     * <pre>
     *确认战斗超时
     * </pre>
     *
     * <code>RCE_GloryRoad_EnsureOutOfTime = 1198;</code>
     */
    RCE_GloryRoad_EnsureOutOfTime(1198),
    /**
     * <pre>
     *================== 远征战斗 start  1251 - 1280==========================
     * </pre>
     *
     * <code>RCE_TheWar_NotJoinTheWar = 1251;</code>
     */
    RCE_TheWar_NotJoinTheWar(1251),
    /**
     * <pre>
     *远征未开启
     * </pre>
     *
     * <code>RCE_TheWar_NotOpen = 1252;</code>
     */
    RCE_TheWar_NotOpen(1252),
    /**
     * <pre>
     *远征已结束
     * </pre>
     *
     * <code>RCE_TheWar_RoomEnded = 1253;</code>
     */
    RCE_TheWar_RoomEnded(1253),
    /**
     * <pre>
     *未找到远征地图
     * </pre>
     *
     * <code>RCE_TheWar_NotFoundMap = 1254;</code>
     */
    RCE_TheWar_NotFoundMap(1254),
    /**
     * <pre>
     *正在攻击其他格子
     * </pre>
     *
     * <code>RCE_TheWar_AttackOtherGrid = 1255;</code>
     */
    RCE_TheWar_AttackOtherGrid(1255),
    /**
     * <pre>
     *附加没有友方占领格子
     * </pre>
     *
     * <code>RCE_TheWar_NotFoundAroundTeamGrid = 1256;</code>
     */
    RCE_TheWar_NotFoundAroundTeamGrid(1256),
    /**
     * <pre>
     *阻挡格子无法攻击
     * </pre>
     *
     * <code>RCE_TheWar_BlockGrid = 1257;</code>
     */
    RCE_TheWar_BlockGrid(1257),
    /**
     * <pre>
     *职位配置未找到，无法获取最大占领格子数
     * </pre>
     *
     * <code>RCE_TheWar_JobTileCfgError = 1258;</code>
     */
    RCE_TheWar_JobTileCfgError(1258),
    /**
     * <pre>
     *占领格子数达到上限
     * </pre>
     *
     * <code>RCE_TheWar_LimitOccupyGridNum = 1259;</code>
     */
    RCE_TheWar_LimitOccupyGridNum(1259),
    /**
     * <pre>
     *该格子是出生点
     * </pre>
     *
     * <code>RCE_TheWar_TargetGridIsPlayerSpawn = 1260;</code>
     */
    RCE_TheWar_TargetGridIsPlayerSpawn(1260),
    /**
     * <pre>
     *其他玩家正在攻击该格子
     * </pre>
     *
     * <code>RCE_TheWar_OtherPlayerAttacking = 1261;</code>
     */
    RCE_TheWar_OtherPlayerAttacking(1261),
    /**
     * <pre>
     *占领冷却中
     * </pre>
     *
     * <code>RCE_TheWar_OccupyProtecting = 1262;</code>
     */
    RCE_TheWar_OccupyProtecting(1262),
    /**
     * <pre>
     *队友格子无法占领
     * </pre>
     *
     * <code>RCE_TheWar_TeamGrid = 1263;</code>
     */
    RCE_TheWar_TeamGrid(1263),
    /**
     * <pre>
     *体力不足
     * </pre>
     *
     * <code>RCE_TheWar_StaminaNotEnough = 1264;</code>
     */
    RCE_TheWar_StaminaNotEnough(1264),
    /**
     * <pre>
     *战斗队伍为空
     * </pre>
     *
     * <code>RCE_TheWar_EmptyPetTeam = 1265;</code>
     */
    RCE_TheWar_EmptyPetTeam(1265),
    /**
     * <pre>
     *非法格子
     * </pre>
     *
     * <code>RCE_TheWar_InvalidGrid = 1266;</code>
     */
    RCE_TheWar_InvalidGrid(1266),
    /**
     * <pre>
     *未找到远征服务器
     * </pre>
     *
     * <code>RCE_TheWar_NotFoundWarServer = 1280;</code>
     */
    RCE_TheWar_NotFoundWarServer(1280),
    /**
     * <pre>
     *================== 大富翁 start  1300 - 1320==========================
     * </pre>
     *
     * <code>RCE_RichMan_NotEnoughDice = 1300;</code>
     */
    RCE_RichMan_NotEnoughDice(1300),
    /**
     * <pre>
     *================== 大富翁 start  1321 - 1340==========================
     * </pre>
     *
     * <code>RCE_Inscription_GemLvNotEnough = 132;</code>
     */
    RCE_Inscription_GemLvNotEnough(132),
    /**
     * <pre>
     *材料不存在
     * </pre>
     *
     * <code>RCE_Inscription_MaterialNotExists = 133;</code>
     */
    RCE_Inscription_MaterialNotExists(133),
    /**
     * <pre>
     *================== 战斗补充 start  1321 - 1350=======================
     * </pre>
     *
     * <code>RCE_BattlePlayBack_VersionMissMatching = 1321;</code>
     */
    RCE_BattlePlayBack_VersionMissMatching(1321),
    /**
     * <pre>
     *战斗中
     * </pre>
     *
     * <code>RCE_Battle_Batting = 1322;</code>
     */
    RCE_Battle_Batting(1322),
    /**
     * <pre>
     *无法挑战自己
     * </pre>
     *
     * <code>RCE_Battle_CanNotChallengeSelf = 1323;</code>
     */
    RCE_Battle_CanNotChallengeSelf(1323),
    /**
     * <pre>
     *================== 匹配竞技场 start  1351 - 1400=====================
     * </pre>
     *
     * <code>RCE_MatchArena_CanNotCancelMatch = 1351;</code>
     */
    RCE_MatchArena_CanNotCancelMatch(1351),
    /**
     * <pre>
     *不在匹配状态
     * </pre>
     *
     * <code>RCE_MatchArena_NotInMatchStatus = 1352;</code>
     */
    RCE_MatchArena_NotInMatchStatus(1352),
    /**
     * <pre>
     *玩家数据不存在
     * </pre>
     *
     * <code>RCE_MatchArena_PlayerInfoNotFount = 1353;</code>
     */
    RCE_MatchArena_PlayerInfoNotFount(1353),
    /**
     * <pre>
     *更新数据失败
     * </pre>
     *
     * <code>RCE_MatchArena_UpdateDataFailed = 1354;</code>
     */
    RCE_MatchArena_UpdateDataFailed(1354),
    /**
     * <pre>
     *重复匹配
     * </pre>
     *
     * <code>RCE_MatchArena_RepeatedMatching = 1355;</code>
     */
    RCE_MatchArena_RepeatedMatching(1355),
    /**
     * <pre>
     *战斗结束
     * </pre>
     *
     * <code>RCE_MatchArenaLT_BattleEnd = 1356;</code>
     */
    RCE_MatchArenaLT_BattleEnd(1356),
    /**
     * <pre>
     *段位不匹配
     * </pre>
     *
     * <code>RCE_MatchArenaLT_STAGE_NOTEQ = 1357;</code>
     */
    RCE_MatchArenaLT_STAGE_NOTEQ(1357),
    /**
     * <pre>
     *擂台战斗中
     * </pre>
     *
     * <code>RCE_MatchArenaLT_NOT_WAIT = 1358;</code>
     */
    RCE_MatchArenaLT_NOT_WAIT(1358),
    /**
     * <pre>
     *您已经不在该擂台
     * </pre>
     *
     * <code>RCE_MatchArenaLT_NOT_MYLT = 1359;</code>
     */
    RCE_MatchArenaLT_NOT_MYLT(1359),
    /**
     * <pre>
     *擂台非战斗中
     * </pre>
     *
     * <code>RCE_MatchArenaLT_NOT_FIGHT = 1360;</code>
     */
    RCE_MatchArenaLT_NOT_FIGHT(1360),
    /**
     * <pre>
     *重复竞猜
     * </pre>
     *
     * <code>RCE_MatchArenaLT_RPEI_GUESS = 1361;</code>
     */
    RCE_MatchArenaLT_RPEI_GUESS(1361),
    /**
     * <pre>
     *不可以挑战自己
     * </pre>
     *
     * <code>RCE_MatchArenaLT_NOATTMY = 1362;</code>
     */
    RCE_MatchArenaLT_NOATTMY(1362),
    /**
     * <pre>
     *同时只能参与一个擂台
     * </pre>
     *
     * <code>RCE_MatchArenaLT_RPT = 1363;</code>
     */
    RCE_MatchArenaLT_RPT(1363),
    /**
     * <pre>
     *擂台玩法中
     * </pre>
     *
     * <code>RCE_MatchArenaLT_LTING = 1364;</code>
     */
    RCE_MatchArenaLT_LTING(1364),
    /**
     * <pre>
     *玩家已加入匹配竞技场匹配中
     * </pre>
     *
     * <code>RCE_MatchArena_PlayerIsMatching = 1365;</code>
     */
    RCE_MatchArena_PlayerIsMatching(1365),
    /**
     * <pre>
     *该擂台已经不存在
     * </pre>
     *
     * <code>RCE_CrossArena_TableNull = 1366;</code>
     */
    RCE_CrossArena_TableNull(1366),
    /**
     * <pre>
     *该擂台已经有人
     * </pre>
     *
     * <code>RCE_CrossArena_TableHavep = 1367;</code>
     */
    RCE_CrossArena_TableHavep(1367),
    /**
     * <pre>
     *该擂台已经停止
     * </pre>
     *
     * <code>RCE_CrossArena_TableStop = 1368;</code>
     */
    RCE_CrossArena_TableStop(1368),
    /**
     * <pre>
     *擂台没有擂主
     * </pre>
     *
     * <code>RCE_CrossArena_TableNotDef = 1369;</code>
     */
    RCE_CrossArena_TableNotDef(1369),
    /**
     * <pre>
     *擂台队列已满
     * </pre>
     *
     * <code>RCE_CrossArena_TableQueueMax = 1370;</code>
     */
    RCE_CrossArena_TableQueueMax(1370),
    /**
     * <pre>
     *重复竞猜
     * </pre>
     *
     * <code>RCE_CrossArena_RPEI_GUESS = 1371;</code>
     */
    RCE_CrossArena_RPEI_GUESS(1371),
    /**
     * <pre>
     *擂台非战斗中
     * </pre>
     *
     * <code>RCE_CrossArena_NO_Fighting = 1372;</code>
     */
    RCE_CrossArena_NO_Fighting(1372),
    /**
     * <pre>
     *擂台非等待中
     * </pre>
     *
     * <code>RCE_CrossArena_NO_WAIT = 1373;</code>
     */
    RCE_CrossArena_NO_WAIT(1373),
    /**
     * <pre>
     *擂台战斗中
     * </pre>
     *
     * <code>RCE_CrossArena_Fighting = 1374;</code>
     */
    RCE_CrossArena_Fighting(1374),
    /**
     * <pre>
     *不可以挑战自己
     * </pre>
     *
     * <code>RCE_CrossArena_NOATTMY = 1375;</code>
     */
    RCE_CrossArena_NOATTMY(1375),
    /**
     * <pre>
     *等级不足
     * </pre>
     *
     * <code>RCE_CrossArena_LVNOT = 1376;</code>
     */
    RCE_CrossArena_LVNOT(1376),
    /**
     * <pre>
     *请先选择道场
     * </pre>
     *
     * <code>RCE_CrossArena_CHOOSE = 1377;</code>
     */
    RCE_CrossArena_CHOOSE(1377),
    /**
     * <pre>
     *目标离线
     * </pre>
     *
     * <code>RCE_CrossArena_OFFLINE = 1378;</code>
     */
    RCE_CrossArena_OFFLINE(1378),
    /**
     * <pre>
     *挑战事件已结束
     * </pre>
     *
     * <code>RCE_CrossArena_EVENT_END = 1379;</code>
     */
    RCE_CrossArena_EVENT_END(1379),
    /**
     * <pre>
     *道场等级不匹配
     * </pre>
     *
     * <code>RCE_CrossArena_SCENENEP = 1380;</code>
     */
    RCE_CrossArena_SCENENEP(1380),
    /**
     * <pre>
     *以在该队列
     * </pre>
     *
     * <code>RCE_CrossArena_ATQUE = 1381;</code>
     */
    RCE_CrossArena_ATQUE(1381),
    /**
     * <pre>
     *以在擂台上
     * </pre>
     *
     * <code>RCE_CrossArena_ATTABLE = 1382;</code>
     */
    RCE_CrossArena_ATTABLE(1382),
    /**
     * <pre>
     *该战斗禁止观战
     * </pre>
     *
     * <code>RCE_CrossArena_AIBATTLE = 1383;</code>
     */
    RCE_CrossArena_AIBATTLE(1383),
    /**
     * <pre>
     *擂台赛天数不够,无法开启该功能
     * </pre>
     *
     * <code>RCE_CrossArena_TIMELOCK = 1384;</code>
     */
    RCE_CrossArena_TIMELOCK(1384),
    /**
     * <pre>
     *未到领取时间
     * </pre>
     *
     * <code>RCE_CrossArena_ClaimTimeNotReach = 1385;</code>
     */
    RCE_CrossArena_ClaimTimeNotReach(1385),
    /**
     * <pre>
     *已经膜拜过了
     * </pre>
     *
     * <code>RCE_CrossArena_AlreadyMoBai = 1386;</code>
     */
    RCE_CrossArena_AlreadyMoBai(1386),
    /**
     * <pre>
     *擂台保护卡次数使用完
     * </pre>
     *
     * <code>RCE_CrossArena_ProtectCardTimeUseOut = 1387;</code>
     */
    RCE_CrossArena_ProtectCardTimeUseOut(1387),
    /**
     * <pre>
     *使用保护卡条件不满足
     * </pre>
     *
     * <code>RCE_CrossArena_ConditionNotMatch = 1388;</code>
     */
    RCE_CrossArena_ConditionNotMatch(1388),
    /**
     * <pre>
     *只能选择一个道场的奖励
     * </pre>
     *
     * <code>RCE_CrossArena_OnlyCanChooseOneScienceReward = 1389;</code>
     */
    RCE_CrossArena_OnlyCanChooseOneScienceReward(1389),
    /**
     * <pre>
     *没有可领取奖励
     * </pre>
     *
     * <code>RCE_CrossArena_NoRewardCanClaim = 1390;</code>
     */
    RCE_CrossArena_NoRewardCanClaim(1390),
    /**
     * <pre>
     *擂台没有更多数据了
     * </pre>
     *
     * <code>RCE_CrossArena_NoMorePageData = 1391;</code>
     */
    RCE_CrossArena_NoMorePageData(1391),
    /**
     * <pre>
     *================== 资源回收 start  1401 - 1411=====================
     * </pre>
     *
     * <code>RCE_ResourceRecycle_NoRewardsCanClaim = 1401;</code>
     */
    RCE_ResourceRecycle_NoRewardsCanClaim(1401),
    /**
     * <pre>
     *================== 训练场系统  start  1412 - 1430======================
     * </pre>
     *
     * <code>RCE_TRAIN_POSERROR = 1412;</code>
     */
    RCE_TRAIN_POSERROR(1412),
    /**
     * <pre>
     * 无法移动到该位置
     * </pre>
     *
     * <code>RCE_TRAIN_POSNOTFLISH = 1413;</code>
     */
    RCE_TRAIN_POSNOTFLISH(1413),
    /**
     * <pre>
     * 训练营未开启
     * </pre>
     *
     * <code>RCE_TRAIN_NOTOPEN = 1414;</code>
     */
    RCE_TRAIN_NOTOPEN(1414),
    /**
     * <pre>
     * 已存在buff，不可重复购买
     * </pre>
     *
     * <code>RCE_TRAIN_ExistTrainBuff = 1415;</code>
     */
    RCE_TRAIN_ExistTrainBuff(1415),
    /**
     * <pre>
     * 有未完成的npc对话事件，无法移动
     * </pre>
     *
     * <code>RCE_TRAIN_NotFinishNpcEvent = 1416;</code>
     */
    RCE_TRAIN_NotFinishNpcEvent(1416),
    /**
     * <pre>
     * 有未选择的buff，无法移动
     * </pre>
     *
     * <code>RCE_TRAIN_NotFinishChoseBUFF = 1417;</code>
     */
    RCE_TRAIN_NotFinishChoseBUFF(1417),
    /**
     * <pre>
     * 无法刷新商店
     * </pre>
     *
     * <code>RCE_TRAIN_CanNotRefreshShop = 1418;</code>
     */
    RCE_TRAIN_CanNotRefreshShop(1418),
    /**
     * <pre>
     * 使用道具数量超过限制
     * </pre>
     *
     * <code>RCE_TRAIN_ItemUseBuffLimit = 1419;</code>
     */
    RCE_TRAIN_ItemUseBuffLimit(1419),
    /**
     * <pre>
     *================== 迷雾森林主动推送  start  1431 - 1450======================
     * </pre>
     *
     * <code>RCE_Mist_StaminaNotEnough = 1431;</code>
     */
    RCE_Mist_StaminaNotEnough(1431),
    /**
     * <pre>
     * 迷雾森林玩家信息错误
     * </pre>
     *
     * <code>RCE_Mist_PlayerNotFound = 1432;</code>
     */
    RCE_Mist_PlayerNotFound(1432),
    /**
     * <pre>
     * 配置错误
     * </pre>
     *
     * <code>RCE_Mist_CfgError = 1433;</code>
     */
    RCE_Mist_CfgError(1433),
    /**
     * <pre>
     * 已经领取过奖励
     * </pre>
     *
     * <code>RCE_Mist_HasClaimedReward = 1434;</code>
     */
    RCE_Mist_HasClaimedReward(1434),
    /**
     * <pre>
     * 未找到领取宝箱id
     * </pre>
     *
     * <code>RCE_Mist_InvalidClaimReward = 1435;</code>
     */
    RCE_Mist_InvalidClaimReward(1435),
    /**
     * <pre>
     * 该宝箱已开启
     * </pre>
     *
     * <code>RCE_Mist_BoxHasBeenOpened = 1436;</code>
     */
    RCE_Mist_BoxHasBeenOpened(1436),
    /**
     * <pre>
     * 该宝箱已消失
     * </pre>
     *
     * <code>RCE_Mist_BoxDisappear = 1437;</code>
     */
    RCE_Mist_BoxDisappear(1437),
    /**
     * <pre>
     * 魔法宝箱存在守卫
     * </pre>
     *
     * <code>RCE_Mist_MagicBoxHasGuards = 1438;</code>
     */
    RCE_Mist_MagicBoxHasGuards(1438),
    /**
     * <pre>
     * 触碰假的石像鬼雕像
     * </pre>
     *
     * <code>RCE_Mist_FakeGargoyleMonster = 1439;</code>
     */
    RCE_Mist_FakeGargoyleMonster(1439),
    /**
     * <pre>
     * 触碰真的石像鬼雕像
     * </pre>
     *
     * <code>RCE_Mist_TrulyGargoyleMonster = 1440;</code>
     */
    RCE_Mist_TrulyGargoyleMonster(1440),
    /**
     * <pre>
     * 已经领取过boss活动宝箱
     * </pre>
     *
     * <code>RCE_Mist_ClaimedBossActivityBox = 1441;</code>
     */
    RCE_Mist_ClaimedBossActivityBox(1441),
    /**
     * <pre>
     * 未参加战斗无法领取奖励
     * </pre>
     *
     * <code>RCE_Mist_NoQualificationToGetReward = 1442;</code>
     */
    RCE_Mist_NoQualificationToGetReward(1442),
    /**
     * <pre>
     *================== 矿区农场系统  start  1451 - 1480======================
     * </pre>
     *
     * <code>RCE_FARMMINE_NOTMINE = 1451;</code>
     */
    RCE_FARMMINE_NOTMINE(1451),
    /**
     * <pre>
     * 活动未开启
     * </pre>
     *
     * <code>RCE_FARMMINE_NOTHARVEST = 1452;</code>
     */
    RCE_FARMMINE_NOTHARVEST(1452),
    /**
     * <pre>
     * 已达到产量提高剩余时间上限
     * </pre>
     *
     * <code>RCE_FARMMINE_USEITEMTIMEMAX = 1453;</code>
     */
    RCE_FARMMINE_USEITEMTIMEMAX(1453),
    /**
     * <pre>
     * 已达最高收获上限
     * </pre>
     *
     * <code>RCE_FARMMINE_HARVESTMAX = 1454;</code>
     */
    RCE_FARMMINE_HARVESTMAX(1454),
    /**
     * <pre>
     * 收取太频繁
     * </pre>
     *
     * <code>RCE_FARMMINE_HARVESTQK = 1455;</code>
     */
    RCE_FARMMINE_HARVESTQK(1455),
    /**
     * <pre>
     * 累计时间不足
     * </pre>
     *
     * <code>RCE_FARMMINE_LJTIMENOT = 1456;</code>
     */
    RCE_FARMMINE_LJTIMENOT(1456),
    /**
     * <pre>
     * 手慢了被他人捷足先登
     * </pre>
     *
     * <code>RCE_FARMMINE_StealNOT = 1457;</code>
     */
    RCE_FARMMINE_StealNOT(1457),
    /**
     * <pre>
     * 重复竞拍
     * </pre>
     *
     * <code>RCE_FARMMINE_OFFERREQ = 1458;</code>
     */
    RCE_FARMMINE_OFFERREQ(1458),
    /**
     * <pre>
     * 竞拍上限
     * </pre>
     *
     * <code>RCE_FARMMINE_OFFERNUMMAX = 1459;</code>
     */
    RCE_FARMMINE_OFFERNUMMAX(1459),
    /**
     * <pre>
     * 请先竞拍
     * </pre>
     *
     * <code>RCE_FARMMINE_OFFERPEL = 1460;</code>
     */
    RCE_FARMMINE_OFFERPEL(1460),
    /**
     * <pre>
     * 你已经拥有矿地
     * </pre>
     *
     * <code>RCE_FARMMINE_HAVEMINE = 1461;</code>
     */
    RCE_FARMMINE_HAVEMINE(1461),
    /**
     * <pre>
     * 偷取次数上限
     * </pre>
     *
     * <code>RCE_FARMMINE_StealMAX = 1462;</code>
     */
    RCE_FARMMINE_StealMAX(1462),
    /**
     * <pre>
     * 该矿已经被你偷取过
     * </pre>
     *
     * <code>RCE_FARMMINE_StealREPIR = 1463;</code>
     */
    RCE_FARMMINE_StealREPIR(1463),
    /**
     * <pre>
     * 该矿被偷取次数上限
     * </pre>
     *
     * <code>RCE_FARMMINE_BEStealMAX = 1464;</code>
     */
    RCE_FARMMINE_BEStealMAX(1464),
    /**
     * <pre>
     *================== 修罗竞技场  end  1481 - 1500======================
     * </pre>
     *
     * <code>RCE_MAGICTHRON_TIME = 1481;</code>
     */
    RCE_MAGICTHRON_TIME(1481),
    /**
     * <pre>
     *战斗中
     * </pre>
     *
     * <code>RCE_MAGICTHRON_FIGHT = 1482;</code>
     */
    RCE_MAGICTHRON_FIGHT(1482),
    /**
     * <pre>
     *守关怪物不存在
     * </pre>
     *
     * <code>RCE_MAGICTHRON_FIGHTMAKE = 1483;</code>
     */
    RCE_MAGICTHRON_FIGHTMAKE(1483),
    /**
     * <pre>
     *玩家已选择区域
     * </pre>
     *
     * <code>RCE_PlayerAlreadyChooseArea = 1484;</code>
     */
    RCE_PlayerAlreadyChooseArea(1484),
    /**
     * <pre>
     *请选择挑战区域
     * </pre>
     *
     * <code>RCE_PlayerNotChooseArea = 1485;</code>
     */
    RCE_PlayerNotChooseArea(1485),
    /**
     * <pre>
     *非法消息
     * </pre>
     *
     * <code>RCE_Barrage_IllegalMsg = 1501;</code>
     */
    RCE_Barrage_IllegalMsg(1501),
    /**
     * <pre>
     *发送间隔太短
     * </pre>
     *
     * <code>RCE_Barrage_MsgIntervalTooShort = 1502;</code>
     */
    RCE_Barrage_MsgIntervalTooShort(1502),
    /**
     * <pre>
     *非法队伍名
     * </pre>
     *
     * <code>RCE_CP_IllegalTeamName = 1521;</code>
     */
    RCE_CP_IllegalTeamName(1521),
    /**
     * <pre>
     *玩家已存在队伍中
     * </pre>
     *
     * <code>RCE_CP_PlayerInTeam = 1522;</code>
     */
    RCE_CP_PlayerInTeam(1522),
    /**
     * <pre>
     *玩家没有加入队伍
     * </pre>
     *
     * <code>RCE_CP_NotJoinTeam = 1523;</code>
     */
    RCE_CP_NotJoinTeam(1523),
    /**
     * <pre>
     *队伍不存在
     * </pre>
     *
     * <code>RCE_CP_TeamNotExists = 1524;</code>
     */
    RCE_CP_TeamNotExists(1524),
    /**
     * <pre>
     *玩家战力不足
     * </pre>
     *
     * <code>RCE_CP_AbilityNotEnough = 1525;</code>
     */
    RCE_CP_AbilityNotEnough(1525),
    /**
     * <pre>
     *队伍中人数已满
     * </pre>
     *
     * <code>RCE_CP_FullTeamMember = 1526;</code>
     */
    RCE_CP_FullTeamMember(1526),
    /**
     * <pre>
     *重复发布队伍
     * </pre>
     *
     * <code>RCE_CP_RepeatPublishTeam = 1527;</code>
     */
    RCE_CP_RepeatPublishTeam(1527),
    /**
     * <pre>
     *仅队长可执行操作
     * </pre>
     *
     * <code>RCE_CP_OnlyLeaderCanOperate = 1528;</code>
     */
    RCE_CP_OnlyLeaderCanOperate(1528),
    /**
     * <pre>
     *邀请不存在
     * </pre>
     *
     * <code>RCE_CP_CpInviteNotExists = 1529;</code>
     */
    RCE_CP_CpInviteNotExists(1529),
    /**
     * <pre>
     *申请加入队伍消息不存在
     * </pre>
     *
     * <code>RCE_CP_PlayerApplyJoinTeamNotExist = 1530;</code>
     */
    RCE_CP_PlayerApplyJoinTeamNotExist(1530),
    /**
     * <pre>
     *玩家副本不存在;
     * </pre>
     *
     * <code>RCE_CP_CopyNotExists = 1531;</code>
     */
    RCE_CP_CopyNotExists(1531),
    /**
     * <pre>
     *不能到达该位置
     * </pre>
     *
     * <code>RCE_CP_PointCantReach = 1532;</code>
     */
    RCE_CP_PointCantReach(1532),
    /**
     * <pre>
     *点位已探索
     * </pre>
     *
     * <code>RCE_CP_PointAlreadyExplore = 1553;</code>
     */
    RCE_CP_PointAlreadyExplore(1553),
    /**
     * <pre>
     *本周玩法次数已使用完
     * </pre>
     *
     * <code>RCE_CP_PlayTimesUseOut = 1554;</code>
     */
    RCE_CP_PlayTimesUseOut(1554),
    /**
     * <pre>
     *重复邀请玩家
     * </pre>
     *
     * <code>RCE_CP_RepeatInvitePlayer = 1555;</code>
     */
    RCE_CP_RepeatInvitePlayer(1555),
    /**
     * <pre>
     *重复申请加入
     * </pre>
     *
     * <code>RCE_CP_RepeatApplyJoin = 1556;</code>
     */
    RCE_CP_RepeatApplyJoin(1556),
    /**
     * <pre>
     *重复领奖
     * </pre>
     *
     * <code>RCE_CP_RepeatClaim = 1557;</code>
     */
    RCE_CP_RepeatClaim(1557),
    /**
     * <pre>
     *条件不满足
     * </pre>
     *
     * <code>RCE_CP_NotMatchCondition = 1558;</code>
     */
    RCE_CP_NotMatchCondition(1558),
    /**
     * <pre>
     *其他玩家正在挑战
     * </pre>
     *
     * <code>RCE_CP_PlayerIsFighting = 1559;</code>
     */
    RCE_CP_PlayerIsFighting(1559),
    /**
     * <pre>
     *请重新上传编队
     * </pre>
     *
     * <code>RCE_CP_PleaseReUploadTeam = 1560;</code>
     */
    RCE_CP_PleaseReUploadTeam(1560),
    /**
     * <pre>
     *不满足队伍需求(申请加入组队时)
     * </pre>
     *
     * <code>RCE_CP_ApplyJoinTeam_ConditionNotMatch = 1561;</code>
     */
    RCE_CP_ApplyJoinTeam_ConditionNotMatch(1561),
    /**
     * <pre>
     *组队复活次数已使用完
     * </pre>
     *
     * <code>RCE_CP_ReviveTimeUseOut = 1562;</code>
     */
    RCE_CP_ReviveTimeUseOut(1562),
    /**
     * <pre>
     *已有切磋房间
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_HAVEROOM = 1571;</code>
     */
    RCE_CROSSARERNAPVP_HAVEROOM(1571),
    /**
     * <pre>
     *房间更新中
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_UPDATE = 1572;</code>
     */
    RCE_CROSSARERNAPVP_UPDATE(1572),
    /**
     * <pre>
     *房间不存在
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_MISS = 1573;</code>
     */
    RCE_CROSSARERNAPVP_MISS(1573),
    /**
     * <pre>
     *不满足房间条件
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_LIMIT = 1574;</code>
     */
    RCE_CROSSARERNAPVP_LIMIT(1574),
    /**
     * <pre>
     *战力不满足
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_POWER = 1575;</code>
     */
    RCE_CROSSARERNAPVP_POWER(1575),
    /**
     * <pre>
     *等级不满足
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_LEVEL = 1576;</code>
     */
    RCE_CROSSARERNAPVP_LEVEL(1576),
    /**
     * <pre>
     *宠物为空
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_PETNUll = 1577;</code>
     */
    RCE_CROSSARERNAPVP_PETNUll(1577),
    /**
     * <pre>
     *战斗服没获取到
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_BATTLESERVERNUll = 1578;</code>
     */
    RCE_CROSSARERNAPVP_BATTLESERVERNUll(1578),
    /**
     * <pre>
     *宠物数据创建失败
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_PETCREATEERR = 1579;</code>
     */
    RCE_CROSSARERNAPVP_PETCREATEERR(1579),
    /**
     * <pre>
     *切磋彩金不足
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_RES_NULL = 1580;</code>
     */
    RCE_CROSSARERNAPVP_RES_NULL(1580),
    /**
     * <pre>
     *================== 悬赏  start  1591 - 1610======================
     * </pre>
     *
     * <code>RCE_OfferReward_NoTask = 1591;</code>
     */
    RCE_OfferReward_NoTask(1591),
    /**
     * <pre>
     *未完成悬赏任务
     * </pre>
     *
     * <code>RCE_OfferReward_TaskNotFinish = 1592;</code>
     */
    RCE_OfferReward_TaskNotFinish(1592),
    /**
     * <pre>
     *悬赏任务已过期
     * </pre>
     *
     * <code>RCE_OfferReward_TaskExpired = 1593;</code>
     */
    RCE_OfferReward_TaskExpired(1593),
    /**
     * <pre>
     *悬赏任务已被其他玩家完成
     * </pre>
     *
     * <code>RCE_OfferReward_TaskFinishedByOthers = 1594;</code>
     */
    RCE_OfferReward_TaskFinishedByOthers(1594),
    /**
     * <pre>
     *==================疯狂对决  start  1660 - 1690======================
     * </pre>
     *
     * <code>RCE_CrazyDuel_TeamHasPublish = 1660;</code>
     */
    RCE_CrazyDuel_TeamHasPublish(1660),
    /**
     * <pre>
     *队伍数量不正确
     * </pre>
     *
     * <code>RCE_CrazyDuel_TeamSizeError = 1661;</code>
     */
    RCE_CrazyDuel_TeamSizeError(1661),
    /**
     * <pre>
     *该玩家以挑战
     * </pre>
     *
     * <code>RCE_CrazyDuel_PlayerAlreadyDefeat = 1662;</code>
     */
    RCE_CrazyDuel_PlayerAlreadyDefeat(1662),
    /**
     * <pre>
     *挑战楼层错误
     * </pre>
     *
     * <code>RCE_CrazyDuel_FloorError = 1663;</code>
     */
    RCE_CrazyDuel_FloorError(1663),
    /**
     * <pre>
     *挑战次数使用完
     * </pre>
     *
     * <code>RCE_CrazyDuel_PlayTimeUseOut = 1664;</code>
     */
    RCE_CrazyDuel_PlayTimeUseOut(1664),
    /**
     * <pre>
     *玩家没有配置队伍数据
     * </pre>
     *
     * <code>RCE_CrazyDuel_PlayNotSettingTeam = 1665;</code>
     */
    RCE_CrazyDuel_PlayNotSettingTeam(1665),
    /**
     * <pre>
     *玩家还有阵容没有设置
     * </pre>
     *
     * <code>RCE_CrazyDuel_PlayerNotFinishSettingTeam = 1666;</code>
     */
    RCE_CrazyDuel_PlayerNotFinishSettingTeam(1666),
    /**
     * <pre>
     *刷新次数已使用完
     * </pre>
     *
     * <code>RCE_CrazyDuel_RefreshTimeUseOut = 166;</code>
     */
    RCE_CrazyDuel_RefreshTimeUseOut(166),
    /**
     * <pre>
     *不能挑战更多的玩家
     * </pre>
     *
     * <code>RCE_CrazyDuel_CantBattleMorePlayer = 1667;</code>
     */
    RCE_CrazyDuel_CantBattleMorePlayer(1667),
    /**
     * <pre>
     * 战斗中
     * </pre>
     *
     * <code>RCE_PLAY_FIGHT = 1700;</code>
     */
    RCE_PLAY_FIGHT(1700),
    /**
     * <pre>
     * 切磋玩法中
     * </pre>
     *
     * <code>RCE_PLAY_LTPVP = 1701;</code>
     */
    RCE_PLAY_LTPVP(1701),
    /**
     * <pre>
     * 擂台匹配中
     * </pre>
     *
     * <code>RCE_PLAY_LT = 1702;</code>
     */
    RCE_PLAY_LT(1702),
    /**
     * <pre>
     * 疯狂对决中
     * </pre>
     *
     * <code>RCE_PLAY_CRAZY = 1703;</code>
     */
    RCE_PLAY_CRAZY(1703),
    /**
     * <pre>
     * 组队玩法中
     * </pre>
     *
     * <code>RCE_PLAY_TEAM = 1704;</code>
     */
    RCE_PLAY_TEAM(1704),
    /**
     * <pre>
     * 魔灵大躲避玩法中
     * </pre>
     *
     * <code>REC_IN_PET_AVOIDANCE_GAME = 1705;</code>
     */
    REC_IN_PET_AVOIDANCE_GAME(1705),
    /**
     * <pre>
     *==================石头峡谷  start  1801 - 1900======================
     * </pre>
     *
     * <code>RCE_StoneRift_TimeNotReach = 1801;</code>
     */
    RCE_StoneRift_TimeNotReach(1801),
    /**
     * <pre>
     *超载cd中
     * </pre>
     *
     * <code>RCE_StoneRift_OverLoadInCD = 1802;</code>
     */
    RCE_StoneRift_OverLoadInCD(1802),
    /**
     * <pre>
     *矿场未解锁
     * </pre>
     *
     * <code>RCE_StoneRift_FactoryNotUnlock = 1803;</code>
     */
    RCE_StoneRift_FactoryNotUnlock(1803),
    /**
     * <pre>
     *宠物已驻防
     * </pre>
     *
     * <code>RCE_StoneRift_PetAlreadyInDefend = 1804;</code>
     */
    RCE_StoneRift_PetAlreadyInDefend(1804),
    /**
     * <pre>
     *矿坑已解锁
     * </pre>
     *
     * <code>RCE_StoneRift_FactoryAlreadyUnlock = 1805;</code>
     */
    RCE_StoneRift_FactoryAlreadyUnlock(1805),
    /**
     * <pre>
     *事件功能cd中
     * </pre>
     *
     * <code>RCE_StoneRift_EventInCD = 1806;</code>
     */
    RCE_StoneRift_EventInCD(1806),
    /**
     * <pre>
     * 留言包含非法字符
     * </pre>
     *
     * <code>RCE_StoneRift_InvalidWord = 1807;</code>
     */
    RCE_StoneRift_InvalidWord(1807),
    /**
     * <pre>
     *科技树学习条件不满足
     * </pre>
     *
     * <code>RCE_StoneRiftScienceStudyConditionNotMatch = 1809;</code>
     */
    RCE_StoneRiftScienceStudyConditionNotMatch(1809),
    /**
     * <pre>
     *科技树不可继续升级
     * </pre>
     *
     * <code>RCE_StoneRiftScienceLevelMaxLimit = 1810;</code>
     */
    RCE_StoneRiftScienceLevelMaxLimit(1810),
    /**
     * <pre>
     *达到购买上限
     * </pre>
     *
     * <code>RCE_StoneRift_LimitBuy = 1811;</code>
     */
    RCE_StoneRift_LimitBuy(1811),
    /**
     * <pre>
     *次数使用完
     * </pre>
     *
     * <code>RCE_StoneRift_TimeUseOut = 1812;</code>
     */
    RCE_StoneRift_TimeUseOut(1812),
    /**
     * <pre>
     *无法偷取
     * </pre>
     *
     * <code>RCE_StoneRift_CantSteal = 1813;</code>
     */
    RCE_StoneRift_CantSteal(1813),
    /**
     * <pre>
     *没有奖励可以领取
     * </pre>
     *
     * <code>RCE_StoneRift_EmptyRewards = 1814;</code>
     */
    RCE_StoneRift_EmptyRewards(1814),
    /**
     * <pre>
     *矿场等级不足
     * </pre>
     *
     * <code>RCE_StoneRift_RiftLvNotEnough = 1815;</code>
     */
    RCE_StoneRift_RiftLvNotEnough(1815),
    /**
     * <pre>
     *宠物条件不满足
     * </pre>
     *
     * <code>RCE_StoneRift_PetNotMatch = 1816;</code>
     */
    RCE_StoneRift_PetNotMatch(1816),
    /**
     * <pre>
     *满耐久不能使用催化
     * </pre>
     *
     * <code>RCE_StoneRift_FullDurable = 1817;</code>
     */
    RCE_StoneRift_FullDurable(1817),
    /**
     * <pre>
     *已偷取该玩家，不能再偷取
     * </pre>
     *
     * <code>RCE_StoneRift_AlreadyStealPlayer = 1818;</code>
     */
    RCE_StoneRift_AlreadyStealPlayer(1818),
    /**
     * <pre>
     *已偷取该玩家，不能再偷取
     * </pre>
     *
     * <code>RCE_StoneRift_NoResCanSteal = 1819;</code>
     */
    RCE_StoneRift_NoResCanSteal(1819),
    /**
     * <pre>
     *==================节日Boss  start  1901 - 1950======================
     * </pre>
     *
     * <code>RCE_Activity_AlreadyShare = 1901;</code>
     */
    RCE_Activity_AlreadyShare(1901),
    /**
     * <pre>
     *==================星星宝藏  start  2051 - 3000======================
     * </pre>
     *
     * <code>REC_Star_NotEnough = 2051;</code>
     */
    REC_Star_NotEnough(2051),
    /**
     * <pre>
     *玩家已选取奖池
     * </pre>
     *
     * <code>REC_StarTreasure_choosen = 2052;</code>
     */
    REC_StarTreasure_choosen(2052),
    /**
     * <pre>
     *玩家未选取奖池
     * </pre>
     *
     * <code>REC_StarTreasure_NotChoose = 2053;</code>
     */
    REC_StarTreasure_NotChoose(2053),
    /**
     * <pre>
     *玩家已获取所有物品
     * </pre>
     *
     * <code>REC_StarTreasure_GetAll = 2054;</code>
     */
    REC_StarTreasure_GetAll(2054),
    /**
     * <pre>
     *==================魔灵大躲避  start  3051 - 3100======================
     * </pre>
     *
     * <code>REC_PetAvoidance_AlreadyInGame = 3051;</code>
     */
    REC_PetAvoidance_AlreadyInGame(3051),
    /**
     * <pre>
     *未进行游戏
     * </pre>
     *
     * <code>REC_PetAvoidance_NotInGame = 3052;</code>
     */
    REC_PetAvoidance_NotInGame(3052),
    /**
     * <pre>
     *次数耗尽
     * </pre>
     *
     * <code>REC_petAvoidance_TimesLimit = 3053;</code>
     */
    REC_petAvoidance_TimesLimit(3053),
    /**
     * <pre>
     *超时结束
     * </pre>
     *
     * <code>REC_petAvoidance_Timeout = 3054;</code>
     */
    REC_petAvoidance_Timeout(3054),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>RCE_Null = 0;</code>
     */
    public static final int RCE_Null_VALUE = 0;
    /**
     * <code>RCE_Success = 1;</code>
     */
    public static final int RCE_Success_VALUE = 1;
    /**
     * <code>RCE_Failure = 2;</code>
     */
    public static final int RCE_Failure_VALUE = 2;
    /**
     * <pre>
     *未知错误
     * </pre>
     *
     * <code>RCE_UnknownError = 3;</code>
     */
    public static final int RCE_UnknownError_VALUE = 3;
    /**
     * <pre>
     *玩家离线，需要重新登录
     * </pre>
     *
     * <code>RCE_PlayerOffline = 4;</code>
     */
    public static final int RCE_PlayerOffline_VALUE = 4;
    /**
     * <pre>
     *参数错误
     * </pre>
     *
     * <code>RCE_ErrorParam = 5;</code>
     */
    public static final int RCE_ErrorParam_VALUE = 5;
    /**
     * <pre>
     *功能解锁
     * </pre>
     *
     * <code>RCE_FunctionIsLock = 6;</code>
     */
    public static final int RCE_FunctionIsLock_VALUE = 6;
    /**
     * <pre>
     *商店类型不匹配
     * </pre>
     *
     * <code>RCE_ShopTypeMissMatch = 7;</code>
     */
    public static final int RCE_ShopTypeMissMatch_VALUE = 7;
    /**
     * <pre>
     *材料不足
     * </pre>
     *
     * <code>RCE_MatieralNotEnough = 8;</code>
     */
    public static final int RCE_MatieralNotEnough_VALUE = 8;
    /**
     * <pre>
     *等级不足
     * </pre>
     *
     * <code>RCE_LvNotEnough = 9;</code>
     */
    public static final int RCE_LvNotEnough_VALUE = 9;
    /**
     * <code>RCE_Login_ErrorPwd = 10;</code>
     */
    public static final int RCE_Login_ErrorPwd_VALUE = 10;
    /**
     * <code>RCE_Login_FullPlayer = 11;</code>
     */
    public static final int RCE_Login_FullPlayer_VALUE = 11;
    /**
     * <pre>
     *服务器维护中
     * </pre>
     *
     * <code>RCE_Login_ServerNotOpen = 12;</code>
     */
    public static final int RCE_Login_ServerNotOpen_VALUE = 12;
    /**
     * <pre>
     *客户端版本错误
     * </pre>
     *
     * <code>RCE_Login_ClientVersionError = 13;</code>
     */
    public static final int RCE_Login_ClientVersionError_VALUE = 13;
    /**
     * <pre>
     *配置错误
     * </pre>
     *
     * <code>RCE_ConfigError = 14;</code>
     */
    public static final int RCE_ConfigError_VALUE = 14;
    /**
     * <pre>
     *配置不存在
     * </pre>
     *
     * <code>RSE_ConfigNotExist = 15;</code>
     */
    public static final int RSE_ConfigNotExist_VALUE = 15;
    /**
     * <pre>
     *当前vip等级礼包已经领取
     * </pre>
     *
     * <code>RSE_VipGiftClaimed = 16;</code>
     */
    public static final int RSE_VipGiftClaimed_VALUE = 16;
    /**
     * <pre>
     *无效请求
     * </pre>
     *
     * <code>RSE_InvalidRequest = 17;</code>
     */
    public static final int RSE_InvalidRequest_VALUE = 17;
    /**
     * <pre>
     *当前功能异常维护中
     * </pre>
     *
     * <code>RSE_Function_AbnormalMaintenance = 18;</code>
     */
    public static final int RSE_Function_AbnormalMaintenance_VALUE = 18;
    /**
     * <pre>
     *账号锁定
     * </pre>
     *
     * <code>RSE_Login_AccountLock = 19;</code>
     */
    public static final int RSE_Login_AccountLock_VALUE = 19;
    /**
     * <code>RCE_CreateRole_DuplicateName = 20;</code>
     */
    public static final int RCE_CreateRole_DuplicateName_VALUE = 20;
    /**
     * <code>RCE_CreateRole_InvalidName = 21;</code>
     */
    public static final int RCE_CreateRole_InvalidName_VALUE = 21;
    /**
     * <pre>
     * 顺序错误,应先发login消息
     * </pre>
     *
     * <code>RCE_CreateRole_ErrorOrder = 22;</code>
     */
    public static final int RCE_CreateRole_ErrorOrder_VALUE = 22;
    /**
     * <pre>
     *禁止修改性别
     * </pre>
     *
     * <code>RCE_CreateRole_ForbidModifySex = 23;</code>
     */
    public static final int RCE_CreateRole_ForbidModifySex_VALUE = 23;
    /**
     * <pre>
     * 服务器繁忙
     * </pre>
     *
     * <code>RCE_Login_ServerBusy = 29;</code>
     */
    public static final int RCE_Login_ServerBusy_VALUE = 29;
    /**
     * <pre>
     * 频繁登录
     * </pre>
     *
     * <code>RCE_Login_LoginTooFast = 30;</code>
     */
    public static final int RCE_Login_LoginTooFast_VALUE = 30;
    /**
     * <pre>
     * 重复登录
     * </pre>
     *
     * <code>RCE_KickOut_RepeatLogin = 31;</code>
     */
    public static final int RCE_KickOut_RepeatLogin_VALUE = 31;
    /**
     * <pre>
     * 服务器关闭
     * </pre>
     *
     * <code>RCE_KickOut_ServerClose = 32;</code>
     */
    public static final int RCE_KickOut_ServerClose_VALUE = 32;
    /**
     * <pre>
     * 防沉迷限制
     * </pre>
     *
     * <code>RCE_KickOut_AntiLimit = 33;</code>
     */
    public static final int RCE_KickOut_AntiLimit_VALUE = 33;
    /**
     * <pre>
     * 账号封禁
     * </pre>
     *
     * <code>RCE_KickOut_Banned = 34;</code>
     */
    public static final int RCE_KickOut_Banned_VALUE = 34;
    /**
     * <pre>
     * 新手引导跳过
     * </pre>
     *
     * <code>RCE_KickOut_SkipNewBeeGuide = 35;</code>
     */
    public static final int RCE_KickOut_SkipNewBeeGuide_VALUE = 35;
    /**
     * <pre>
     * 相同地址重复登录
     * </pre>
     *
     * <code>RCE_KickOut_RepeatLoginWithSameIp = 36;</code>
     */
    public static final int RCE_KickOut_RepeatLoginWithSameIp_VALUE = 36;
    /**
     * <pre>
     *宝石背包满
     * </pre>
     *
     * <code>RCE_Mail_GemBagIsFull = 37;</code>
     */
    public static final int RCE_Mail_GemBagIsFull_VALUE = 37;
    /**
     * <pre>
     *道具背包满
     * </pre>
     *
     * <code>RCE_Mail_ItemBagIsFull = 38;</code>
     */
    public static final int RCE_Mail_ItemBagIsFull_VALUE = 38;
    /**
     * <pre>
     *宠物背包满
     * </pre>
     *
     * <code>RCE_Mail_PetBagIsFull = 39;</code>
     */
    public static final int RCE_Mail_PetBagIsFull_VALUE = 39;
    /**
     * <pre>
     *符文背包满
     * </pre>
     *
     * <code>RCE_Mail_RuneBagIsFull = 40;</code>
     */
    public static final int RCE_Mail_RuneBagIsFull_VALUE = 40;
    /**
     * <pre>
     *该邮件不存在
     * </pre>
     *
     * <code>RCE_Mail_UnExist = 41;</code>
     */
    public static final int RCE_Mail_UnExist_VALUE = 41;
    /**
     * <pre>
     *附件不存在
     * </pre>
     *
     * <code>RCE_Mail_NoAttachment = 42;</code>
     */
    public static final int RCE_Mail_NoAttachment_VALUE = 42;
    /**
     * <pre>
     *背包容量不足
     * </pre>
     *
     * <code>RCE_Mail_UnEnoughtCapacity = 43;</code>
     */
    public static final int RCE_Mail_UnEnoughtCapacity_VALUE = 43;
    /**
     * <pre>
     *附件已经领取过了
     * </pre>
     *
     * <code>RCE_Mail_AlreadyCliamed = 44;</code>
     */
    public static final int RCE_Mail_AlreadyCliamed_VALUE = 44;
    /**
     * <pre>
     *附件未领取
     * </pre>
     *
     * <code>RCE_Mail_AttachmentNoClaim = 45;</code>
     */
    public static final int RCE_Mail_AttachmentNoClaim_VALUE = 45;
    /**
     * <pre>
     *邮件未读
     * </pre>
     *
     * <code>RCE_Mail_UnRead = 46;</code>
     */
    public static final int RCE_Mail_UnRead_VALUE = 46;
    /**
     * <pre>
     *该位置已有宠物,无法上阵
     * </pre>
     *
     * <code>RCE_PrepareWar_TargetPositionHasPet = 47;</code>
     */
    public static final int RCE_PrepareWar_TargetPositionHasPet_VALUE = 47;
    /**
     * <pre>
     *宠物在宠物转化中还未确认不能备战
     * </pre>
     *
     * <code>RCE_PrepareWar_PetIsInPetTransfer = 48;</code>
     */
    public static final int RCE_PrepareWar_PetIsInPetTransfer_VALUE = 48;
    /**
     * <pre>
     *该小队已上锁，无法编辑（适用矿区小队）
     * </pre>
     *
     * <code>RCE_PrepareWar_TeamStatusIslock = 49;</code>
     */
    public static final int RCE_PrepareWar_TeamStatusIslock_VALUE = 49;
    /**
     * <pre>
     *该宠物已阵亡
     * </pre>
     *
     * <code>RCE_PrepareWar_PetIsDead = 50;</code>
     */
    public static final int RCE_PrepareWar_PetIsDead_VALUE = 50;
    /**
     * <pre>
     *宠物不存在
     * </pre>
     *
     * <code>RCE_PrepareWar_PetNoExist = 51;</code>
     */
    public static final int RCE_PrepareWar_PetNoExist_VALUE = 51;
    /**
     * <pre>
     *等级不足，不能使用该技能
     * </pre>
     *
     * <code>RCE_PrepareWar_LvNotEought = 52;</code>
     */
    public static final int RCE_PrepareWar_LvNotEought_VALUE = 52;
    /**
     * <pre>
     *非法小队名
     * </pre>
     *
     * <code>RCE_PrepareWar_IllegalTeamName = 53;</code>
     */
    public static final int RCE_PrepareWar_IllegalTeamName_VALUE = 53;
    /**
     * <pre>
     *无法再购买小队
     * </pre>
     *
     * <code>RCE_PrepareWar_CanNotBuyMore = 54;</code>
     */
    public static final int RCE_PrepareWar_CanNotBuyMore_VALUE = 54;
    /**
     * <pre>
     *钻石不足
     * </pre>
     *
     * <code>RCE_PrepareWar_DiamondNotEnought = 56;</code>
     */
    public static final int RCE_PrepareWar_DiamondNotEnought_VALUE = 56;
    /**
     * <pre>
     *该位置未解锁
     * </pre>
     *
     * <code>RCE_PrepareWar_PositionIsLock = 57;</code>
     */
    public static final int RCE_PrepareWar_PositionIsLock_VALUE = 57;
    /**
     * <pre>
     *该小队未解锁
     * </pre>
     *
     * <code>RCE_PrepareWar_TeamIslock = 58;</code>
     */
    public static final int RCE_PrepareWar_TeamIslock_VALUE = 58;
    /**
     * <pre>
     *技能不存在
     * </pre>
     *
     * <code>RCE_PrepareWar_SkillNotExist = 59;</code>
     */
    public static final int RCE_PrepareWar_SkillNotExist_VALUE = 59;
    /**
     * <pre>
     *重复上阵同一宠物
     * </pre>
     *
     * <code>RCE_PrepareWar_RepeatedSetSamePet = 60;</code>
     */
    public static final int RCE_PrepareWar_RepeatedSetSamePet_VALUE = 60;
    /**
     * <pre>
     *道具不存在
     * </pre>
     *
     * <code>RCE_Itembag_ItemNotExist = 61;</code>
     */
    public static final int RCE_Itembag_ItemNotExist_VALUE = 61;
    /**
     * <pre>
     *道具不足
     * </pre>
     *
     * <code>RCE_Itembag_ItemNotEnought = 62;</code>
     */
    public static final int RCE_Itembag_ItemNotEnought_VALUE = 62;
    /**
     * <pre>
     *该道具无法使用
     * </pre>
     *
     * <code>RCE_Itembag_ItemCanNotUsed = 63;</code>
     */
    public static final int RCE_Itembag_ItemCanNotUsed_VALUE = 63;
    /**
     * <pre>
     *该道具无法出售
     * </pre>
     *
     * <code>RCE_ItemBag_ItemCanNotSell = 64;</code>
     */
    public static final int RCE_ItemBag_ItemCanNotSell_VALUE = 64;
    /**
     * <pre>
     *迷雾森林宝箱每日次数限制
     * </pre>
     *
     * <code>RCE_ItemBag_MistBoxLimit = 65;</code>
     */
    public static final int RCE_ItemBag_MistBoxLimit_VALUE = 65;
    /**
     * <pre>
     *无法再次使用该道具
     * </pre>
     *
     * <code>RCE_ItemBag_CanNotUseMore = 66;</code>
     */
    public static final int RCE_ItemBag_CanNotUseMore_VALUE = 66;
    /**
     * <pre>
     *该头像还未拥有，不能更换
     * </pre>
     *
     * <code>RCE_Player_NotOwnedAvatar = 71;</code>
     */
    public static final int RCE_Player_NotOwnedAvatar_VALUE = 71;
    /**
     * <pre>
     *金币不足
     * </pre>
     *
     * <code>RCE_Player_GoldNotEnought = 72;</code>
     */
    public static final int RCE_Player_GoldNotEnought_VALUE = 72;
    /**
     * <pre>
     *钻石不足
     * </pre>
     *
     * <code>RCE_Player_DiamondNotEnought = 73;</code>
     */
    public static final int RCE_Player_DiamondNotEnought_VALUE = 73;
    /**
     * <pre>
     *货币不足（金币，魔石，魔晶）
     * </pre>
     *
     * <code>RCE_Player_CurrencysNotEnought = 74;</code>
     */
    public static final int RCE_Player_CurrencysNotEnought_VALUE = 74;
    /**
     * <pre>
     *展示的宠物不存在
     * </pre>
     *
     * <code>RCE_Player_DisplayPetNotExist = 75;</code>
     */
    public static final int RCE_Player_DisplayPetNotExist_VALUE = 75;
    /**
     * <pre>
     *查询的玩家不存在
     * </pre>
     *
     * <code>RCE_Player_QueryPlayerNotExist = 76;</code>
     */
    public static final int RCE_Player_QueryPlayerNotExist_VALUE = 76;
    /**
     * <pre>
     *头像框未解锁
     * </pre>
     *
     * <code>RCE_Player_AvatarBorderLocked = 77;</code>
     */
    public static final int RCE_Player_AvatarBorderLocked_VALUE = 77;
    /**
     * <pre>
     *头像框已过期
     * </pre>
     *
     * <code>RCE_Player_AvatarBorderExpire = 78;</code>
     */
    public static final int RCE_Player_AvatarBorderExpire_VALUE = 78;
    /**
     * <pre>
     *商品已过期
     * </pre>
     *
     * <code>RCE_Player_GoodsExpired = 79;</code>
     */
    public static final int RCE_Player_GoodsExpired_VALUE = 79;
    /**
     * <pre>
     *该关卡不能游戏，请选择其他关卡
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvCanNotPlay = 81;</code>
     */
    public static final int RCE_EndlessSpire_ThisLvCanNotPlay_VALUE = 81;
    /**
     * <pre>
     *玩家状态繁忙
     * </pre>
     *
     * <code>RCE_EndlessSpire_PlayerStatusBusy = 82;</code>
     */
    public static final int RCE_EndlessSpire_PlayerStatusBusy_VALUE = 82;
    /**
     * <pre>
     *该关卡不能结算，
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvCanNotSettle = 83;</code>
     */
    public static final int RCE_EndlessSpire_ThisLvCanNotSettle_VALUE = 83;
    /**
     * <pre>
     *当前关卡没有对应的成就奖励，
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvHaveNoAchievementReward = 84;</code>
     */
    public static final int RCE_EndlessSpire_ThisLvHaveNoAchievementReward_VALUE = 84;
    /**
     * <pre>
     *当前关卡成就奖励已经领取
     * </pre>
     *
     * <code>RCE_EndlessSpire_ThisLvAchievementRewardClaimed = 85;</code>
     */
    public static final int RCE_EndlessSpire_ThisLvAchievementRewardClaimed_VALUE = 85;
    /**
     * <pre>
     *当前成就未完成
     * </pre>
     *
     * <code>RCE_EndlessSpire_CurAchievementNotFinished = 86;</code>
     */
    public static final int RCE_EndlessSpire_CurAchievementNotFinished_VALUE = 86;
    /**
     * <pre>
     *敌方小队为空
     * </pre>
     *
     * <code>RCE_Battle_EnemyPetIsEmpty = 90;</code>
     */
    public static final int RCE_Battle_EnemyPetIsEmpty_VALUE = 90;
    /**
     * <pre>
     *当前使用的小队没有宠物
     * </pre>
     *
     * <code>RCE_Battle_UsedTeamNotHavePet = 91;</code>
     */
    public static final int RCE_Battle_UsedTeamNotHavePet_VALUE = 91;
    /**
     * <code>RCE_Battle_FightMakeIsNotExist = 92;</code>
     */
    public static final int RCE_Battle_FightMakeIsNotExist_VALUE = 92;
    /**
     * <pre>
     *重复进入战斗
     * </pre>
     *
     * <code>RCE_Battle_RepeatedEnterBattle = 93;</code>
     */
    public static final int RCE_Battle_RepeatedEnterBattle_VALUE = 93;
    /**
     * <pre>
     *战斗数据错误
     * </pre>
     *
     * <code>RCE_Battle_DataError = 94;</code>
     */
    public static final int RCE_Battle_DataError_VALUE = 94;
    /**
     * <pre>
     *战斗已结束
     * </pre>
     *
     * <code>RCE_Battle_NotInBattle = 96;</code>
     */
    public static final int RCE_Battle_NotInBattle_VALUE = 96;
    /**
     * <pre>
     *战斗超过限制
     * </pre>
     *
     * <code>RCE_Battle_OutOfLimit = 97;</code>
     */
    public static final int RCE_Battle_OutOfLimit_VALUE = 97;
    /**
     * <pre>
     *战斗频繁
     * </pre>
     *
     * <code>RCE_Battle_BattleTooFast = 98;</code>
     */
    public static final int RCE_Battle_BattleTooFast_VALUE = 98;
    /**
     * <pre>
     *宠物数量超过限制
     * </pre>
     *
     * <code>RCE_PrepareWar_PetCountOutOfLimit = 99;</code>
     */
    public static final int RCE_PrepareWar_PetCountOutOfLimit_VALUE = 99;
    /**
     * <pre>
     * 未找到玩家
     * </pre>
     *
     * <code>RCE_AlterName_NotFoundPlayer = 100;</code>
     */
    public static final int RCE_AlterName_NotFoundPlayer_VALUE = 100;
    /**
     * <pre>
     * 非法玩家
     * </pre>
     *
     * <code>RCE_AlterName_EvilPlayer = 101;</code>
     */
    public static final int RCE_AlterName_EvilPlayer_VALUE = 101;
    /**
     * <pre>
     * 改名CD中
     * </pre>
     *
     * <code>RCE_AlterName_DuringRenameCD = 102;</code>
     */
    public static final int RCE_AlterName_DuringRenameCD_VALUE = 102;
    /**
     * <pre>
     *非法玩家名z
     * </pre>
     *
     * <code>RCE_AlterName_IllegalName = 103;</code>
     */
    public static final int RCE_AlterName_IllegalName_VALUE = 103;
    /**
     * <pre>
     * 含有非法字符串
     * </pre>
     *
     * <code>RCE_AlterName_IllegalWords = 110;</code>
     */
    public static final int RCE_AlterName_IllegalWords_VALUE = 110;
    /**
     * <pre>
     * 名字过长
     * </pre>
     *
     * <code>RCE_AlterName_TooLong = 111;</code>
     */
    public static final int RCE_AlterName_TooLong_VALUE = 111;
    /**
     * <pre>
     * 名字重复
     * </pre>
     *
     * <code>RCE_AlterName_Duplicate = 112;</code>
     */
    public static final int RCE_AlterName_Duplicate_VALUE = 112;
    /**
     * <pre>
     * 新名字长度不足
     * </pre>
     *
     * <code>RCE_AlterName_Empty = 113;</code>
     */
    public static final int RCE_AlterName_Empty_VALUE = 113;
    /**
     * <pre>
     *vip经验卡达到购买次数上限
     * </pre>
     *
     * <code>RCE_VipExpMaxBuyTimeLimit = 114;</code>
     */
    public static final int RCE_VipExpMaxBuyTimeLimit_VALUE = 114;
    /**
     * <pre>
     *功能未解锁
     * </pre>
     *
     * <code>RCE_FunctionNotUnLock = 115;</code>
     */
    public static final int RCE_FunctionNotUnLock_VALUE = 115;
    /**
     * <pre>
     *功能未解锁
     * </pre>
     *
     * <code>RCE_PlayerLvNotEnough = 116;</code>
     */
    public static final int RCE_PlayerLvNotEnough_VALUE = 116;
    /**
     * <pre>
     *===================迷雾森林start 预留200 - 300=================
     * </pre>
     *
     * <code>RCE_MistForest_CreateRoomFail = 200;</code>
     */
    public static final int RCE_MistForest_CreateRoomFail_VALUE = 200;
    /**
     * <pre>
     * 未找到迷雾森林玩家
     * </pre>
     *
     * <code>RCE_MistForest_NotFoundMistPlayer = 201;</code>
     */
    public static final int RCE_MistForest_NotFoundMistPlayer_VALUE = 201;
    /**
     * <pre>
     * 玩家未进入迷雾森林房间
     * </pre>
     *
     * <code>RCE_MistForest_NotInMistRoom = 202;</code>
     */
    public static final int RCE_MistForest_NotInMistRoom_VALUE = 202;
    /**
     * <pre>
     * 未分配迷雾森林玩家
     * </pre>
     *
     * <code>RCE_MistForest_NotFoundMistFighter = 203;</code>
     */
    public static final int RCE_MistForest_NotFoundMistFighter_VALUE = 203;
    /**
     * <pre>
     * 玩家未在安全区
     * </pre>
     *
     * <code>RCE_MistForest_NotInSafeRegion = 204;</code>
     */
    public static final int RCE_MistForest_NotInSafeRegion_VALUE = 204;
    /**
     * <pre>
     * 玩家在迷雾森林中
     * </pre>
     *
     * <code>RCE_MistForest_AlreadyInMist = 205;</code>
     */
    public static final int RCE_MistForest_AlreadyInMist_VALUE = 205;
    /**
     * <pre>
     * 当前不可交互
     * </pre>
     *
     * <code>RCE_MistForest_CanNotTouch = 206;</code>
     */
    public static final int RCE_MistForest_CanNotTouch_VALUE = 206;
    /**
     * <pre>
     * 已经上交宝珠
     * </pre>
     *
     * <code>RCE_MistForest_AlreadySubmitJewelry = 207;</code>
     */
    public static final int RCE_MistForest_AlreadySubmitJewelry_VALUE = 207;
    /**
     * <pre>
     * 封印宝箱不存在或不可交互
     * </pre>
     *
     * <code>RCE_MistForest_NotFoundSealBox = 208;</code>
     */
    public static final int RCE_MistForest_NotFoundSealBox_VALUE = 208;
    /**
     * <pre>
     * 宝珠数量不足
     * </pre>
     *
     * <code>RCE_MistForest_NotEnoughJewelry = 209;</code>
     */
    public static final int RCE_MistForest_NotEnoughJewelry_VALUE = 209;
    /**
     * <pre>
     * 宝珠id不匹配
     * </pre>
     *
     * <code>RCE_MistForest_JewelryIdNotMatch = 210;</code>
     */
    public static final int RCE_MistForest_JewelryIdNotMatch_VALUE = 210;
    /**
     * <pre>
     * 隐藏魔物未召唤
     * </pre>
     *
     * <code>RCE_MistForest_HiddenEvilNotFound = 211;</code>
     */
    public static final int RCE_MistForest_HiddenEvilNotFound_VALUE = 211;
    /**
     * <pre>
     * 隐藏魔物已过期
     * </pre>
     *
     * <code>RCE_MistForest_HiddenEvilExpired = 212;</code>
     */
    public static final int RCE_MistForest_HiddenEvilExpired_VALUE = 212;
    /**
     * <pre>
     * 已召唤隐藏魔物
     * </pre>
     *
     * <code>RCE_MistForest_HiddenEvilSummoned = 213;</code>
     */
    public static final int RCE_MistForest_HiddenEvilSummoned_VALUE = 213;
    /**
     * <pre>
     * 服务器未登录(服务器用)
     * </pre>
     *
     * <code>RCE_MistForest_ServerNotLogin = 260;</code>
     */
    public static final int RCE_MistForest_ServerNotLogin_VALUE = 260;
    /**
     * <pre>
     *活动状态不匹配
     * </pre>
     *
     * <code>RCE_ForInv_StatusMismatching = 301;</code>
     */
    public static final int RCE_ForInv_StatusMismatching_VALUE = 301;
    /**
     * <pre>
     *第一阶段小怪Idx不存在
     * </pre>
     *
     * <code>RCE_ForInv_MonsterIdxNotExist = 302;</code>
     */
    public static final int RCE_ForInv_MonsterIdxNotExist_VALUE = 302;
    /**
     * <pre>
     *bossIdx 不匹配
     * </pre>
     *
     * <code>RCE_ForInv_BossCloneNotExist = 303;</code>
     */
    public static final int RCE_ForInv_BossCloneNotExist_VALUE = 303;
    /**
     * <pre>
     *过渡阶段已达上限
     * </pre>
     *
     * <code>RCE_ForInv_ClaimCountLimit = 304;</code>
     */
    public static final int RCE_ForInv_ClaimCountLimit_VALUE = 304;
    /**
     * <pre>
     *移除小怪失败
     * </pre>
     *
     * <code>RCE_ForInv_RemoveMonsterFailed = 305;</code>
     */
    public static final int RCE_ForInv_RemoveMonsterFailed_VALUE = 305;
    /**
     * <pre>
     *生成小怪失败
     * </pre>
     *
     * <code>RCE_ForInv_CreateMonsterFailed = 306;</code>
     */
    public static final int RCE_ForInv_CreateMonsterFailed_VALUE = 306;
    /**
     * <pre>
     *建筑已解放
     * </pre>
     *
     * <code>RCE_ForInv_BuildingFreed = 307;</code>
     */
    public static final int RCE_ForInv_BuildingFreed_VALUE = 307;
    /**
     * <pre>
     *好友已达上限
     * </pre>
     *
     * <code>RCE_Friend_FriendUpperLimit = 321;</code>
     */
    public static final int RCE_Friend_FriendUpperLimit_VALUE = 321;
    /**
     * <pre>
     *目标玩家不存在
     * </pre>
     *
     * <code>RCE_Friend_TargetPlayerNotExist = 322;</code>
     */
    public static final int RCE_Friend_TargetPlayerNotExist_VALUE = 322;
    /**
     * <pre>
     *目标玩家申请列表已达上限
     * </pre>
     *
     * <code>RCE_Friend_TargetApplyUpperLimit = 323;</code>
     */
    public static final int RCE_Friend_TargetApplyUpperLimit_VALUE = 323;
    /**
     * <pre>
     *目标好友列表已达上限
     * </pre>
     *
     * <code>RCE_Friend_TargetFriendUpperLimit = 324;</code>
     */
    public static final int RCE_Friend_TargetFriendUpperLimit_VALUE = 324;
    /**
     * <pre>
     *目标玩家还不是你的好友
     * </pre>
     *
     * <code>RCE_Friend_TargetIsNotFriend = 325;</code>
     */
    public static final int RCE_Friend_TargetIsNotFriend_VALUE = 325;
    /**
     * <pre>
     *不能查找自己
     * </pre>
     *
     * <code>RCE_Friend_CanNotFindSelf = 326;</code>
     */
    public static final int RCE_Friend_CanNotFindSelf_VALUE = 326;
    /**
     * <pre>
     *已经赠送友情点到目标玩家
     * </pre>
     *
     * <code>RCE_Friend_RepeatedSendToSameTarget = 327;</code>
     */
    public static final int RCE_Friend_RepeatedSendToSameTarget_VALUE = 327;
    /**
     * <pre>
     *还未收到该玩家赠送的友情点
     * </pre>
     *
     * <code>RCE_Friend_NotRecvPointFromThis = 328;</code>
     */
    public static final int RCE_Friend_NotRecvPointFromThis_VALUE = 328;
    /**
     * <pre>
     *已经领取该玩家的友情点
     * </pre>
     *
     * <code>RCE_Friend_RepeatedClaim = 329;</code>
     */
    public static final int RCE_Friend_RepeatedClaim_VALUE = 329;
    /**
     * <pre>
     *友情点获取上限
     * </pre>
     *
     * <code>RCE_Friend_FriendItemGainLimit = 330;</code>
     */
    public static final int RCE_Friend_FriendItemGainLimit_VALUE = 330;
    /**
     * <pre>
     *友情点不足无法兑换
     * </pre>
     *
     * <code>RCE_DrawCard_FriednshipPointNotEnought = 341;</code>
     */
    public static final int RCE_DrawCard_FriednshipPointNotEnought_VALUE = 341;
    /**
     * <pre>
     *低级召唤书不足
     * </pre>
     *
     * <code>RCE_DrawCard_LowBookNotEnought = 342;</code>
     */
    public static final int RCE_DrawCard_LowBookNotEnought_VALUE = 342;
    /**
     * <pre>
     *高级召唤书不足
     * </pre>
     *
     * <code>RCE_DrawCard_HighBookNotEnought = 343;</code>
     */
    public static final int RCE_DrawCard_HighBookNotEnought_VALUE = 343;
    /**
     * <pre>
     *当前高级奖池抽取次数达上限,需要刷新后才能继续抽取
     * </pre>
     *
     * <code>RCE_DrawCard_HighDrawCountUpperLimit = 344;</code>
     */
    public static final int RCE_DrawCard_HighDrawCountUpperLimit_VALUE = 344;
    /**
     * <pre>
     *兑换次数达上限
     * </pre>
     *
     * <code>RCE_GoldEx_ExUpperLimit = 361;</code>
     */
    public static final int RCE_GoldEx_ExUpperLimit_VALUE = 361;
    /**
     * <pre>
     *===================宠物系统end   预留370 - 400=================
     * </pre>
     *
     * <code>RCE_Pet_PetNumLessThanCoupTeamNeed = 373;</code>
     */
    public static final int RCE_Pet_PetNumLessThanCoupTeamNeed_VALUE = 373;
    /**
     * <pre>
     *魔晶编队中宠物等级差距过大
     * </pre>
     *
     * <code>RCE_Pet_CoupTeamPetLvDifferGreatly = 374;</code>
     */
    public static final int RCE_Pet_CoupTeamPetLvDifferGreatly_VALUE = 374;
    /**
     * <pre>
     *虚空宝石已解锁
     * </pre>
     *
     * <code>RCE_Pet_VoidStoneIsUnLock = 375;</code>
     */
    public static final int RCE_Pet_VoidStoneIsUnLock_VALUE = 375;
    /**
     * <pre>
     * 未达到等级要求
     * </pre>
     *
     * <code>RCE_Pet_LevelLimit = 376;</code>
     */
    public static final int RCE_Pet_LevelLimit_VALUE = 376;
    /**
     * <pre>
     *宠物品质达到最大等级
     * </pre>
     *
     * <code>RCE_Pet_RarityMaxLvLimit = 377;</code>
     */
    public static final int RCE_Pet_RarityMaxLvLimit_VALUE = 377;
    /**
     * <pre>
     *虚空宝石已达到最大等级
     * </pre>
     *
     * <code>RCE_Pet_VoidStoneMaxLvLimit = 378;</code>
     */
    public static final int RCE_Pet_VoidStoneMaxLvLimit_VALUE = 378;
    /**
     * <pre>
     *尚未获得虚空宝石
     * </pre>
     *
     * <code>RCE_Pet_VoidStoneNotExist = 379;</code>
     */
    public static final int RCE_Pet_VoidStoneNotExist_VALUE = 379;
    /**
     * <pre>
     *魔灵等级不能大于玩家等级
     * </pre>
     *
     * <code>RCE_Pet_PetLvGtPlayerLv = 380;</code>
     */
    public static final int RCE_Pet_PetLvGtPlayerLv_VALUE = 380;
    /**
     * <pre>
     * 强化失败：觉醒失败
     * </pre>
     *
     * <code>RCE_Pet_UpLvlFailure = 381;</code>
     */
    public static final int RCE_Pet_UpLvlFailure_VALUE = 381;
    /**
     * <pre>
     * 宠物不存在
     * </pre>
     *
     * <code>RCE_Pet_PetNotExist = 382;</code>
     */
    public static final int RCE_Pet_PetNotExist_VALUE = 382;
    /**
     * <pre>
     * 符文不存在
     * </pre>
     *
     * <code>RCE_Pet_RuneNotExist = 383;</code>
     */
    public static final int RCE_Pet_RuneNotExist_VALUE = 383;
    /**
     * <pre>
     * 快速完成委托已结束
     * </pre>
     *
     * <code>RCE_Pet_MissionAlreadyFinished = 384;</code>
     */
    public static final int RCE_Pet_MissionAlreadyFinished_VALUE = 384;
    /**
     * <pre>
     * 委托数已经达到最大
     * </pre>
     *
     * <code>RCE_Pet_MissionMaxError = 385;</code>
     */
    public static final int RCE_Pet_MissionMaxError_VALUE = 385;
    /**
     * <pre>
     * 委托未找到
     * </pre>
     *
     * <code>RCE_Pet_MissionNotFound = 386;</code>
     */
    public static final int RCE_Pet_MissionNotFound_VALUE = 386;
    /**
     * <pre>
     * 接受委托的宠物不合要求
     * </pre>
     *
     * <code>RCE_Pet_MissionPetNotCorrect = 387;</code>
     */
    public static final int RCE_Pet_MissionPetNotCorrect_VALUE = 387;
    /**
     * <pre>
     * 合成碎片数量不足
     * </pre>
     *
     * <code>RCE_Pet_FragmentNotEnough = 388;</code>
     */
    public static final int RCE_Pet_FragmentNotEnough_VALUE = 388;
    /**
     * <pre>
     * 碎片未找到
     * </pre>
     *
     * <code>RCE_Pet_FragmentNotFound = 389;</code>
     */
    public static final int RCE_Pet_FragmentNotFound_VALUE = 389;
    /**
     * <pre>
     * 宠物状态：锁定中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusLock = 390;</code>
     */
    public static final int RCE_Pet_PetStatusLock_VALUE = 390;
    /**
     * <pre>
     * 宠物状态：宠物委托中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusMissionLock = 391;</code>
     */
    public static final int RCE_Pet_PetStatusMissionLock_VALUE = 391;
    /**
     * <pre>
     * 宠物状态：宠物矿区中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusMineLock = 392;</code>
     */
    public static final int RCE_Pet_PetStatusMineLock_VALUE = 392;
    /**
     * <pre>
     * 宠物状态：宠物备战中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusTeamLock = 393;</code>
     */
    public static final int RCE_Pet_PetStatusTeamLock_VALUE = 393;
    /**
     * <pre>
     * 宠物状态：宠物转换中
     * </pre>
     *
     * <code>RCE_Pet_PetStatusChangeLock = 394;</code>
     */
    public static final int RCE_Pet_PetStatusChangeLock_VALUE = 394;
    /**
     * <pre>
     * 收集进度：不能领取奖励，奖励id/宠物收集进度错误
     * </pre>
     *
     * <code>RCE_Pet_PetColleciontRewardError = 395;</code>
     */
    public static final int RCE_Pet_PetColleciontRewardError_VALUE = 395;
    /**
     * <pre>
     * 宠物强化已到最大
     * </pre>
     *
     * <code>RCE_Pet_PetLvlMaxErroe = 396;</code>
     */
    public static final int RCE_Pet_PetLvlMaxErroe_VALUE = 396;
    /**
     * <pre>
     * 宠物符文已装备
     * </pre>
     *
     * <code>RCE_Pet_PetRuneAlreadyEquiped = 397;</code>
     */
    public static final int RCE_Pet_PetRuneAlreadyEquiped_VALUE = 397;
    /**
     * <pre>
     * 宠物背包容量不足
     * </pre>
     *
     * <code>RCE_Pet_PetBagNotEnough = 398;</code>
     */
    public static final int RCE_Pet_PetBagNotEnough_VALUE = 398;
    /**
     * <pre>
     * 符文背包容量不足
     * </pre>
     *
     * <code>RCE_Pet_RuneBagNotEnough = 399;</code>
     */
    public static final int RCE_Pet_RuneBagNotEnough_VALUE = 399;
    /**
     * <pre>
     *委托还未完成额
     * </pre>
     *
     * <code>RCE_Pet_MissionNotComplete = 400;</code>
     */
    public static final int RCE_Pet_MissionNotComplete_VALUE = 400;
    /**
     * <pre>
     *请求关卡配置为空
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointCfgIsNull = 401;</code>
     */
    public static final int RCE_MainLine_CheckPointCfgIsNull_VALUE = 401;
    /**
     * <pre>
     *请求关卡未解锁
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointIsLock = 402;</code>
     */
    public static final int RCE_MainLine_CheckPointIsLock_VALUE = 402;
    /**
     * <pre>
     *请求关卡不能战斗
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointCanNotBattle = 403;</code>
     */
    public static final int RCE_MainLine_CheckPointCanNotBattle_VALUE = 403;
    /**
     * <pre>
     *当前关卡闯关顺序错误
     * </pre>
     *
     * <code>RCE_MainLine_FightOrderError = 404;</code>
     */
    public static final int RCE_MainLine_FightOrderError_VALUE = 404;
    /**
     * <pre>
     *当前节点不可达
     * </pre>
     *
     * <code>RCE_MainLine_NodeCanNotReach = 405;</code>
     */
    public static final int RCE_MainLine_NodeCanNotReach_VALUE = 405;
    /**
     * <pre>
     *请求关卡与当前关卡不匹配
     * </pre>
     *
     * <code>RCE_MainLine_CurLvMissMatch = 406;</code>
     */
    public static final int RCE_MainLine_CurLvMissMatch_VALUE = 406;
    /**
     * <pre>
     *节点类型不能进行战斗
     * </pre>
     *
     * <code>RCE_MainLine_NodeTypeCanNotBattle = 407;</code>
     */
    public static final int RCE_MainLine_NodeTypeCanNotBattle_VALUE = 407;
    /**
     * <pre>
     *当前节点已经打过了
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeIsPassed = 408;</code>
     */
    public static final int RCE_MainLine_CurNodeIsPassed_VALUE = 408;
    /**
     * <pre>
     *玩家没有正在挂机的关卡
     * </pre>
     *
     * <code>RCE_MainLine_PlayerHaveNoOnhook = 409;</code>
     */
    public static final int RCE_MainLine_PlayerHaveNoOnhook_VALUE = 409;
    /**
     * <pre>
     *节点配置为空
     * </pre>
     *
     * <code>RCE_MainLine_NodeCfgIsNull = 410;</code>
     */
    public static final int RCE_MainLine_NodeCfgIsNull_VALUE = 410;
    /**
     * <pre>
     *当前节点未解锁
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeIsLock = 411;</code>
     */
    public static final int RCE_MainLine_CurNodeIsLock_VALUE = 411;
    /**
     * <pre>
     *当前节点还不能战斗
     * </pre>
     *
     * <code>RCE_MainLine_CurNodeCanNotBattle = 412;</code>
     */
    public static final int RCE_MainLine_CurNodeCanNotBattle_VALUE = 412;
    /**
     * <pre>
     *当前关卡的密码还未输入完毕
     * </pre>
     *
     * <code>RCE_MainLine_PswNotInputFinish = 413;</code>
     */
    public static final int RCE_MainLine_PswNotInputFinish_VALUE = 413;
    /**
     * <pre>
     *关卡类型不匹配
     * </pre>
     *
     * <code>RCE_MainLine_CheckPointTypeMissMatch = 414;</code>
     */
    public static final int RCE_MainLine_CheckPointTypeMissMatch_VALUE = 414;
    /**
     * <pre>
     *密码长度不匹配
     * </pre>
     *
     * <code>RCE_MainLine_PswLengthError = 415;</code>
     */
    public static final int RCE_MainLine_PswLengthError_VALUE = 415;
    /**
     * <pre>
     *输入非密码型关卡
     * </pre>
     *
     * <code>RCE_MainLine_InputNotPswNode = 416;</code>
     */
    public static final int RCE_MainLine_InputNotPswNode_VALUE = 416;
    /**
     * <pre>
     *重复输入相同密码
     * </pre>
     *
     * <code>RCE_MainLine_InputTheSamePsw = 417;</code>
     */
    public static final int RCE_MainLine_InputTheSamePsw_VALUE = 417;
    /**
     * <pre>
     *快速挂机次数当日已达上限
     * </pre>
     *
     * <code>RCE_MainLine_QuickOnHookLimit = 418;</code>
     */
    public static final int RCE_MainLine_QuickOnHookLimit_VALUE = 418;
    /**
     * <pre>
     *该主线阶段奖励已经领取过了
     * </pre>
     *
     * <code>RCE_MainLIne_ThisMainMissionRewardClaimed = 419;</code>
     */
    public static final int RCE_MainLIne_ThisMainMissionRewardClaimed_VALUE = 419;
    /**
     * <pre>
     *当前节点额外奖励已经领取过了
     * </pre>
     *
     * <code>RCE_MainLine_ThisAdditionRewardClaimed = 420;</code>
     */
    public static final int RCE_MainLine_ThisAdditionRewardClaimed_VALUE = 420;
    /**
     * <pre>
     *当前节点额外奖励无法领取
     * </pre>
     *
     * <code>RCE_MainLine_ThisAdditionRewardCanNotClaimed = 421;</code>
     */
    public static final int RCE_MainLine_ThisAdditionRewardCanNotClaimed_VALUE = 421;
    /**
     * <pre>
     *关键节点任务尚未完成
     * </pre>
     *
     * <code>RCE_MainLine_KeyNodeMissionNotComplete = 422;</code>
     */
    public static final int RCE_MainLine_KeyNodeMissionNotComplete_VALUE = 422;
    /**
     * <pre>
     *请先完成关键节点任务
     * </pre>
     *
     * <code>RCE_MainLine_CompleteKeyNodeMissionFirst = 423;</code>
     */
    public static final int RCE_MainLine_CompleteKeyNodeMissionFirst_VALUE = 423;
    /**
     * <pre>
     *===================巡逻队start   预留451 - 470===================
     * 当前位置不正确
     * </pre>
     *
     * <code>RCE_Patorl_ErrorLocation = 451;</code>
     */
    public static final int RCE_Patorl_ErrorLocation_VALUE = 451;
    /**
     * <pre>
     * 当前位置已被探索
     * </pre>
     *
     * <code>RCE_Patorl_Explored = 452;</code>
     */
    public static final int RCE_Patorl_Explored_VALUE = 452;
    /**
     * <pre>
     * 当前位置还未被探索
     * </pre>
     *
     * <code>RCE_Patrol_NotExplored = 453;</code>
     */
    public static final int RCE_Patrol_NotExplored_VALUE = 453;
    /**
     * <pre>
     * 探索事件不匹配
     * </pre>
     *
     * <code>RCE_Patorl_EventFail = 454;</code>
     */
    public static final int RCE_Patorl_EventFail_VALUE = 454;
    /**
     * <pre>
     * 当前已失败
     * </pre>
     *
     * <code>RCE_Patrol_FailureError = 455;</code>
     */
    public static final int RCE_Patrol_FailureError_VALUE = 455;
    /**
     * <pre>
     * 今日失败次数已达最大
     * </pre>
     *
     * <code>RCE_Patrol_DailyMaxFailure = 456;</code>
     */
    public static final int RCE_Patrol_DailyMaxFailure_VALUE = 456;
    /**
     * <pre>
     *贪婪值不满足
     * </pre>
     *
     * <code>RCE_Patrol_DissatisfyGreed = 457;</code>
     */
    public static final int RCE_Patrol_DissatisfyGreed_VALUE = 457;
    /**
     * <pre>
     *虚空秘境任务不存在
     * </pre>
     *
     * <code>RCE_Patrol_MissionNotExists = 458;</code>
     */
    public static final int RCE_Patrol_MissionNotExists_VALUE = 458;
    /**
     * <pre>
     *虚空秘境任务已结束
     * </pre>
     *
     * <code>RCE_Patrol_MissionEnd = 459;</code>
     */
    public static final int RCE_Patrol_MissionEnd_VALUE = 459;
    /**
     * <pre>
     *虚空秘境今天已打完
     * </pre>
     *
     * <code>RCE_Patrol_TodayAlreadyPlay = 460;</code>
     */
    public static final int RCE_Patrol_TodayAlreadyPlay_VALUE = 460;
    /**
     * <pre>
     *虚空秘境今天没打完
     * </pre>
     *
     * <code>RCE_Patrol_TodayNotFinishPlay = 461;</code>
     */
    public static final int RCE_Patrol_TodayNotFinishPlay_VALUE = 461;
    /**
     * <pre>
     *商品Id不存在
     * </pre>
     *
     * <code>RCE_Store_GoodsIdNotExist = 471;</code>
     */
    public static final int RCE_Store_GoodsIdNotExist_VALUE = 471;
    /**
     * <pre>
     *商品购买次数上限
     * </pre>
     *
     * <code>RCE_Store_GoodsBuyUpperLimit = 472;</code>
     */
    public static final int RCE_Store_GoodsBuyUpperLimit_VALUE = 472;
    /**
     * <pre>
     *刷新次数上限
     * </pre>
     *
     * <code>RCE_Store_RefreshTimesLimit = 473;</code>
     */
    public static final int RCE_Store_RefreshTimesLimit_VALUE = 473;
    /**
     * <pre>
     *该商店不支持手动刷新
     * </pre>
     *
     * <code>RCE_Store_UnsupportManualRefresh = 474;</code>
     */
    public static final int RCE_Store_UnsupportManualRefresh_VALUE = 474;
    /**
     * <pre>
     *===================目标系统start 预留491 - 510===================
     * </pre>
     *
     * <code>RCE_Target_MissionUnfinished = 491;</code>
     */
    public static final int RCE_Target_MissionUnfinished_VALUE = 491;
    /**
     * <pre>
     *任务奖励已经领取
     * </pre>
     *
     * <code>RCE_Target_MissionAlreadyClaim = 492;</code>
     */
    public static final int RCE_Target_MissionAlreadyClaim_VALUE = 492;
    /**
     * <pre>
     *任务配置Id不存在
     * </pre>
     *
     * <code>RCE_Target_MissionCfgIdNotExist = 493;</code>
     */
    public static final int RCE_Target_MissionCfgIdNotExist_VALUE = 493;
    /**
     * <pre>
     *任务未领取
     * </pre>
     *
     * <code>RCE_Target_MissionNotAccept = 494;</code>
     */
    public static final int RCE_Target_MissionNotAccept_VALUE = 494;
    /**
     * <pre>
     *===================勇气试炼start   预留511 - 530===================
     * </pre>
     *
     * <code>RCE_BraveChallenge_ChoosenDifficulty = 511;</code>
     */
    public static final int RCE_BraveChallenge_ChoosenDifficulty_VALUE = 511;
    /**
     * <pre>
     * 游戏已经结束
     * </pre>
     *
     * <code>RCE_BraveChallenge_AlreadyFinish = 512;</code>
     */
    public static final int RCE_BraveChallenge_AlreadyFinish_VALUE = 512;
    /**
     * <pre>
     *勇气试炼重生次数使用完
     * </pre>
     *
     * <code>RCE_BraveChallenge_RebornTimesUseUp = 513;</code>
     */
    public static final int RCE_BraveChallenge_RebornTimesUseUp_VALUE = 513;
    /**
     * <pre>
     *===================矿区争夺start   预留531 - 560===================
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundMineSvr = 531;</code>
     */
    public static final int RCE_MineFight_NotFoundMineSvr_VALUE = 531;
    /**
     * <pre>
     * 未找到战斗服
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundBattleSrv = 532;</code>
     */
    public static final int RCE_MineFight_NotFoundBattleSrv_VALUE = 532;
    /**
     * <pre>
     * 未找到矿
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundMine = 533;</code>
     */
    public static final int RCE_MineFight_NotFoundMine_VALUE = 533;
    /**
     * <pre>
     * 开采劵不足
     * </pre>
     *
     * <code>RCE_MineFight_NotEnoughtExploitScroll = 534;</code>
     */
    public static final int RCE_MineFight_NotEnoughtExploitScroll_VALUE = 534;
    /**
     * <pre>
     * 小队掠夺中
     * </pre>
     *
     * <code>RCE_MineFight_PetFormPlundering = 535;</code>
     */
    public static final int RCE_MineFight_PetFormPlundering_VALUE = 535;
    /**
     * <pre>
     * 小队开采中
     * </pre>
     *
     * <code>RCE_MineFight_PetFormExploiting = 536;</code>
     */
    public static final int RCE_MineFight_PetFormExploiting_VALUE = 536;
    /**
     * <pre>
     * 小队奖励未领取
     * </pre>
     *
     * <code>RCE_MineFight_NotClaimPetFormReward = 537;</code>
     */
    public static final int RCE_MineFight_NotClaimPetFormReward_VALUE = 537;
    /**
     * <pre>
     * 矿正在被掠夺
     * </pre>
     *
     * <code>RCE_MineFight_MineIsBattling = 538;</code>
     */
    public static final int RCE_MineFight_MineIsBattling_VALUE = 538;
    /**
     * <pre>
     * 小队宠物为空
     * </pre>
     *
     * <code>RCE_MineFight_EmptyPetForm = 539;</code>
     */
    public static final int RCE_MineFight_EmptyPetForm_VALUE = 539;
    /**
     * <pre>
     * 敌方已放弃掠夺
     * </pre>
     *
     * <code>RCE_MineFight_EnemyGiveUp = 540;</code>
     */
    public static final int RCE_MineFight_EnemyGiveUp_VALUE = 540;
    /**
     * <pre>
     * 正在进行其他战斗
     * </pre>
     *
     * <code>RCE_MineFight_PlayerBattling = 541;</code>
     */
    public static final int RCE_MineFight_PlayerBattling_VALUE = 541;
    /**
     * <pre>
     * 未进入矿区
     * </pre>
     *
     * <code>RCE_MineFight_NotInMineFight = 542;</code>
     */
    public static final int RCE_MineFight_NotInMineFight_VALUE = 542;
    /**
     * <pre>
     * 选择奖励类型错误
     * </pre>
     *
     * <code>RCE_MineFight_ChooseRewardErrorIndex = 543;</code>
     */
    public static final int RCE_MineFight_ChooseRewardErrorIndex_VALUE = 543;
    /**
     * <pre>
     * 该矿未占领
     * </pre>
     *
     * <code>RCE_MineFight_NotOccupiedMine = 544;</code>
     */
    public static final int RCE_MineFight_NotOccupiedMine_VALUE = 544;
    /**
     * <pre>
     * 矿状态错误
     * </pre>
     *
     * <code>RCE_MineFight_ErrorMineState = 545;</code>
     */
    public static final int RCE_MineFight_ErrorMineState_VALUE = 545;
    /**
     * <pre>
     * 奖励已被领取
     * </pre>
     *
     * <code>RCE_MineFight_ClaimedReward = 546;</code>
     */
    public static final int RCE_MineFight_ClaimedReward_VALUE = 546;
    /**
     * <pre>
     * 未达到等级要求
     * </pre>
     *
     * <code>RCE_MineFight_LevelLimit = 547;</code>
     */
    public static final int RCE_MineFight_LevelLimit_VALUE = 547;
    /**
     * <pre>
     * 开采劵配置错误
     * </pre>
     *
     * <code>RCE_MineFight_ScrollPriceError = 548;</code>
     */
    public static final int RCE_MineFight_ScrollPriceError_VALUE = 548;
    /**
     * <pre>
     * 已经有好友助阵
     * </pre>
     *
     * <code>RCE_MineFight_FriendHelping = 549;</code>
     */
    public static final int RCE_MineFight_FriendHelping_VALUE = 549;
    /**
     * <pre>
     * 好友未设置助阵阵容
     * </pre>
     *
     * <code>RCE_MineFight_EmptyFriendPetForm = 550;</code>
     */
    public static final int RCE_MineFight_EmptyFriendPetForm_VALUE = 550;
    /**
     * <pre>
     * 好友正在帮助其他玩家
     * </pre>
     *
     * <code>RCE_MineFight_FriendPetFormLocked = 551;</code>
     */
    public static final int RCE_MineFight_FriendPetFormLocked_VALUE = 551;
    /**
     * <pre>
     * 好友拒绝帮助
     * </pre>
     *
     * <code>RCE_MineFight_FriendRefused = 552;</code>
     */
    public static final int RCE_MineFight_FriendRefused_VALUE = 552;
    /**
     * <pre>
     * 已经发送过申请了
     * </pre>
     *
     * <code>RCE_MineFight_AppliedFriendHelp = 553;</code>
     */
    public static final int RCE_MineFight_AppliedFriendHelp_VALUE = 553;
    /**
     * <pre>
     * 未找到小队信息
     * </pre>
     *
     * <code>RCE_MineFight_NotFoundPetForm = 554;</code>
     */
    public static final int RCE_MineFight_NotFoundPetForm_VALUE = 554;
    /**
     * <pre>
     * 战斗中无法退出
     * </pre>
     *
     * <code>RCE_MineFight_ExitFailedForBattling = 555;</code>
     */
    public static final int RCE_MineFight_ExitFailedForBattling_VALUE = 555;
    /**
     * <pre>
     * 奖励对象已过期
     * </pre>
     *
     * <code>RCE_MineFight_BeyondGiftExpire = 556;</code>
     */
    public static final int RCE_MineFight_BeyondGiftExpire_VALUE = 556;
    /**
     * <pre>
     * 该好友正在帮助你，做人要厚道
     * </pre>
     *
     * <code>RCE_MineFight_FriendIsHelpingYou = 557;</code>
     */
    public static final int RCE_MineFight_FriendIsHelpingYou_VALUE = 557;
    /**
     * <pre>
     * 只能助阵一个好友
     * </pre>
     *
     * <code>RCE_MineFight_CanNotHelpMultiFriend = 558;</code>
     */
    public static final int RCE_MineFight_CanNotHelpMultiFriend_VALUE = 558;
    /**
     * <pre>
     * 不能掠夺正在助阵的好友
     * </pre>
     *
     * <code>RCE_MineFight_CannotOccupyHelpingFriend = 559;</code>
     */
    public static final int RCE_MineFight_CannotOccupyHelpingFriend_VALUE = 559;
    /**
     * <pre>
     *===================远古召唤start   预留561 - 580===================
     * </pre>
     *
     * <code>RCE_AncientCall_PetInTeam = 561;</code>
     */
    public static final int RCE_AncientCall_PetInTeam_VALUE = 561;
    /**
     * <pre>
     *不支持的宠物转化类型
     * </pre>
     *
     * <code>RCE_PetTransfer_UnsupportedTransferType = 562;</code>
     */
    public static final int RCE_PetTransfer_UnsupportedTransferType_VALUE = 562;
    /**
     * <pre>
     *当期没有宠物可以转化
     * </pre>
     *
     * <code>RCE_PetTramsfer_HavaNoPetInTrsnsfer = 563;</code>
     */
    public static final int RCE_PetTramsfer_HavaNoPetInTrsnsfer_VALUE = 563;
    /**
     * <pre>
     *===================资源副本  start 预留581 - 600===================
     * </pre>
     *
     * <code>RCE_ResCopy_ChallengeTimesLimit = 581;</code>
     */
    public static final int RCE_ResCopy_ChallengeTimesLimit_VALUE = 581;
    /**
     * <pre>
     *购买次数上限
     * </pre>
     *
     * <code>RCE_ResCopy_BuyTimesLimit = 582;</code>
     */
    public static final int RCE_ResCopy_BuyTimesLimit_VALUE = 582;
    /**
     * <pre>
     *挑战次数上限
     * </pre>
     *
     * <code>RCE_ResCopy_FightIsLimit = 583;</code>
     */
    public static final int RCE_ResCopy_FightIsLimit_VALUE = 583;
    /**
     * <pre>
     *关卡不能挑战
     * </pre>
     *
     * <code>RCE_ResCopy_IndexCanNotFight = 584;</code>
     */
    public static final int RCE_ResCopy_IndexCanNotFight_VALUE = 584;
    /**
     * <pre>
     *活动未开启
     * </pre>
     *
     * <code>RCE_Activity_NotOpen = 601;</code>
     */
    public static final int RCE_Activity_NotOpen_VALUE = 601;
    /**
     * <pre>
     *活动货币不足
     * </pre>
     *
     * <code>RCE_Activity_CurrencyNotEnough = 602;</code>
     */
    public static final int RCE_Activity_CurrencyNotEnough_VALUE = 602;
    /**
     * <pre>
     *活动已经超过时间
     * </pre>
     *
     * <code>RCE_Activity_MissionOutOfTime = 603;</code>
     */
    public static final int RCE_Activity_MissionOutOfTime_VALUE = 603;
    /**
     * <pre>
     *当前不能领取奖励
     * </pre>
     *
     * <code>RCE_Activity_MissionCanNotClaim = 604;</code>
     */
    public static final int RCE_Activity_MissionCanNotClaim_VALUE = 604;
    /**
     * <pre>
     *奖励已领取
     * </pre>
     *
     * <code>RCE_Activity_RewardAlreadyClaim = 605;</code>
     */
    public static final int RCE_Activity_RewardAlreadyClaim_VALUE = 605;
    /**
     * <pre>
     *重复签到
     * </pre>
     *
     * <code>RCE_Activity_RepeatedSignIn = 606;</code>
     */
    public static final int RCE_Activity_RepeatedSignIn_VALUE = 606;
    /**
     * <pre>
     *兑换已达上限
     * </pre>
     *
     * <code>RCE_Activity_ExTimesLimit = 607;</code>
     */
    public static final int RCE_Activity_ExTimesLimit_VALUE = 607;
    /**
     * <pre>
     *不满足兑换条件
     * </pre>
     *
     * <code>RCE_Activity_DissatisfyAddition = 608;</code>
     */
    public static final int RCE_Activity_DissatisfyAddition_VALUE = 608;
    /**
     * <pre>
     *当前任务已过期
     * </pre>
     *
     * <code>RCE_Activity_MissionIsExpire = 609;</code>
     */
    public static final int RCE_Activity_MissionIsExpire_VALUE = 609;
    /**
     * <pre>
     *积分不足
     * </pre>
     *
     * <code>RCE_Activity_PointNotEnough = 610;</code>
     */
    public static final int RCE_Activity_PointNotEnough_VALUE = 610;
    /**
     * <pre>
     *重复购买
     * </pre>
     *
     * <code>RCE_Activity_RepeatedBuy = 611;</code>
     */
    public static final int RCE_Activity_RepeatedBuy_VALUE = 611;
    /**
     * <pre>
     * 符文已锁定
     * </pre>
     *
     * <code>RCE_Pet_PetRuneLock = 651;</code>
     */
    public static final int RCE_Pet_PetRuneLock_VALUE = 651;
    /**
     * <pre>
     * 符文升级：材料符文错误
     * </pre>
     *
     * <code>RCE_Pet_RuneMaterailRuneError = 652;</code>
     */
    public static final int RCE_Pet_RuneMaterailRuneError_VALUE = 652;
    /**
     * <pre>
     * 符文升级：等级已满
     * </pre>
     *
     * <code>RCE_Pet_RuneLvlMaxError = 653;</code>
     */
    public static final int RCE_Pet_RuneLvlMaxError_VALUE = 653;
    /**
     * <pre>
     *宠物宝石不存在
     * </pre>
     *
     * <code>RCE_Pet_GemNotExist = 654;</code>
     */
    public static final int RCE_Pet_GemNotExist_VALUE = 654;
    /**
     * <pre>
     *宠物宝石已锁定
     * </pre>
     *
     * <code>RCE_Pet_PetGemLock = 655;</code>
     */
    public static final int RCE_Pet_PetGemLock_VALUE = 655;
    /**
     * <pre>
     *宠物宝石已装备
     * </pre>
     *
     * <code>RCE_Pet_PetGemAlreadyEquip = 656;</code>
     */
    public static final int RCE_Pet_PetGemAlreadyEquip_VALUE = 656;
    /**
     * <pre>
     *排行榜宠物不存在或被放生
     * </pre>
     *
     * <code>RCE_Pet_RankingPetNotExist = 657;</code>
     */
    public static final int RCE_Pet_RankingPetNotExist_VALUE = 657;
    /**
     * <pre>
     *当前宠物不符合条件
     * </pre>
     *
     * <code>RCE_Pet_NotMathCondition = 658;</code>
     */
    public static final int RCE_Pet_NotMathCondition_VALUE = 658;
    /**
     * <pre>
     *宠物进化到最大等级
     * </pre>
     *
     * <code>RCE_Pet_MaxEvolveLvLimit = 659;</code>
     */
    public static final int RCE_Pet_MaxEvolveLvLimit_VALUE = 659;
    /**
     * <pre>
     *没有可完成的宠物委托任务
     * </pre>
     *
     * <code>RCE_Pet_NoCanCompleteMission = 660;</code>
     */
    public static final int RCE_Pet_NoCanCompleteMission_VALUE = 660;
    /**
     * <pre>
     *================== 激活码 start  700 - 750========================
     * </pre>
     *
     * <code>RCE_ActiveCode_LoseEfficacy = 701;</code>
     */
    public static final int RCE_ActiveCode_LoseEfficacy_VALUE = 701;
    /**
     * <pre>
     *激活码已被使用
     * </pre>
     *
     * <code>RCE_ActiveCode_Used = 702;</code>
     */
    public static final int RCE_ActiveCode_Used_VALUE = 702;
    /**
     * <pre>
     *激活码错误
     * </pre>
     *
     * <code>RCE_ActiveCode_Error = 703;</code>
     */
    public static final int RCE_ActiveCode_Error_VALUE = 703;
    /**
     * <pre>
     *激活码使用次数上限
     * </pre>
     *
     * <code>RCE_ActiveCode_UpperLimit = 704;</code>
     */
    public static final int RCE_ActiveCode_UpperLimit_VALUE = 704;
    /**
     * <pre>
     *使用过同类型的激活码
     * </pre>
     *
     * <code>RCE_ActiveCode_UseSameTypeCode = 705;</code>
     */
    public static final int RCE_ActiveCode_UseSameTypeCode_VALUE = 705;
    /**
     * <pre>
     *================== 新手引导 start  751 - 800==========================
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedName = 751;</code>
     */
    public static final int RCE_NewBee_RepeatedName_VALUE = 751;
    /**
     * <pre>
     *新手引导领取宠物
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedChoicePet = 752;</code>
     */
    public static final int RCE_NewBee_RepeatedChoicePet_VALUE = 752;
    /**
     * <pre>
     *新手引导重复抽卡
     * </pre>
     *
     * <code>RCE_NewBee_RepeatedDrawCard = 753;</code>
     */
    public static final int RCE_NewBee_RepeatedDrawCard_VALUE = 753;
    /**
     * <pre>
     *新手引导迷雾森林奖励配置错误
     * </pre>
     *
     * <code>RCE_NewBee_MistRewardCfgError = 754;</code>
     */
    public static final int RCE_NewBee_MistRewardCfgError_VALUE = 754;
    /**
     * <pre>
     *新手引导已经领取过迷雾森林宝箱
     * </pre>
     *
     * <code>RCE_NewBee_ClaimedMistNewbeeReward = 755;</code>
     */
    public static final int RCE_NewBee_ClaimedMistNewbeeReward_VALUE = 755;
    /**
     * <pre>
     *================== 竞技场 start  801 - 850==========================
     * </pre>
     *
     * <code>RCE_Arena_ChallengeItemNotEnough = 801;</code>
     */
    public static final int RCE_Arena_ChallengeItemNotEnough_VALUE = 801;
    /**
     * <pre>
     *挑战道具持有上限
     * </pre>
     *
     * <code>RCE_Arena_ChallengeItemOwnedCap = 802;</code>
     */
    public static final int RCE_Arena_ChallengeItemOwnedCap_VALUE = 802;
    /**
     * <pre>
     *无法挑战
     * </pre>
     *
     * <code>RCE_Arena_OpponentCanNotBattle = 803;</code>
     */
    public static final int RCE_Arena_OpponentCanNotBattle_VALUE = 803;
    /**
     * <pre>
     *分配房间失败
     * </pre>
     *
     * <code>RCE_Arena_AllocationRoomFailed = 804;</code>
     */
    public static final int RCE_Arena_AllocationRoomFailed_VALUE = 804;
    /**
     * <pre>
     *玩家不存在
     * </pre>
     *
     * <code>RCE_Arena_PlayerIsNotExist = 805;</code>
     */
    public static final int RCE_Arena_PlayerIsNotExist_VALUE = 805;
    /**
     * <pre>
     *未找到竞技场服务器
     * </pre>
     *
     * <code>RCE_Arena_CanNotFindServer = 806;</code>
     */
    public static final int RCE_Arena_CanNotFindServer_VALUE = 806;
    /**
     * <pre>
     *================== boss战活动 start  851 - 860==========================
     * </pre>
     *
     * <code>RCE_ActivityBoss_Closed = 851;</code>
     */
    public static final int RCE_ActivityBoss_Closed_VALUE = 851;
    /**
     * <pre>
     * 今日次数已用尽
     * </pre>
     *
     * <code>RCE_ActivityBoss_UseUpTime = 852;</code>
     */
    public static final int RCE_ActivityBoss_UseUpTime_VALUE = 852;
    /**
     * <pre>
     *刷新过于频繁
     * </pre>
     *
     * <code>RCE_Arena_RefreshFrequently = 853;</code>
     */
    public static final int RCE_Arena_RefreshFrequently_VALUE = 853;
    /**
     * <pre>
     *不能再购买
     * </pre>
     *
     * <code>RCE_ActivityBoss_CanNotBuyMore = 854;</code>
     */
    public static final int RCE_ActivityBoss_CanNotBuyMore_VALUE = 854;
    /**
     * <pre>
     * </pre>
     *
     * <code>RCE_ActivityBoss_PlayerLvLimit = 855;</code>
     */
    public static final int RCE_ActivityBoss_PlayerLvLimit_VALUE = 855;
    /**
     * <pre>
     *================== 通用评论 start  861 - 870==========================
     * </pre>
     *
     * <code>RCE_Comment_NotFoundComment = 861;</code>
     */
    public static final int RCE_Comment_NotFoundComment_VALUE = 861;
    /**
     * <pre>
     * 类型参数错误
     * </pre>
     *
     * <code>RCE_Comment_ErrorParam = 862;</code>
     */
    public static final int RCE_Comment_ErrorParam_VALUE = 862;
    /**
     * <pre>
     * 评论内容超过最大长度
     * </pre>
     *
     * <code>RCE_Comment_ErrorLength = 863;</code>
     */
    public static final int RCE_Comment_ErrorLength_VALUE = 863;
    /**
     * <pre>
     * 评论内容为空
     * </pre>
     *
     * <code>RCE_Comment_EmptyContent = 864;</code>
     */
    public static final int RCE_Comment_EmptyContent_VALUE = 864;
    /**
     * <pre>
     * 评论包含非法字符
     * </pre>
     *
     * <code>RCE_Comment_InvalidWord = 865;</code>
     */
    public static final int RCE_Comment_InvalidWord_VALUE = 865;
    /**
     * <pre>
     * 已点赞，不可重复操作
     * </pre>
     *
     * <code>RCE_Comment_AlreadyLiked = 866;</code>
     */
    public static final int RCE_Comment_AlreadyLiked_VALUE = 866;
    /**
     * <pre>
     * 已评论，不可重复操作
     * </pre>
     *
     * <code>RCE_Comment_AlreadyComment = 867;</code>
     */
    public static final int RCE_Comment_AlreadyComment_VALUE = 867;
    /**
     * <pre>
     *================== 购买月卡 start  871 - 880==========================
     * </pre>
     *
     * <code>RCE_MonthCard_NotFound = 871;</code>
     */
    public static final int RCE_MonthCard_NotFound_VALUE = 871;
    /**
     * <pre>
     * 超过购买限制
     * </pre>
     *
     * <code>RCE_MonthCard_LimitBuy = 872;</code>
     */
    public static final int RCE_MonthCard_LimitBuy_VALUE = 872;
    /**
     * <pre>
     *月卡已激活
     * </pre>
     *
     * <code>RCE_MonthCard_AlreadyActive = 873;</code>
     */
    public static final int RCE_MonthCard_AlreadyActive_VALUE = 873;
    /**
     * <pre>
     *================== 购买功勋 start  881 - 900==========================
     * </pre>
     *
     * <code>RCE_Feats_NotEnough = 881;</code>
     */
    public static final int RCE_Feats_NotEnough_VALUE = 881;
    /**
     * <pre>
     * 奖励已领取
     * </pre>
     *
     * <code>RCE_Feats_RewardAlreadyClaim = 882;</code>
     */
    public static final int RCE_Feats_RewardAlreadyClaim_VALUE = 882;
    /**
     * <pre>
     * 超过购买限制
     * </pre>
     *
     * <code>RCE_Feats_HasBuyAdvancedFeats = 883;</code>
     */
    public static final int RCE_Feats_HasBuyAdvancedFeats_VALUE = 883;
    /**
     * <pre>
     *功勋已激活
     * </pre>
     *
     * <code>RCE_Feats_AlreadyActive = 884;</code>
     */
    public static final int RCE_Feats_AlreadyActive_VALUE = 884;
    /**
     * <pre>
     *================== 充值 start  901 - 920==========================
     * </pre>
     *
     * <code>RCE_Recharge_Success = 902;</code>
     */
    public static final int RCE_Recharge_Success_VALUE = 902;
    /**
     * <pre>
     *================== 版署 start  921 - 950==========================
     * </pre>
     *
     * <code>RCE_BanShu_OutOfLimit = 921;</code>
     */
    public static final int RCE_BanShu_OutOfLimit_VALUE = 921;
    /**
     * <pre>
     *================== 成长基金 start  951 - 960==========================
     * </pre>
     *
     * <code>RCE_GrowthFund_NotBuy = 951;</code>
     */
    public static final int RCE_GrowthFund_NotBuy_VALUE = 951;
    /**
     * <pre>
     *================== 外接广告 start  961 - 970==========================
     * </pre>
     *
     * <code>RCE_AdsBonus_NoBonusTimes = 961;</code>
     */
    public static final int RCE_AdsBonus_NoBonusTimes_VALUE = 961;
    /**
     * <pre>
     *广告次数已用完
     * </pre>
     *
     * <code>RCE_AdsBonus_NoWatchAdsTimes = 962;</code>
     */
    public static final int RCE_AdsBonus_NoWatchAdsTimes_VALUE = 962;
    /**
     * <pre>
     *非奖励玩家
     * </pre>
     *
     * <code>RCE_AdsBonus_InvalidPlayer = 963;</code>
     */
    public static final int RCE_AdsBonus_InvalidPlayer_VALUE = 963;
    /**
     * <pre>
     *================== 成长基金 start  971 - 980==========================
     * </pre>
     *
     * <code>RCE_TimeLimitGift_NotActive = 964;</code>
     */
    public static final int RCE_TimeLimitGift_NotActive_VALUE = 964;
    /**
     * <pre>
     *================== 举报 start  981 - 1000==========================
     * </pre>
     *
     * <code>RCE_Report_Repeated = 981;</code>
     */
    public static final int RCE_Report_Repeated_VALUE = 981;
    /**
     * <pre>
     *举报次数已达上限
     * </pre>
     *
     * <code>RCE_Report_TimesLimit = 982;</code>
     */
    public static final int RCE_Report_TimesLimit_VALUE = 982;
    /**
     * <pre>
     *禁评
     * </pre>
     *
     * <code>RCE_Ban_Comment = 983;</code>
     */
    public static final int RCE_Ban_Comment_VALUE = 983;
    /**
     * <pre>
     *================== 统计/埋点 start  1101 - 1110==========================
     * </pre>
     *
     * <code>RCE_UploadTooFast = 1101;</code>
     */
    public static final int RCE_UploadTooFast_VALUE = 1101;
    /**
     * <pre>
     *==================玩家技能 start  1111 - 1130==========================
     * </pre>
     *
     * <code>RCE_Player_SkillMaxLvError = 1111;</code>
     */
    public static final int RCE_Player_SkillMaxLvError_VALUE = 1111;
    /**
     * <pre>
     *玩家技能星级上限
     * </pre>
     *
     * <code>RCE_Player_SkillMaxStarError = 1112;</code>
     */
    public static final int RCE_Player_SkillMaxStarError_VALUE = 1112;
    /**
     * <pre>
     *玩家技能星级上限
     * </pre>
     *
     * <code>RCE_Player_SkillNotExists = 1113;</code>
     */
    public static final int RCE_Player_SkillNotExists_VALUE = 1113;
    /**
     * <pre>
     *玩家技能未激活
     * </pre>
     *
     * <code>RCE_Player_SkillNotActive = 1114;</code>
     */
    public static final int RCE_Player_SkillNotActive_VALUE = 1114;
    /**
     * <pre>
     *================== 魔灵降临 start  1131 - 1150==========================
     * </pre>
     *
     * <code>RCE_DemonDescends_RechargeItemAlreadyClaimed = 1131;</code>
     */
    public static final int RCE_DemonDescends_RechargeItemAlreadyClaimed_VALUE = 1131;
    /**
     * <pre>
     *魔灵降临道具购买上限
     * </pre>
     *
     * <code>RCE_DemonDescends_ItemBuyLimit = 1132;</code>
     */
    public static final int RCE_DemonDescends_ItemBuyLimit_VALUE = 1132;
    /**
     * <pre>
     *================== 魔灵降临 start  1151 - 1170========================
     * </pre>
     *
     * <code>RCE_Hades_RemainNoWorshipTimes = 1151;</code>
     */
    public static final int RCE_Hades_RemainNoWorshipTimes_VALUE = 1151;
    /**
     * <pre>
     *================== 新称号系统 start  1171 - 1190========================
     * </pre>
     *
     * <code>RCE_NewTitle_Inactivated = 1171;</code>
     */
    public static final int RCE_NewTitle_Inactivated_VALUE = 1171;
    /**
     * <pre>
     *称号已过期
     * </pre>
     *
     * <code>RCE_NewTitle_Expired = 1172;</code>
     */
    public static final int RCE_NewTitle_Expired_VALUE = 1172;
    /**
     * <pre>
     *称号未装备
     * </pre>
     *
     * <code>RCE_NewTitle_NotEquip = 1173;</code>
     */
    public static final int RCE_NewTitle_NotEquip_VALUE = 1173;
    /**
     * <pre>
     *================== 荣耀之路 start  1191 - 1250==========================
     * </pre>
     *
     * <code>RCE_GloryRoad_RedBag_OutOfTime = 1191;</code>
     */
    public static final int RCE_GloryRoad_RedBag_OutOfTime_VALUE = 1191;
    /**
     * <pre>
     *红包已经领取过了
     * </pre>
     *
     * <code>RCE_GloryRoad_RedBag_AlreadyClaimed = 1192;</code>
     */
    public static final int RCE_GloryRoad_RedBag_AlreadyClaimed_VALUE = 1192;
    /**
     * <pre>
     *不在竞猜时间段内
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_OutOfTime = 1193;</code>
     */
    public static final int RCE_GloryRoad_Quiz_OutOfTime_VALUE = 1193;
    /**
     * <pre>
     *已经竞猜过了
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_AlreadySupported = 1194;</code>
     */
    public static final int RCE_GloryRoad_Quiz_AlreadySupported_VALUE = 1194;
    /**
     * <pre>
     *非法评论
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_IllegalComment = 1195;</code>
     */
    public static final int RCE_GloryRoad_Quiz_IllegalComment_VALUE = 1195;
    /**
     * <pre>
     *评论过长
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_CommentTooLong = 1196;</code>
     */
    public static final int RCE_GloryRoad_Quiz_CommentTooLong_VALUE = 1196;
    /**
     * <pre>
     *评论过于频繁
     * </pre>
     *
     * <code>RCE_GloryRoad_Quiz_CommentFrequently = 1197;</code>
     */
    public static final int RCE_GloryRoad_Quiz_CommentFrequently_VALUE = 1197;
    /**
     * <pre>
     *确认战斗超时
     * </pre>
     *
     * <code>RCE_GloryRoad_EnsureOutOfTime = 1198;</code>
     */
    public static final int RCE_GloryRoad_EnsureOutOfTime_VALUE = 1198;
    /**
     * <pre>
     *================== 远征战斗 start  1251 - 1280==========================
     * </pre>
     *
     * <code>RCE_TheWar_NotJoinTheWar = 1251;</code>
     */
    public static final int RCE_TheWar_NotJoinTheWar_VALUE = 1251;
    /**
     * <pre>
     *远征未开启
     * </pre>
     *
     * <code>RCE_TheWar_NotOpen = 1252;</code>
     */
    public static final int RCE_TheWar_NotOpen_VALUE = 1252;
    /**
     * <pre>
     *远征已结束
     * </pre>
     *
     * <code>RCE_TheWar_RoomEnded = 1253;</code>
     */
    public static final int RCE_TheWar_RoomEnded_VALUE = 1253;
    /**
     * <pre>
     *未找到远征地图
     * </pre>
     *
     * <code>RCE_TheWar_NotFoundMap = 1254;</code>
     */
    public static final int RCE_TheWar_NotFoundMap_VALUE = 1254;
    /**
     * <pre>
     *正在攻击其他格子
     * </pre>
     *
     * <code>RCE_TheWar_AttackOtherGrid = 1255;</code>
     */
    public static final int RCE_TheWar_AttackOtherGrid_VALUE = 1255;
    /**
     * <pre>
     *附加没有友方占领格子
     * </pre>
     *
     * <code>RCE_TheWar_NotFoundAroundTeamGrid = 1256;</code>
     */
    public static final int RCE_TheWar_NotFoundAroundTeamGrid_VALUE = 1256;
    /**
     * <pre>
     *阻挡格子无法攻击
     * </pre>
     *
     * <code>RCE_TheWar_BlockGrid = 1257;</code>
     */
    public static final int RCE_TheWar_BlockGrid_VALUE = 1257;
    /**
     * <pre>
     *职位配置未找到，无法获取最大占领格子数
     * </pre>
     *
     * <code>RCE_TheWar_JobTileCfgError = 1258;</code>
     */
    public static final int RCE_TheWar_JobTileCfgError_VALUE = 1258;
    /**
     * <pre>
     *占领格子数达到上限
     * </pre>
     *
     * <code>RCE_TheWar_LimitOccupyGridNum = 1259;</code>
     */
    public static final int RCE_TheWar_LimitOccupyGridNum_VALUE = 1259;
    /**
     * <pre>
     *该格子是出生点
     * </pre>
     *
     * <code>RCE_TheWar_TargetGridIsPlayerSpawn = 1260;</code>
     */
    public static final int RCE_TheWar_TargetGridIsPlayerSpawn_VALUE = 1260;
    /**
     * <pre>
     *其他玩家正在攻击该格子
     * </pre>
     *
     * <code>RCE_TheWar_OtherPlayerAttacking = 1261;</code>
     */
    public static final int RCE_TheWar_OtherPlayerAttacking_VALUE = 1261;
    /**
     * <pre>
     *占领冷却中
     * </pre>
     *
     * <code>RCE_TheWar_OccupyProtecting = 1262;</code>
     */
    public static final int RCE_TheWar_OccupyProtecting_VALUE = 1262;
    /**
     * <pre>
     *队友格子无法占领
     * </pre>
     *
     * <code>RCE_TheWar_TeamGrid = 1263;</code>
     */
    public static final int RCE_TheWar_TeamGrid_VALUE = 1263;
    /**
     * <pre>
     *体力不足
     * </pre>
     *
     * <code>RCE_TheWar_StaminaNotEnough = 1264;</code>
     */
    public static final int RCE_TheWar_StaminaNotEnough_VALUE = 1264;
    /**
     * <pre>
     *战斗队伍为空
     * </pre>
     *
     * <code>RCE_TheWar_EmptyPetTeam = 1265;</code>
     */
    public static final int RCE_TheWar_EmptyPetTeam_VALUE = 1265;
    /**
     * <pre>
     *非法格子
     * </pre>
     *
     * <code>RCE_TheWar_InvalidGrid = 1266;</code>
     */
    public static final int RCE_TheWar_InvalidGrid_VALUE = 1266;
    /**
     * <pre>
     *未找到远征服务器
     * </pre>
     *
     * <code>RCE_TheWar_NotFoundWarServer = 1280;</code>
     */
    public static final int RCE_TheWar_NotFoundWarServer_VALUE = 1280;
    /**
     * <pre>
     *================== 大富翁 start  1300 - 1320==========================
     * </pre>
     *
     * <code>RCE_RichMan_NotEnoughDice = 1300;</code>
     */
    public static final int RCE_RichMan_NotEnoughDice_VALUE = 1300;
    /**
     * <pre>
     *================== 大富翁 start  1321 - 1340==========================
     * </pre>
     *
     * <code>RCE_Inscription_GemLvNotEnough = 132;</code>
     */
    public static final int RCE_Inscription_GemLvNotEnough_VALUE = 132;
    /**
     * <pre>
     *材料不存在
     * </pre>
     *
     * <code>RCE_Inscription_MaterialNotExists = 133;</code>
     */
    public static final int RCE_Inscription_MaterialNotExists_VALUE = 133;
    /**
     * <pre>
     *================== 战斗补充 start  1321 - 1350=======================
     * </pre>
     *
     * <code>RCE_BattlePlayBack_VersionMissMatching = 1321;</code>
     */
    public static final int RCE_BattlePlayBack_VersionMissMatching_VALUE = 1321;
    /**
     * <pre>
     *战斗中
     * </pre>
     *
     * <code>RCE_Battle_Batting = 1322;</code>
     */
    public static final int RCE_Battle_Batting_VALUE = 1322;
    /**
     * <pre>
     *无法挑战自己
     * </pre>
     *
     * <code>RCE_Battle_CanNotChallengeSelf = 1323;</code>
     */
    public static final int RCE_Battle_CanNotChallengeSelf_VALUE = 1323;
    /**
     * <pre>
     *================== 匹配竞技场 start  1351 - 1400=====================
     * </pre>
     *
     * <code>RCE_MatchArena_CanNotCancelMatch = 1351;</code>
     */
    public static final int RCE_MatchArena_CanNotCancelMatch_VALUE = 1351;
    /**
     * <pre>
     *不在匹配状态
     * </pre>
     *
     * <code>RCE_MatchArena_NotInMatchStatus = 1352;</code>
     */
    public static final int RCE_MatchArena_NotInMatchStatus_VALUE = 1352;
    /**
     * <pre>
     *玩家数据不存在
     * </pre>
     *
     * <code>RCE_MatchArena_PlayerInfoNotFount = 1353;</code>
     */
    public static final int RCE_MatchArena_PlayerInfoNotFount_VALUE = 1353;
    /**
     * <pre>
     *更新数据失败
     * </pre>
     *
     * <code>RCE_MatchArena_UpdateDataFailed = 1354;</code>
     */
    public static final int RCE_MatchArena_UpdateDataFailed_VALUE = 1354;
    /**
     * <pre>
     *重复匹配
     * </pre>
     *
     * <code>RCE_MatchArena_RepeatedMatching = 1355;</code>
     */
    public static final int RCE_MatchArena_RepeatedMatching_VALUE = 1355;
    /**
     * <pre>
     *战斗结束
     * </pre>
     *
     * <code>RCE_MatchArenaLT_BattleEnd = 1356;</code>
     */
    public static final int RCE_MatchArenaLT_BattleEnd_VALUE = 1356;
    /**
     * <pre>
     *段位不匹配
     * </pre>
     *
     * <code>RCE_MatchArenaLT_STAGE_NOTEQ = 1357;</code>
     */
    public static final int RCE_MatchArenaLT_STAGE_NOTEQ_VALUE = 1357;
    /**
     * <pre>
     *擂台战斗中
     * </pre>
     *
     * <code>RCE_MatchArenaLT_NOT_WAIT = 1358;</code>
     */
    public static final int RCE_MatchArenaLT_NOT_WAIT_VALUE = 1358;
    /**
     * <pre>
     *您已经不在该擂台
     * </pre>
     *
     * <code>RCE_MatchArenaLT_NOT_MYLT = 1359;</code>
     */
    public static final int RCE_MatchArenaLT_NOT_MYLT_VALUE = 1359;
    /**
     * <pre>
     *擂台非战斗中
     * </pre>
     *
     * <code>RCE_MatchArenaLT_NOT_FIGHT = 1360;</code>
     */
    public static final int RCE_MatchArenaLT_NOT_FIGHT_VALUE = 1360;
    /**
     * <pre>
     *重复竞猜
     * </pre>
     *
     * <code>RCE_MatchArenaLT_RPEI_GUESS = 1361;</code>
     */
    public static final int RCE_MatchArenaLT_RPEI_GUESS_VALUE = 1361;
    /**
     * <pre>
     *不可以挑战自己
     * </pre>
     *
     * <code>RCE_MatchArenaLT_NOATTMY = 1362;</code>
     */
    public static final int RCE_MatchArenaLT_NOATTMY_VALUE = 1362;
    /**
     * <pre>
     *同时只能参与一个擂台
     * </pre>
     *
     * <code>RCE_MatchArenaLT_RPT = 1363;</code>
     */
    public static final int RCE_MatchArenaLT_RPT_VALUE = 1363;
    /**
     * <pre>
     *擂台玩法中
     * </pre>
     *
     * <code>RCE_MatchArenaLT_LTING = 1364;</code>
     */
    public static final int RCE_MatchArenaLT_LTING_VALUE = 1364;
    /**
     * <pre>
     *玩家已加入匹配竞技场匹配中
     * </pre>
     *
     * <code>RCE_MatchArena_PlayerIsMatching = 1365;</code>
     */
    public static final int RCE_MatchArena_PlayerIsMatching_VALUE = 1365;
    /**
     * <pre>
     *该擂台已经不存在
     * </pre>
     *
     * <code>RCE_CrossArena_TableNull = 1366;</code>
     */
    public static final int RCE_CrossArena_TableNull_VALUE = 1366;
    /**
     * <pre>
     *该擂台已经有人
     * </pre>
     *
     * <code>RCE_CrossArena_TableHavep = 1367;</code>
     */
    public static final int RCE_CrossArena_TableHavep_VALUE = 1367;
    /**
     * <pre>
     *该擂台已经停止
     * </pre>
     *
     * <code>RCE_CrossArena_TableStop = 1368;</code>
     */
    public static final int RCE_CrossArena_TableStop_VALUE = 1368;
    /**
     * <pre>
     *擂台没有擂主
     * </pre>
     *
     * <code>RCE_CrossArena_TableNotDef = 1369;</code>
     */
    public static final int RCE_CrossArena_TableNotDef_VALUE = 1369;
    /**
     * <pre>
     *擂台队列已满
     * </pre>
     *
     * <code>RCE_CrossArena_TableQueueMax = 1370;</code>
     */
    public static final int RCE_CrossArena_TableQueueMax_VALUE = 1370;
    /**
     * <pre>
     *重复竞猜
     * </pre>
     *
     * <code>RCE_CrossArena_RPEI_GUESS = 1371;</code>
     */
    public static final int RCE_CrossArena_RPEI_GUESS_VALUE = 1371;
    /**
     * <pre>
     *擂台非战斗中
     * </pre>
     *
     * <code>RCE_CrossArena_NO_Fighting = 1372;</code>
     */
    public static final int RCE_CrossArena_NO_Fighting_VALUE = 1372;
    /**
     * <pre>
     *擂台非等待中
     * </pre>
     *
     * <code>RCE_CrossArena_NO_WAIT = 1373;</code>
     */
    public static final int RCE_CrossArena_NO_WAIT_VALUE = 1373;
    /**
     * <pre>
     *擂台战斗中
     * </pre>
     *
     * <code>RCE_CrossArena_Fighting = 1374;</code>
     */
    public static final int RCE_CrossArena_Fighting_VALUE = 1374;
    /**
     * <pre>
     *不可以挑战自己
     * </pre>
     *
     * <code>RCE_CrossArena_NOATTMY = 1375;</code>
     */
    public static final int RCE_CrossArena_NOATTMY_VALUE = 1375;
    /**
     * <pre>
     *等级不足
     * </pre>
     *
     * <code>RCE_CrossArena_LVNOT = 1376;</code>
     */
    public static final int RCE_CrossArena_LVNOT_VALUE = 1376;
    /**
     * <pre>
     *请先选择道场
     * </pre>
     *
     * <code>RCE_CrossArena_CHOOSE = 1377;</code>
     */
    public static final int RCE_CrossArena_CHOOSE_VALUE = 1377;
    /**
     * <pre>
     *目标离线
     * </pre>
     *
     * <code>RCE_CrossArena_OFFLINE = 1378;</code>
     */
    public static final int RCE_CrossArena_OFFLINE_VALUE = 1378;
    /**
     * <pre>
     *挑战事件已结束
     * </pre>
     *
     * <code>RCE_CrossArena_EVENT_END = 1379;</code>
     */
    public static final int RCE_CrossArena_EVENT_END_VALUE = 1379;
    /**
     * <pre>
     *道场等级不匹配
     * </pre>
     *
     * <code>RCE_CrossArena_SCENENEP = 1380;</code>
     */
    public static final int RCE_CrossArena_SCENENEP_VALUE = 1380;
    /**
     * <pre>
     *以在该队列
     * </pre>
     *
     * <code>RCE_CrossArena_ATQUE = 1381;</code>
     */
    public static final int RCE_CrossArena_ATQUE_VALUE = 1381;
    /**
     * <pre>
     *以在擂台上
     * </pre>
     *
     * <code>RCE_CrossArena_ATTABLE = 1382;</code>
     */
    public static final int RCE_CrossArena_ATTABLE_VALUE = 1382;
    /**
     * <pre>
     *该战斗禁止观战
     * </pre>
     *
     * <code>RCE_CrossArena_AIBATTLE = 1383;</code>
     */
    public static final int RCE_CrossArena_AIBATTLE_VALUE = 1383;
    /**
     * <pre>
     *擂台赛天数不够,无法开启该功能
     * </pre>
     *
     * <code>RCE_CrossArena_TIMELOCK = 1384;</code>
     */
    public static final int RCE_CrossArena_TIMELOCK_VALUE = 1384;
    /**
     * <pre>
     *未到领取时间
     * </pre>
     *
     * <code>RCE_CrossArena_ClaimTimeNotReach = 1385;</code>
     */
    public static final int RCE_CrossArena_ClaimTimeNotReach_VALUE = 1385;
    /**
     * <pre>
     *已经膜拜过了
     * </pre>
     *
     * <code>RCE_CrossArena_AlreadyMoBai = 1386;</code>
     */
    public static final int RCE_CrossArena_AlreadyMoBai_VALUE = 1386;
    /**
     * <pre>
     *擂台保护卡次数使用完
     * </pre>
     *
     * <code>RCE_CrossArena_ProtectCardTimeUseOut = 1387;</code>
     */
    public static final int RCE_CrossArena_ProtectCardTimeUseOut_VALUE = 1387;
    /**
     * <pre>
     *使用保护卡条件不满足
     * </pre>
     *
     * <code>RCE_CrossArena_ConditionNotMatch = 1388;</code>
     */
    public static final int RCE_CrossArena_ConditionNotMatch_VALUE = 1388;
    /**
     * <pre>
     *只能选择一个道场的奖励
     * </pre>
     *
     * <code>RCE_CrossArena_OnlyCanChooseOneScienceReward = 1389;</code>
     */
    public static final int RCE_CrossArena_OnlyCanChooseOneScienceReward_VALUE = 1389;
    /**
     * <pre>
     *没有可领取奖励
     * </pre>
     *
     * <code>RCE_CrossArena_NoRewardCanClaim = 1390;</code>
     */
    public static final int RCE_CrossArena_NoRewardCanClaim_VALUE = 1390;
    /**
     * <pre>
     *擂台没有更多数据了
     * </pre>
     *
     * <code>RCE_CrossArena_NoMorePageData = 1391;</code>
     */
    public static final int RCE_CrossArena_NoMorePageData_VALUE = 1391;
    /**
     * <pre>
     *================== 资源回收 start  1401 - 1411=====================
     * </pre>
     *
     * <code>RCE_ResourceRecycle_NoRewardsCanClaim = 1401;</code>
     */
    public static final int RCE_ResourceRecycle_NoRewardsCanClaim_VALUE = 1401;
    /**
     * <pre>
     *================== 训练场系统  start  1412 - 1430======================
     * </pre>
     *
     * <code>RCE_TRAIN_POSERROR = 1412;</code>
     */
    public static final int RCE_TRAIN_POSERROR_VALUE = 1412;
    /**
     * <pre>
     * 无法移动到该位置
     * </pre>
     *
     * <code>RCE_TRAIN_POSNOTFLISH = 1413;</code>
     */
    public static final int RCE_TRAIN_POSNOTFLISH_VALUE = 1413;
    /**
     * <pre>
     * 训练营未开启
     * </pre>
     *
     * <code>RCE_TRAIN_NOTOPEN = 1414;</code>
     */
    public static final int RCE_TRAIN_NOTOPEN_VALUE = 1414;
    /**
     * <pre>
     * 已存在buff，不可重复购买
     * </pre>
     *
     * <code>RCE_TRAIN_ExistTrainBuff = 1415;</code>
     */
    public static final int RCE_TRAIN_ExistTrainBuff_VALUE = 1415;
    /**
     * <pre>
     * 有未完成的npc对话事件，无法移动
     * </pre>
     *
     * <code>RCE_TRAIN_NotFinishNpcEvent = 1416;</code>
     */
    public static final int RCE_TRAIN_NotFinishNpcEvent_VALUE = 1416;
    /**
     * <pre>
     * 有未选择的buff，无法移动
     * </pre>
     *
     * <code>RCE_TRAIN_NotFinishChoseBUFF = 1417;</code>
     */
    public static final int RCE_TRAIN_NotFinishChoseBUFF_VALUE = 1417;
    /**
     * <pre>
     * 无法刷新商店
     * </pre>
     *
     * <code>RCE_TRAIN_CanNotRefreshShop = 1418;</code>
     */
    public static final int RCE_TRAIN_CanNotRefreshShop_VALUE = 1418;
    /**
     * <pre>
     * 使用道具数量超过限制
     * </pre>
     *
     * <code>RCE_TRAIN_ItemUseBuffLimit = 1419;</code>
     */
    public static final int RCE_TRAIN_ItemUseBuffLimit_VALUE = 1419;
    /**
     * <pre>
     *================== 迷雾森林主动推送  start  1431 - 1450======================
     * </pre>
     *
     * <code>RCE_Mist_StaminaNotEnough = 1431;</code>
     */
    public static final int RCE_Mist_StaminaNotEnough_VALUE = 1431;
    /**
     * <pre>
     * 迷雾森林玩家信息错误
     * </pre>
     *
     * <code>RCE_Mist_PlayerNotFound = 1432;</code>
     */
    public static final int RCE_Mist_PlayerNotFound_VALUE = 1432;
    /**
     * <pre>
     * 配置错误
     * </pre>
     *
     * <code>RCE_Mist_CfgError = 1433;</code>
     */
    public static final int RCE_Mist_CfgError_VALUE = 1433;
    /**
     * <pre>
     * 已经领取过奖励
     * </pre>
     *
     * <code>RCE_Mist_HasClaimedReward = 1434;</code>
     */
    public static final int RCE_Mist_HasClaimedReward_VALUE = 1434;
    /**
     * <pre>
     * 未找到领取宝箱id
     * </pre>
     *
     * <code>RCE_Mist_InvalidClaimReward = 1435;</code>
     */
    public static final int RCE_Mist_InvalidClaimReward_VALUE = 1435;
    /**
     * <pre>
     * 该宝箱已开启
     * </pre>
     *
     * <code>RCE_Mist_BoxHasBeenOpened = 1436;</code>
     */
    public static final int RCE_Mist_BoxHasBeenOpened_VALUE = 1436;
    /**
     * <pre>
     * 该宝箱已消失
     * </pre>
     *
     * <code>RCE_Mist_BoxDisappear = 1437;</code>
     */
    public static final int RCE_Mist_BoxDisappear_VALUE = 1437;
    /**
     * <pre>
     * 魔法宝箱存在守卫
     * </pre>
     *
     * <code>RCE_Mist_MagicBoxHasGuards = 1438;</code>
     */
    public static final int RCE_Mist_MagicBoxHasGuards_VALUE = 1438;
    /**
     * <pre>
     * 触碰假的石像鬼雕像
     * </pre>
     *
     * <code>RCE_Mist_FakeGargoyleMonster = 1439;</code>
     */
    public static final int RCE_Mist_FakeGargoyleMonster_VALUE = 1439;
    /**
     * <pre>
     * 触碰真的石像鬼雕像
     * </pre>
     *
     * <code>RCE_Mist_TrulyGargoyleMonster = 1440;</code>
     */
    public static final int RCE_Mist_TrulyGargoyleMonster_VALUE = 1440;
    /**
     * <pre>
     * 已经领取过boss活动宝箱
     * </pre>
     *
     * <code>RCE_Mist_ClaimedBossActivityBox = 1441;</code>
     */
    public static final int RCE_Mist_ClaimedBossActivityBox_VALUE = 1441;
    /**
     * <pre>
     * 未参加战斗无法领取奖励
     * </pre>
     *
     * <code>RCE_Mist_NoQualificationToGetReward = 1442;</code>
     */
    public static final int RCE_Mist_NoQualificationToGetReward_VALUE = 1442;
    /**
     * <pre>
     *================== 矿区农场系统  start  1451 - 1480======================
     * </pre>
     *
     * <code>RCE_FARMMINE_NOTMINE = 1451;</code>
     */
    public static final int RCE_FARMMINE_NOTMINE_VALUE = 1451;
    /**
     * <pre>
     * 活动未开启
     * </pre>
     *
     * <code>RCE_FARMMINE_NOTHARVEST = 1452;</code>
     */
    public static final int RCE_FARMMINE_NOTHARVEST_VALUE = 1452;
    /**
     * <pre>
     * 已达到产量提高剩余时间上限
     * </pre>
     *
     * <code>RCE_FARMMINE_USEITEMTIMEMAX = 1453;</code>
     */
    public static final int RCE_FARMMINE_USEITEMTIMEMAX_VALUE = 1453;
    /**
     * <pre>
     * 已达最高收获上限
     * </pre>
     *
     * <code>RCE_FARMMINE_HARVESTMAX = 1454;</code>
     */
    public static final int RCE_FARMMINE_HARVESTMAX_VALUE = 1454;
    /**
     * <pre>
     * 收取太频繁
     * </pre>
     *
     * <code>RCE_FARMMINE_HARVESTQK = 1455;</code>
     */
    public static final int RCE_FARMMINE_HARVESTQK_VALUE = 1455;
    /**
     * <pre>
     * 累计时间不足
     * </pre>
     *
     * <code>RCE_FARMMINE_LJTIMENOT = 1456;</code>
     */
    public static final int RCE_FARMMINE_LJTIMENOT_VALUE = 1456;
    /**
     * <pre>
     * 手慢了被他人捷足先登
     * </pre>
     *
     * <code>RCE_FARMMINE_StealNOT = 1457;</code>
     */
    public static final int RCE_FARMMINE_StealNOT_VALUE = 1457;
    /**
     * <pre>
     * 重复竞拍
     * </pre>
     *
     * <code>RCE_FARMMINE_OFFERREQ = 1458;</code>
     */
    public static final int RCE_FARMMINE_OFFERREQ_VALUE = 1458;
    /**
     * <pre>
     * 竞拍上限
     * </pre>
     *
     * <code>RCE_FARMMINE_OFFERNUMMAX = 1459;</code>
     */
    public static final int RCE_FARMMINE_OFFERNUMMAX_VALUE = 1459;
    /**
     * <pre>
     * 请先竞拍
     * </pre>
     *
     * <code>RCE_FARMMINE_OFFERPEL = 1460;</code>
     */
    public static final int RCE_FARMMINE_OFFERPEL_VALUE = 1460;
    /**
     * <pre>
     * 你已经拥有矿地
     * </pre>
     *
     * <code>RCE_FARMMINE_HAVEMINE = 1461;</code>
     */
    public static final int RCE_FARMMINE_HAVEMINE_VALUE = 1461;
    /**
     * <pre>
     * 偷取次数上限
     * </pre>
     *
     * <code>RCE_FARMMINE_StealMAX = 1462;</code>
     */
    public static final int RCE_FARMMINE_StealMAX_VALUE = 1462;
    /**
     * <pre>
     * 该矿已经被你偷取过
     * </pre>
     *
     * <code>RCE_FARMMINE_StealREPIR = 1463;</code>
     */
    public static final int RCE_FARMMINE_StealREPIR_VALUE = 1463;
    /**
     * <pre>
     * 该矿被偷取次数上限
     * </pre>
     *
     * <code>RCE_FARMMINE_BEStealMAX = 1464;</code>
     */
    public static final int RCE_FARMMINE_BEStealMAX_VALUE = 1464;
    /**
     * <pre>
     *================== 修罗竞技场  end  1481 - 1500======================
     * </pre>
     *
     * <code>RCE_MAGICTHRON_TIME = 1481;</code>
     */
    public static final int RCE_MAGICTHRON_TIME_VALUE = 1481;
    /**
     * <pre>
     *战斗中
     * </pre>
     *
     * <code>RCE_MAGICTHRON_FIGHT = 1482;</code>
     */
    public static final int RCE_MAGICTHRON_FIGHT_VALUE = 1482;
    /**
     * <pre>
     *守关怪物不存在
     * </pre>
     *
     * <code>RCE_MAGICTHRON_FIGHTMAKE = 1483;</code>
     */
    public static final int RCE_MAGICTHRON_FIGHTMAKE_VALUE = 1483;
    /**
     * <pre>
     *玩家已选择区域
     * </pre>
     *
     * <code>RCE_PlayerAlreadyChooseArea = 1484;</code>
     */
    public static final int RCE_PlayerAlreadyChooseArea_VALUE = 1484;
    /**
     * <pre>
     *请选择挑战区域
     * </pre>
     *
     * <code>RCE_PlayerNotChooseArea = 1485;</code>
     */
    public static final int RCE_PlayerNotChooseArea_VALUE = 1485;
    /**
     * <pre>
     *非法消息
     * </pre>
     *
     * <code>RCE_Barrage_IllegalMsg = 1501;</code>
     */
    public static final int RCE_Barrage_IllegalMsg_VALUE = 1501;
    /**
     * <pre>
     *发送间隔太短
     * </pre>
     *
     * <code>RCE_Barrage_MsgIntervalTooShort = 1502;</code>
     */
    public static final int RCE_Barrage_MsgIntervalTooShort_VALUE = 1502;
    /**
     * <pre>
     *非法队伍名
     * </pre>
     *
     * <code>RCE_CP_IllegalTeamName = 1521;</code>
     */
    public static final int RCE_CP_IllegalTeamName_VALUE = 1521;
    /**
     * <pre>
     *玩家已存在队伍中
     * </pre>
     *
     * <code>RCE_CP_PlayerInTeam = 1522;</code>
     */
    public static final int RCE_CP_PlayerInTeam_VALUE = 1522;
    /**
     * <pre>
     *玩家没有加入队伍
     * </pre>
     *
     * <code>RCE_CP_NotJoinTeam = 1523;</code>
     */
    public static final int RCE_CP_NotJoinTeam_VALUE = 1523;
    /**
     * <pre>
     *队伍不存在
     * </pre>
     *
     * <code>RCE_CP_TeamNotExists = 1524;</code>
     */
    public static final int RCE_CP_TeamNotExists_VALUE = 1524;
    /**
     * <pre>
     *玩家战力不足
     * </pre>
     *
     * <code>RCE_CP_AbilityNotEnough = 1525;</code>
     */
    public static final int RCE_CP_AbilityNotEnough_VALUE = 1525;
    /**
     * <pre>
     *队伍中人数已满
     * </pre>
     *
     * <code>RCE_CP_FullTeamMember = 1526;</code>
     */
    public static final int RCE_CP_FullTeamMember_VALUE = 1526;
    /**
     * <pre>
     *重复发布队伍
     * </pre>
     *
     * <code>RCE_CP_RepeatPublishTeam = 1527;</code>
     */
    public static final int RCE_CP_RepeatPublishTeam_VALUE = 1527;
    /**
     * <pre>
     *仅队长可执行操作
     * </pre>
     *
     * <code>RCE_CP_OnlyLeaderCanOperate = 1528;</code>
     */
    public static final int RCE_CP_OnlyLeaderCanOperate_VALUE = 1528;
    /**
     * <pre>
     *邀请不存在
     * </pre>
     *
     * <code>RCE_CP_CpInviteNotExists = 1529;</code>
     */
    public static final int RCE_CP_CpInviteNotExists_VALUE = 1529;
    /**
     * <pre>
     *申请加入队伍消息不存在
     * </pre>
     *
     * <code>RCE_CP_PlayerApplyJoinTeamNotExist = 1530;</code>
     */
    public static final int RCE_CP_PlayerApplyJoinTeamNotExist_VALUE = 1530;
    /**
     * <pre>
     *玩家副本不存在;
     * </pre>
     *
     * <code>RCE_CP_CopyNotExists = 1531;</code>
     */
    public static final int RCE_CP_CopyNotExists_VALUE = 1531;
    /**
     * <pre>
     *不能到达该位置
     * </pre>
     *
     * <code>RCE_CP_PointCantReach = 1532;</code>
     */
    public static final int RCE_CP_PointCantReach_VALUE = 1532;
    /**
     * <pre>
     *点位已探索
     * </pre>
     *
     * <code>RCE_CP_PointAlreadyExplore = 1553;</code>
     */
    public static final int RCE_CP_PointAlreadyExplore_VALUE = 1553;
    /**
     * <pre>
     *本周玩法次数已使用完
     * </pre>
     *
     * <code>RCE_CP_PlayTimesUseOut = 1554;</code>
     */
    public static final int RCE_CP_PlayTimesUseOut_VALUE = 1554;
    /**
     * <pre>
     *重复邀请玩家
     * </pre>
     *
     * <code>RCE_CP_RepeatInvitePlayer = 1555;</code>
     */
    public static final int RCE_CP_RepeatInvitePlayer_VALUE = 1555;
    /**
     * <pre>
     *重复申请加入
     * </pre>
     *
     * <code>RCE_CP_RepeatApplyJoin = 1556;</code>
     */
    public static final int RCE_CP_RepeatApplyJoin_VALUE = 1556;
    /**
     * <pre>
     *重复领奖
     * </pre>
     *
     * <code>RCE_CP_RepeatClaim = 1557;</code>
     */
    public static final int RCE_CP_RepeatClaim_VALUE = 1557;
    /**
     * <pre>
     *条件不满足
     * </pre>
     *
     * <code>RCE_CP_NotMatchCondition = 1558;</code>
     */
    public static final int RCE_CP_NotMatchCondition_VALUE = 1558;
    /**
     * <pre>
     *其他玩家正在挑战
     * </pre>
     *
     * <code>RCE_CP_PlayerIsFighting = 1559;</code>
     */
    public static final int RCE_CP_PlayerIsFighting_VALUE = 1559;
    /**
     * <pre>
     *请重新上传编队
     * </pre>
     *
     * <code>RCE_CP_PleaseReUploadTeam = 1560;</code>
     */
    public static final int RCE_CP_PleaseReUploadTeam_VALUE = 1560;
    /**
     * <pre>
     *不满足队伍需求(申请加入组队时)
     * </pre>
     *
     * <code>RCE_CP_ApplyJoinTeam_ConditionNotMatch = 1561;</code>
     */
    public static final int RCE_CP_ApplyJoinTeam_ConditionNotMatch_VALUE = 1561;
    /**
     * <pre>
     *组队复活次数已使用完
     * </pre>
     *
     * <code>RCE_CP_ReviveTimeUseOut = 1562;</code>
     */
    public static final int RCE_CP_ReviveTimeUseOut_VALUE = 1562;
    /**
     * <pre>
     *已有切磋房间
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_HAVEROOM = 1571;</code>
     */
    public static final int RCE_CROSSARERNAPVP_HAVEROOM_VALUE = 1571;
    /**
     * <pre>
     *房间更新中
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_UPDATE = 1572;</code>
     */
    public static final int RCE_CROSSARERNAPVP_UPDATE_VALUE = 1572;
    /**
     * <pre>
     *房间不存在
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_MISS = 1573;</code>
     */
    public static final int RCE_CROSSARERNAPVP_MISS_VALUE = 1573;
    /**
     * <pre>
     *不满足房间条件
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_LIMIT = 1574;</code>
     */
    public static final int RCE_CROSSARERNAPVP_LIMIT_VALUE = 1574;
    /**
     * <pre>
     *战力不满足
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_POWER = 1575;</code>
     */
    public static final int RCE_CROSSARERNAPVP_POWER_VALUE = 1575;
    /**
     * <pre>
     *等级不满足
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_LEVEL = 1576;</code>
     */
    public static final int RCE_CROSSARERNAPVP_LEVEL_VALUE = 1576;
    /**
     * <pre>
     *宠物为空
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_PETNUll = 1577;</code>
     */
    public static final int RCE_CROSSARERNAPVP_PETNUll_VALUE = 1577;
    /**
     * <pre>
     *战斗服没获取到
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_BATTLESERVERNUll = 1578;</code>
     */
    public static final int RCE_CROSSARERNAPVP_BATTLESERVERNUll_VALUE = 1578;
    /**
     * <pre>
     *宠物数据创建失败
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_PETCREATEERR = 1579;</code>
     */
    public static final int RCE_CROSSARERNAPVP_PETCREATEERR_VALUE = 1579;
    /**
     * <pre>
     *切磋彩金不足
     * </pre>
     *
     * <code>RCE_CROSSARERNAPVP_RES_NULL = 1580;</code>
     */
    public static final int RCE_CROSSARERNAPVP_RES_NULL_VALUE = 1580;
    /**
     * <pre>
     *================== 悬赏  start  1591 - 1610======================
     * </pre>
     *
     * <code>RCE_OfferReward_NoTask = 1591;</code>
     */
    public static final int RCE_OfferReward_NoTask_VALUE = 1591;
    /**
     * <pre>
     *未完成悬赏任务
     * </pre>
     *
     * <code>RCE_OfferReward_TaskNotFinish = 1592;</code>
     */
    public static final int RCE_OfferReward_TaskNotFinish_VALUE = 1592;
    /**
     * <pre>
     *悬赏任务已过期
     * </pre>
     *
     * <code>RCE_OfferReward_TaskExpired = 1593;</code>
     */
    public static final int RCE_OfferReward_TaskExpired_VALUE = 1593;
    /**
     * <pre>
     *悬赏任务已被其他玩家完成
     * </pre>
     *
     * <code>RCE_OfferReward_TaskFinishedByOthers = 1594;</code>
     */
    public static final int RCE_OfferReward_TaskFinishedByOthers_VALUE = 1594;
    /**
     * <pre>
     *==================疯狂对决  start  1660 - 1690======================
     * </pre>
     *
     * <code>RCE_CrazyDuel_TeamHasPublish = 1660;</code>
     */
    public static final int RCE_CrazyDuel_TeamHasPublish_VALUE = 1660;
    /**
     * <pre>
     *队伍数量不正确
     * </pre>
     *
     * <code>RCE_CrazyDuel_TeamSizeError = 1661;</code>
     */
    public static final int RCE_CrazyDuel_TeamSizeError_VALUE = 1661;
    /**
     * <pre>
     *该玩家以挑战
     * </pre>
     *
     * <code>RCE_CrazyDuel_PlayerAlreadyDefeat = 1662;</code>
     */
    public static final int RCE_CrazyDuel_PlayerAlreadyDefeat_VALUE = 1662;
    /**
     * <pre>
     *挑战楼层错误
     * </pre>
     *
     * <code>RCE_CrazyDuel_FloorError = 1663;</code>
     */
    public static final int RCE_CrazyDuel_FloorError_VALUE = 1663;
    /**
     * <pre>
     *挑战次数使用完
     * </pre>
     *
     * <code>RCE_CrazyDuel_PlayTimeUseOut = 1664;</code>
     */
    public static final int RCE_CrazyDuel_PlayTimeUseOut_VALUE = 1664;
    /**
     * <pre>
     *玩家没有配置队伍数据
     * </pre>
     *
     * <code>RCE_CrazyDuel_PlayNotSettingTeam = 1665;</code>
     */
    public static final int RCE_CrazyDuel_PlayNotSettingTeam_VALUE = 1665;
    /**
     * <pre>
     *玩家还有阵容没有设置
     * </pre>
     *
     * <code>RCE_CrazyDuel_PlayerNotFinishSettingTeam = 1666;</code>
     */
    public static final int RCE_CrazyDuel_PlayerNotFinishSettingTeam_VALUE = 1666;
    /**
     * <pre>
     *刷新次数已使用完
     * </pre>
     *
     * <code>RCE_CrazyDuel_RefreshTimeUseOut = 166;</code>
     */
    public static final int RCE_CrazyDuel_RefreshTimeUseOut_VALUE = 166;
    /**
     * <pre>
     *不能挑战更多的玩家
     * </pre>
     *
     * <code>RCE_CrazyDuel_CantBattleMorePlayer = 1667;</code>
     */
    public static final int RCE_CrazyDuel_CantBattleMorePlayer_VALUE = 1667;
    /**
     * <pre>
     * 战斗中
     * </pre>
     *
     * <code>RCE_PLAY_FIGHT = 1700;</code>
     */
    public static final int RCE_PLAY_FIGHT_VALUE = 1700;
    /**
     * <pre>
     * 切磋玩法中
     * </pre>
     *
     * <code>RCE_PLAY_LTPVP = 1701;</code>
     */
    public static final int RCE_PLAY_LTPVP_VALUE = 1701;
    /**
     * <pre>
     * 擂台匹配中
     * </pre>
     *
     * <code>RCE_PLAY_LT = 1702;</code>
     */
    public static final int RCE_PLAY_LT_VALUE = 1702;
    /**
     * <pre>
     * 疯狂对决中
     * </pre>
     *
     * <code>RCE_PLAY_CRAZY = 1703;</code>
     */
    public static final int RCE_PLAY_CRAZY_VALUE = 1703;
    /**
     * <pre>
     * 组队玩法中
     * </pre>
     *
     * <code>RCE_PLAY_TEAM = 1704;</code>
     */
    public static final int RCE_PLAY_TEAM_VALUE = 1704;
    /**
     * <pre>
     * 魔灵大躲避玩法中
     * </pre>
     *
     * <code>REC_IN_PET_AVOIDANCE_GAME = 1705;</code>
     */
    public static final int REC_IN_PET_AVOIDANCE_GAME_VALUE = 1705;
    /**
     * <pre>
     *==================石头峡谷  start  1801 - 1900======================
     * </pre>
     *
     * <code>RCE_StoneRift_TimeNotReach = 1801;</code>
     */
    public static final int RCE_StoneRift_TimeNotReach_VALUE = 1801;
    /**
     * <pre>
     *超载cd中
     * </pre>
     *
     * <code>RCE_StoneRift_OverLoadInCD = 1802;</code>
     */
    public static final int RCE_StoneRift_OverLoadInCD_VALUE = 1802;
    /**
     * <pre>
     *矿场未解锁
     * </pre>
     *
     * <code>RCE_StoneRift_FactoryNotUnlock = 1803;</code>
     */
    public static final int RCE_StoneRift_FactoryNotUnlock_VALUE = 1803;
    /**
     * <pre>
     *宠物已驻防
     * </pre>
     *
     * <code>RCE_StoneRift_PetAlreadyInDefend = 1804;</code>
     */
    public static final int RCE_StoneRift_PetAlreadyInDefend_VALUE = 1804;
    /**
     * <pre>
     *矿坑已解锁
     * </pre>
     *
     * <code>RCE_StoneRift_FactoryAlreadyUnlock = 1805;</code>
     */
    public static final int RCE_StoneRift_FactoryAlreadyUnlock_VALUE = 1805;
    /**
     * <pre>
     *事件功能cd中
     * </pre>
     *
     * <code>RCE_StoneRift_EventInCD = 1806;</code>
     */
    public static final int RCE_StoneRift_EventInCD_VALUE = 1806;
    /**
     * <pre>
     * 留言包含非法字符
     * </pre>
     *
     * <code>RCE_StoneRift_InvalidWord = 1807;</code>
     */
    public static final int RCE_StoneRift_InvalidWord_VALUE = 1807;
    /**
     * <pre>
     *科技树学习条件不满足
     * </pre>
     *
     * <code>RCE_StoneRiftScienceStudyConditionNotMatch = 1809;</code>
     */
    public static final int RCE_StoneRiftScienceStudyConditionNotMatch_VALUE = 1809;
    /**
     * <pre>
     *科技树不可继续升级
     * </pre>
     *
     * <code>RCE_StoneRiftScienceLevelMaxLimit = 1810;</code>
     */
    public static final int RCE_StoneRiftScienceLevelMaxLimit_VALUE = 1810;
    /**
     * <pre>
     *达到购买上限
     * </pre>
     *
     * <code>RCE_StoneRift_LimitBuy = 1811;</code>
     */
    public static final int RCE_StoneRift_LimitBuy_VALUE = 1811;
    /**
     * <pre>
     *次数使用完
     * </pre>
     *
     * <code>RCE_StoneRift_TimeUseOut = 1812;</code>
     */
    public static final int RCE_StoneRift_TimeUseOut_VALUE = 1812;
    /**
     * <pre>
     *无法偷取
     * </pre>
     *
     * <code>RCE_StoneRift_CantSteal = 1813;</code>
     */
    public static final int RCE_StoneRift_CantSteal_VALUE = 1813;
    /**
     * <pre>
     *没有奖励可以领取
     * </pre>
     *
     * <code>RCE_StoneRift_EmptyRewards = 1814;</code>
     */
    public static final int RCE_StoneRift_EmptyRewards_VALUE = 1814;
    /**
     * <pre>
     *矿场等级不足
     * </pre>
     *
     * <code>RCE_StoneRift_RiftLvNotEnough = 1815;</code>
     */
    public static final int RCE_StoneRift_RiftLvNotEnough_VALUE = 1815;
    /**
     * <pre>
     *宠物条件不满足
     * </pre>
     *
     * <code>RCE_StoneRift_PetNotMatch = 1816;</code>
     */
    public static final int RCE_StoneRift_PetNotMatch_VALUE = 1816;
    /**
     * <pre>
     *满耐久不能使用催化
     * </pre>
     *
     * <code>RCE_StoneRift_FullDurable = 1817;</code>
     */
    public static final int RCE_StoneRift_FullDurable_VALUE = 1817;
    /**
     * <pre>
     *已偷取该玩家，不能再偷取
     * </pre>
     *
     * <code>RCE_StoneRift_AlreadyStealPlayer = 1818;</code>
     */
    public static final int RCE_StoneRift_AlreadyStealPlayer_VALUE = 1818;
    /**
     * <pre>
     *已偷取该玩家，不能再偷取
     * </pre>
     *
     * <code>RCE_StoneRift_NoResCanSteal = 1819;</code>
     */
    public static final int RCE_StoneRift_NoResCanSteal_VALUE = 1819;
    /**
     * <pre>
     *==================节日Boss  start  1901 - 1950======================
     * </pre>
     *
     * <code>RCE_Activity_AlreadyShare = 1901;</code>
     */
    public static final int RCE_Activity_AlreadyShare_VALUE = 1901;
    /**
     * <pre>
     *==================星星宝藏  start  2051 - 3000======================
     * </pre>
     *
     * <code>REC_Star_NotEnough = 2051;</code>
     */
    public static final int REC_Star_NotEnough_VALUE = 2051;
    /**
     * <pre>
     *玩家已选取奖池
     * </pre>
     *
     * <code>REC_StarTreasure_choosen = 2052;</code>
     */
    public static final int REC_StarTreasure_choosen_VALUE = 2052;
    /**
     * <pre>
     *玩家未选取奖池
     * </pre>
     *
     * <code>REC_StarTreasure_NotChoose = 2053;</code>
     */
    public static final int REC_StarTreasure_NotChoose_VALUE = 2053;
    /**
     * <pre>
     *玩家已获取所有物品
     * </pre>
     *
     * <code>REC_StarTreasure_GetAll = 2054;</code>
     */
    public static final int REC_StarTreasure_GetAll_VALUE = 2054;
    /**
     * <pre>
     *==================魔灵大躲避  start  3051 - 3100======================
     * </pre>
     *
     * <code>REC_PetAvoidance_AlreadyInGame = 3051;</code>
     */
    public static final int REC_PetAvoidance_AlreadyInGame_VALUE = 3051;
    /**
     * <pre>
     *未进行游戏
     * </pre>
     *
     * <code>REC_PetAvoidance_NotInGame = 3052;</code>
     */
    public static final int REC_PetAvoidance_NotInGame_VALUE = 3052;
    /**
     * <pre>
     *次数耗尽
     * </pre>
     *
     * <code>REC_petAvoidance_TimesLimit = 3053;</code>
     */
    public static final int REC_petAvoidance_TimesLimit_VALUE = 3053;
    /**
     * <pre>
     *超时结束
     * </pre>
     *
     * <code>REC_petAvoidance_Timeout = 3054;</code>
     */
    public static final int REC_petAvoidance_Timeout_VALUE = 3054;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RetCodeEnum valueOf(int value) {
      return forNumber(value);
    }

    public static RetCodeEnum forNumber(int value) {
      switch (value) {
        case 0: return RCE_Null;
        case 1: return RCE_Success;
        case 2: return RCE_Failure;
        case 3: return RCE_UnknownError;
        case 4: return RCE_PlayerOffline;
        case 5: return RCE_ErrorParam;
        case 6: return RCE_FunctionIsLock;
        case 7: return RCE_ShopTypeMissMatch;
        case 8: return RCE_MatieralNotEnough;
        case 9: return RCE_LvNotEnough;
        case 10: return RCE_Login_ErrorPwd;
        case 11: return RCE_Login_FullPlayer;
        case 12: return RCE_Login_ServerNotOpen;
        case 13: return RCE_Login_ClientVersionError;
        case 14: return RCE_ConfigError;
        case 15: return RSE_ConfigNotExist;
        case 16: return RSE_VipGiftClaimed;
        case 17: return RSE_InvalidRequest;
        case 18: return RSE_Function_AbnormalMaintenance;
        case 19: return RSE_Login_AccountLock;
        case 20: return RCE_CreateRole_DuplicateName;
        case 21: return RCE_CreateRole_InvalidName;
        case 22: return RCE_CreateRole_ErrorOrder;
        case 23: return RCE_CreateRole_ForbidModifySex;
        case 29: return RCE_Login_ServerBusy;
        case 30: return RCE_Login_LoginTooFast;
        case 31: return RCE_KickOut_RepeatLogin;
        case 32: return RCE_KickOut_ServerClose;
        case 33: return RCE_KickOut_AntiLimit;
        case 34: return RCE_KickOut_Banned;
        case 35: return RCE_KickOut_SkipNewBeeGuide;
        case 36: return RCE_KickOut_RepeatLoginWithSameIp;
        case 37: return RCE_Mail_GemBagIsFull;
        case 38: return RCE_Mail_ItemBagIsFull;
        case 39: return RCE_Mail_PetBagIsFull;
        case 40: return RCE_Mail_RuneBagIsFull;
        case 41: return RCE_Mail_UnExist;
        case 42: return RCE_Mail_NoAttachment;
        case 43: return RCE_Mail_UnEnoughtCapacity;
        case 44: return RCE_Mail_AlreadyCliamed;
        case 45: return RCE_Mail_AttachmentNoClaim;
        case 46: return RCE_Mail_UnRead;
        case 47: return RCE_PrepareWar_TargetPositionHasPet;
        case 48: return RCE_PrepareWar_PetIsInPetTransfer;
        case 49: return RCE_PrepareWar_TeamStatusIslock;
        case 50: return RCE_PrepareWar_PetIsDead;
        case 51: return RCE_PrepareWar_PetNoExist;
        case 52: return RCE_PrepareWar_LvNotEought;
        case 53: return RCE_PrepareWar_IllegalTeamName;
        case 54: return RCE_PrepareWar_CanNotBuyMore;
        case 56: return RCE_PrepareWar_DiamondNotEnought;
        case 57: return RCE_PrepareWar_PositionIsLock;
        case 58: return RCE_PrepareWar_TeamIslock;
        case 59: return RCE_PrepareWar_SkillNotExist;
        case 60: return RCE_PrepareWar_RepeatedSetSamePet;
        case 61: return RCE_Itembag_ItemNotExist;
        case 62: return RCE_Itembag_ItemNotEnought;
        case 63: return RCE_Itembag_ItemCanNotUsed;
        case 64: return RCE_ItemBag_ItemCanNotSell;
        case 65: return RCE_ItemBag_MistBoxLimit;
        case 66: return RCE_ItemBag_CanNotUseMore;
        case 71: return RCE_Player_NotOwnedAvatar;
        case 72: return RCE_Player_GoldNotEnought;
        case 73: return RCE_Player_DiamondNotEnought;
        case 74: return RCE_Player_CurrencysNotEnought;
        case 75: return RCE_Player_DisplayPetNotExist;
        case 76: return RCE_Player_QueryPlayerNotExist;
        case 77: return RCE_Player_AvatarBorderLocked;
        case 78: return RCE_Player_AvatarBorderExpire;
        case 79: return RCE_Player_GoodsExpired;
        case 81: return RCE_EndlessSpire_ThisLvCanNotPlay;
        case 82: return RCE_EndlessSpire_PlayerStatusBusy;
        case 83: return RCE_EndlessSpire_ThisLvCanNotSettle;
        case 84: return RCE_EndlessSpire_ThisLvHaveNoAchievementReward;
        case 85: return RCE_EndlessSpire_ThisLvAchievementRewardClaimed;
        case 86: return RCE_EndlessSpire_CurAchievementNotFinished;
        case 90: return RCE_Battle_EnemyPetIsEmpty;
        case 91: return RCE_Battle_UsedTeamNotHavePet;
        case 92: return RCE_Battle_FightMakeIsNotExist;
        case 93: return RCE_Battle_RepeatedEnterBattle;
        case 94: return RCE_Battle_DataError;
        case 96: return RCE_Battle_NotInBattle;
        case 97: return RCE_Battle_OutOfLimit;
        case 98: return RCE_Battle_BattleTooFast;
        case 99: return RCE_PrepareWar_PetCountOutOfLimit;
        case 100: return RCE_AlterName_NotFoundPlayer;
        case 101: return RCE_AlterName_EvilPlayer;
        case 102: return RCE_AlterName_DuringRenameCD;
        case 103: return RCE_AlterName_IllegalName;
        case 110: return RCE_AlterName_IllegalWords;
        case 111: return RCE_AlterName_TooLong;
        case 112: return RCE_AlterName_Duplicate;
        case 113: return RCE_AlterName_Empty;
        case 114: return RCE_VipExpMaxBuyTimeLimit;
        case 115: return RCE_FunctionNotUnLock;
        case 116: return RCE_PlayerLvNotEnough;
        case 200: return RCE_MistForest_CreateRoomFail;
        case 201: return RCE_MistForest_NotFoundMistPlayer;
        case 202: return RCE_MistForest_NotInMistRoom;
        case 203: return RCE_MistForest_NotFoundMistFighter;
        case 204: return RCE_MistForest_NotInSafeRegion;
        case 205: return RCE_MistForest_AlreadyInMist;
        case 206: return RCE_MistForest_CanNotTouch;
        case 207: return RCE_MistForest_AlreadySubmitJewelry;
        case 208: return RCE_MistForest_NotFoundSealBox;
        case 209: return RCE_MistForest_NotEnoughJewelry;
        case 210: return RCE_MistForest_JewelryIdNotMatch;
        case 211: return RCE_MistForest_HiddenEvilNotFound;
        case 212: return RCE_MistForest_HiddenEvilExpired;
        case 213: return RCE_MistForest_HiddenEvilSummoned;
        case 260: return RCE_MistForest_ServerNotLogin;
        case 301: return RCE_ForInv_StatusMismatching;
        case 302: return RCE_ForInv_MonsterIdxNotExist;
        case 303: return RCE_ForInv_BossCloneNotExist;
        case 304: return RCE_ForInv_ClaimCountLimit;
        case 305: return RCE_ForInv_RemoveMonsterFailed;
        case 306: return RCE_ForInv_CreateMonsterFailed;
        case 307: return RCE_ForInv_BuildingFreed;
        case 321: return RCE_Friend_FriendUpperLimit;
        case 322: return RCE_Friend_TargetPlayerNotExist;
        case 323: return RCE_Friend_TargetApplyUpperLimit;
        case 324: return RCE_Friend_TargetFriendUpperLimit;
        case 325: return RCE_Friend_TargetIsNotFriend;
        case 326: return RCE_Friend_CanNotFindSelf;
        case 327: return RCE_Friend_RepeatedSendToSameTarget;
        case 328: return RCE_Friend_NotRecvPointFromThis;
        case 329: return RCE_Friend_RepeatedClaim;
        case 330: return RCE_Friend_FriendItemGainLimit;
        case 341: return RCE_DrawCard_FriednshipPointNotEnought;
        case 342: return RCE_DrawCard_LowBookNotEnought;
        case 343: return RCE_DrawCard_HighBookNotEnought;
        case 344: return RCE_DrawCard_HighDrawCountUpperLimit;
        case 361: return RCE_GoldEx_ExUpperLimit;
        case 373: return RCE_Pet_PetNumLessThanCoupTeamNeed;
        case 374: return RCE_Pet_CoupTeamPetLvDifferGreatly;
        case 375: return RCE_Pet_VoidStoneIsUnLock;
        case 376: return RCE_Pet_LevelLimit;
        case 377: return RCE_Pet_RarityMaxLvLimit;
        case 378: return RCE_Pet_VoidStoneMaxLvLimit;
        case 379: return RCE_Pet_VoidStoneNotExist;
        case 380: return RCE_Pet_PetLvGtPlayerLv;
        case 381: return RCE_Pet_UpLvlFailure;
        case 382: return RCE_Pet_PetNotExist;
        case 383: return RCE_Pet_RuneNotExist;
        case 384: return RCE_Pet_MissionAlreadyFinished;
        case 385: return RCE_Pet_MissionMaxError;
        case 386: return RCE_Pet_MissionNotFound;
        case 387: return RCE_Pet_MissionPetNotCorrect;
        case 388: return RCE_Pet_FragmentNotEnough;
        case 389: return RCE_Pet_FragmentNotFound;
        case 390: return RCE_Pet_PetStatusLock;
        case 391: return RCE_Pet_PetStatusMissionLock;
        case 392: return RCE_Pet_PetStatusMineLock;
        case 393: return RCE_Pet_PetStatusTeamLock;
        case 394: return RCE_Pet_PetStatusChangeLock;
        case 395: return RCE_Pet_PetColleciontRewardError;
        case 396: return RCE_Pet_PetLvlMaxErroe;
        case 397: return RCE_Pet_PetRuneAlreadyEquiped;
        case 398: return RCE_Pet_PetBagNotEnough;
        case 399: return RCE_Pet_RuneBagNotEnough;
        case 400: return RCE_Pet_MissionNotComplete;
        case 401: return RCE_MainLine_CheckPointCfgIsNull;
        case 402: return RCE_MainLine_CheckPointIsLock;
        case 403: return RCE_MainLine_CheckPointCanNotBattle;
        case 404: return RCE_MainLine_FightOrderError;
        case 405: return RCE_MainLine_NodeCanNotReach;
        case 406: return RCE_MainLine_CurLvMissMatch;
        case 407: return RCE_MainLine_NodeTypeCanNotBattle;
        case 408: return RCE_MainLine_CurNodeIsPassed;
        case 409: return RCE_MainLine_PlayerHaveNoOnhook;
        case 410: return RCE_MainLine_NodeCfgIsNull;
        case 411: return RCE_MainLine_CurNodeIsLock;
        case 412: return RCE_MainLine_CurNodeCanNotBattle;
        case 413: return RCE_MainLine_PswNotInputFinish;
        case 414: return RCE_MainLine_CheckPointTypeMissMatch;
        case 415: return RCE_MainLine_PswLengthError;
        case 416: return RCE_MainLine_InputNotPswNode;
        case 417: return RCE_MainLine_InputTheSamePsw;
        case 418: return RCE_MainLine_QuickOnHookLimit;
        case 419: return RCE_MainLIne_ThisMainMissionRewardClaimed;
        case 420: return RCE_MainLine_ThisAdditionRewardClaimed;
        case 421: return RCE_MainLine_ThisAdditionRewardCanNotClaimed;
        case 422: return RCE_MainLine_KeyNodeMissionNotComplete;
        case 423: return RCE_MainLine_CompleteKeyNodeMissionFirst;
        case 451: return RCE_Patorl_ErrorLocation;
        case 452: return RCE_Patorl_Explored;
        case 453: return RCE_Patrol_NotExplored;
        case 454: return RCE_Patorl_EventFail;
        case 455: return RCE_Patrol_FailureError;
        case 456: return RCE_Patrol_DailyMaxFailure;
        case 457: return RCE_Patrol_DissatisfyGreed;
        case 458: return RCE_Patrol_MissionNotExists;
        case 459: return RCE_Patrol_MissionEnd;
        case 460: return RCE_Patrol_TodayAlreadyPlay;
        case 461: return RCE_Patrol_TodayNotFinishPlay;
        case 471: return RCE_Store_GoodsIdNotExist;
        case 472: return RCE_Store_GoodsBuyUpperLimit;
        case 473: return RCE_Store_RefreshTimesLimit;
        case 474: return RCE_Store_UnsupportManualRefresh;
        case 491: return RCE_Target_MissionUnfinished;
        case 492: return RCE_Target_MissionAlreadyClaim;
        case 493: return RCE_Target_MissionCfgIdNotExist;
        case 494: return RCE_Target_MissionNotAccept;
        case 511: return RCE_BraveChallenge_ChoosenDifficulty;
        case 512: return RCE_BraveChallenge_AlreadyFinish;
        case 513: return RCE_BraveChallenge_RebornTimesUseUp;
        case 531: return RCE_MineFight_NotFoundMineSvr;
        case 532: return RCE_MineFight_NotFoundBattleSrv;
        case 533: return RCE_MineFight_NotFoundMine;
        case 534: return RCE_MineFight_NotEnoughtExploitScroll;
        case 535: return RCE_MineFight_PetFormPlundering;
        case 536: return RCE_MineFight_PetFormExploiting;
        case 537: return RCE_MineFight_NotClaimPetFormReward;
        case 538: return RCE_MineFight_MineIsBattling;
        case 539: return RCE_MineFight_EmptyPetForm;
        case 540: return RCE_MineFight_EnemyGiveUp;
        case 541: return RCE_MineFight_PlayerBattling;
        case 542: return RCE_MineFight_NotInMineFight;
        case 543: return RCE_MineFight_ChooseRewardErrorIndex;
        case 544: return RCE_MineFight_NotOccupiedMine;
        case 545: return RCE_MineFight_ErrorMineState;
        case 546: return RCE_MineFight_ClaimedReward;
        case 547: return RCE_MineFight_LevelLimit;
        case 548: return RCE_MineFight_ScrollPriceError;
        case 549: return RCE_MineFight_FriendHelping;
        case 550: return RCE_MineFight_EmptyFriendPetForm;
        case 551: return RCE_MineFight_FriendPetFormLocked;
        case 552: return RCE_MineFight_FriendRefused;
        case 553: return RCE_MineFight_AppliedFriendHelp;
        case 554: return RCE_MineFight_NotFoundPetForm;
        case 555: return RCE_MineFight_ExitFailedForBattling;
        case 556: return RCE_MineFight_BeyondGiftExpire;
        case 557: return RCE_MineFight_FriendIsHelpingYou;
        case 558: return RCE_MineFight_CanNotHelpMultiFriend;
        case 559: return RCE_MineFight_CannotOccupyHelpingFriend;
        case 561: return RCE_AncientCall_PetInTeam;
        case 562: return RCE_PetTransfer_UnsupportedTransferType;
        case 563: return RCE_PetTramsfer_HavaNoPetInTrsnsfer;
        case 581: return RCE_ResCopy_ChallengeTimesLimit;
        case 582: return RCE_ResCopy_BuyTimesLimit;
        case 583: return RCE_ResCopy_FightIsLimit;
        case 584: return RCE_ResCopy_IndexCanNotFight;
        case 601: return RCE_Activity_NotOpen;
        case 602: return RCE_Activity_CurrencyNotEnough;
        case 603: return RCE_Activity_MissionOutOfTime;
        case 604: return RCE_Activity_MissionCanNotClaim;
        case 605: return RCE_Activity_RewardAlreadyClaim;
        case 606: return RCE_Activity_RepeatedSignIn;
        case 607: return RCE_Activity_ExTimesLimit;
        case 608: return RCE_Activity_DissatisfyAddition;
        case 609: return RCE_Activity_MissionIsExpire;
        case 610: return RCE_Activity_PointNotEnough;
        case 611: return RCE_Activity_RepeatedBuy;
        case 651: return RCE_Pet_PetRuneLock;
        case 652: return RCE_Pet_RuneMaterailRuneError;
        case 653: return RCE_Pet_RuneLvlMaxError;
        case 654: return RCE_Pet_GemNotExist;
        case 655: return RCE_Pet_PetGemLock;
        case 656: return RCE_Pet_PetGemAlreadyEquip;
        case 657: return RCE_Pet_RankingPetNotExist;
        case 658: return RCE_Pet_NotMathCondition;
        case 659: return RCE_Pet_MaxEvolveLvLimit;
        case 660: return RCE_Pet_NoCanCompleteMission;
        case 701: return RCE_ActiveCode_LoseEfficacy;
        case 702: return RCE_ActiveCode_Used;
        case 703: return RCE_ActiveCode_Error;
        case 704: return RCE_ActiveCode_UpperLimit;
        case 705: return RCE_ActiveCode_UseSameTypeCode;
        case 751: return RCE_NewBee_RepeatedName;
        case 752: return RCE_NewBee_RepeatedChoicePet;
        case 753: return RCE_NewBee_RepeatedDrawCard;
        case 754: return RCE_NewBee_MistRewardCfgError;
        case 755: return RCE_NewBee_ClaimedMistNewbeeReward;
        case 801: return RCE_Arena_ChallengeItemNotEnough;
        case 802: return RCE_Arena_ChallengeItemOwnedCap;
        case 803: return RCE_Arena_OpponentCanNotBattle;
        case 804: return RCE_Arena_AllocationRoomFailed;
        case 805: return RCE_Arena_PlayerIsNotExist;
        case 806: return RCE_Arena_CanNotFindServer;
        case 851: return RCE_ActivityBoss_Closed;
        case 852: return RCE_ActivityBoss_UseUpTime;
        case 853: return RCE_Arena_RefreshFrequently;
        case 854: return RCE_ActivityBoss_CanNotBuyMore;
        case 855: return RCE_ActivityBoss_PlayerLvLimit;
        case 861: return RCE_Comment_NotFoundComment;
        case 862: return RCE_Comment_ErrorParam;
        case 863: return RCE_Comment_ErrorLength;
        case 864: return RCE_Comment_EmptyContent;
        case 865: return RCE_Comment_InvalidWord;
        case 866: return RCE_Comment_AlreadyLiked;
        case 867: return RCE_Comment_AlreadyComment;
        case 871: return RCE_MonthCard_NotFound;
        case 872: return RCE_MonthCard_LimitBuy;
        case 873: return RCE_MonthCard_AlreadyActive;
        case 881: return RCE_Feats_NotEnough;
        case 882: return RCE_Feats_RewardAlreadyClaim;
        case 883: return RCE_Feats_HasBuyAdvancedFeats;
        case 884: return RCE_Feats_AlreadyActive;
        case 902: return RCE_Recharge_Success;
        case 921: return RCE_BanShu_OutOfLimit;
        case 951: return RCE_GrowthFund_NotBuy;
        case 961: return RCE_AdsBonus_NoBonusTimes;
        case 962: return RCE_AdsBonus_NoWatchAdsTimes;
        case 963: return RCE_AdsBonus_InvalidPlayer;
        case 964: return RCE_TimeLimitGift_NotActive;
        case 981: return RCE_Report_Repeated;
        case 982: return RCE_Report_TimesLimit;
        case 983: return RCE_Ban_Comment;
        case 1101: return RCE_UploadTooFast;
        case 1111: return RCE_Player_SkillMaxLvError;
        case 1112: return RCE_Player_SkillMaxStarError;
        case 1113: return RCE_Player_SkillNotExists;
        case 1114: return RCE_Player_SkillNotActive;
        case 1131: return RCE_DemonDescends_RechargeItemAlreadyClaimed;
        case 1132: return RCE_DemonDescends_ItemBuyLimit;
        case 1151: return RCE_Hades_RemainNoWorshipTimes;
        case 1171: return RCE_NewTitle_Inactivated;
        case 1172: return RCE_NewTitle_Expired;
        case 1173: return RCE_NewTitle_NotEquip;
        case 1191: return RCE_GloryRoad_RedBag_OutOfTime;
        case 1192: return RCE_GloryRoad_RedBag_AlreadyClaimed;
        case 1193: return RCE_GloryRoad_Quiz_OutOfTime;
        case 1194: return RCE_GloryRoad_Quiz_AlreadySupported;
        case 1195: return RCE_GloryRoad_Quiz_IllegalComment;
        case 1196: return RCE_GloryRoad_Quiz_CommentTooLong;
        case 1197: return RCE_GloryRoad_Quiz_CommentFrequently;
        case 1198: return RCE_GloryRoad_EnsureOutOfTime;
        case 1251: return RCE_TheWar_NotJoinTheWar;
        case 1252: return RCE_TheWar_NotOpen;
        case 1253: return RCE_TheWar_RoomEnded;
        case 1254: return RCE_TheWar_NotFoundMap;
        case 1255: return RCE_TheWar_AttackOtherGrid;
        case 1256: return RCE_TheWar_NotFoundAroundTeamGrid;
        case 1257: return RCE_TheWar_BlockGrid;
        case 1258: return RCE_TheWar_JobTileCfgError;
        case 1259: return RCE_TheWar_LimitOccupyGridNum;
        case 1260: return RCE_TheWar_TargetGridIsPlayerSpawn;
        case 1261: return RCE_TheWar_OtherPlayerAttacking;
        case 1262: return RCE_TheWar_OccupyProtecting;
        case 1263: return RCE_TheWar_TeamGrid;
        case 1264: return RCE_TheWar_StaminaNotEnough;
        case 1265: return RCE_TheWar_EmptyPetTeam;
        case 1266: return RCE_TheWar_InvalidGrid;
        case 1280: return RCE_TheWar_NotFoundWarServer;
        case 1300: return RCE_RichMan_NotEnoughDice;
        case 132: return RCE_Inscription_GemLvNotEnough;
        case 133: return RCE_Inscription_MaterialNotExists;
        case 1321: return RCE_BattlePlayBack_VersionMissMatching;
        case 1322: return RCE_Battle_Batting;
        case 1323: return RCE_Battle_CanNotChallengeSelf;
        case 1351: return RCE_MatchArena_CanNotCancelMatch;
        case 1352: return RCE_MatchArena_NotInMatchStatus;
        case 1353: return RCE_MatchArena_PlayerInfoNotFount;
        case 1354: return RCE_MatchArena_UpdateDataFailed;
        case 1355: return RCE_MatchArena_RepeatedMatching;
        case 1356: return RCE_MatchArenaLT_BattleEnd;
        case 1357: return RCE_MatchArenaLT_STAGE_NOTEQ;
        case 1358: return RCE_MatchArenaLT_NOT_WAIT;
        case 1359: return RCE_MatchArenaLT_NOT_MYLT;
        case 1360: return RCE_MatchArenaLT_NOT_FIGHT;
        case 1361: return RCE_MatchArenaLT_RPEI_GUESS;
        case 1362: return RCE_MatchArenaLT_NOATTMY;
        case 1363: return RCE_MatchArenaLT_RPT;
        case 1364: return RCE_MatchArenaLT_LTING;
        case 1365: return RCE_MatchArena_PlayerIsMatching;
        case 1366: return RCE_CrossArena_TableNull;
        case 1367: return RCE_CrossArena_TableHavep;
        case 1368: return RCE_CrossArena_TableStop;
        case 1369: return RCE_CrossArena_TableNotDef;
        case 1370: return RCE_CrossArena_TableQueueMax;
        case 1371: return RCE_CrossArena_RPEI_GUESS;
        case 1372: return RCE_CrossArena_NO_Fighting;
        case 1373: return RCE_CrossArena_NO_WAIT;
        case 1374: return RCE_CrossArena_Fighting;
        case 1375: return RCE_CrossArena_NOATTMY;
        case 1376: return RCE_CrossArena_LVNOT;
        case 1377: return RCE_CrossArena_CHOOSE;
        case 1378: return RCE_CrossArena_OFFLINE;
        case 1379: return RCE_CrossArena_EVENT_END;
        case 1380: return RCE_CrossArena_SCENENEP;
        case 1381: return RCE_CrossArena_ATQUE;
        case 1382: return RCE_CrossArena_ATTABLE;
        case 1383: return RCE_CrossArena_AIBATTLE;
        case 1384: return RCE_CrossArena_TIMELOCK;
        case 1385: return RCE_CrossArena_ClaimTimeNotReach;
        case 1386: return RCE_CrossArena_AlreadyMoBai;
        case 1387: return RCE_CrossArena_ProtectCardTimeUseOut;
        case 1388: return RCE_CrossArena_ConditionNotMatch;
        case 1389: return RCE_CrossArena_OnlyCanChooseOneScienceReward;
        case 1390: return RCE_CrossArena_NoRewardCanClaim;
        case 1391: return RCE_CrossArena_NoMorePageData;
        case 1401: return RCE_ResourceRecycle_NoRewardsCanClaim;
        case 1412: return RCE_TRAIN_POSERROR;
        case 1413: return RCE_TRAIN_POSNOTFLISH;
        case 1414: return RCE_TRAIN_NOTOPEN;
        case 1415: return RCE_TRAIN_ExistTrainBuff;
        case 1416: return RCE_TRAIN_NotFinishNpcEvent;
        case 1417: return RCE_TRAIN_NotFinishChoseBUFF;
        case 1418: return RCE_TRAIN_CanNotRefreshShop;
        case 1419: return RCE_TRAIN_ItemUseBuffLimit;
        case 1431: return RCE_Mist_StaminaNotEnough;
        case 1432: return RCE_Mist_PlayerNotFound;
        case 1433: return RCE_Mist_CfgError;
        case 1434: return RCE_Mist_HasClaimedReward;
        case 1435: return RCE_Mist_InvalidClaimReward;
        case 1436: return RCE_Mist_BoxHasBeenOpened;
        case 1437: return RCE_Mist_BoxDisappear;
        case 1438: return RCE_Mist_MagicBoxHasGuards;
        case 1439: return RCE_Mist_FakeGargoyleMonster;
        case 1440: return RCE_Mist_TrulyGargoyleMonster;
        case 1441: return RCE_Mist_ClaimedBossActivityBox;
        case 1442: return RCE_Mist_NoQualificationToGetReward;
        case 1451: return RCE_FARMMINE_NOTMINE;
        case 1452: return RCE_FARMMINE_NOTHARVEST;
        case 1453: return RCE_FARMMINE_USEITEMTIMEMAX;
        case 1454: return RCE_FARMMINE_HARVESTMAX;
        case 1455: return RCE_FARMMINE_HARVESTQK;
        case 1456: return RCE_FARMMINE_LJTIMENOT;
        case 1457: return RCE_FARMMINE_StealNOT;
        case 1458: return RCE_FARMMINE_OFFERREQ;
        case 1459: return RCE_FARMMINE_OFFERNUMMAX;
        case 1460: return RCE_FARMMINE_OFFERPEL;
        case 1461: return RCE_FARMMINE_HAVEMINE;
        case 1462: return RCE_FARMMINE_StealMAX;
        case 1463: return RCE_FARMMINE_StealREPIR;
        case 1464: return RCE_FARMMINE_BEStealMAX;
        case 1481: return RCE_MAGICTHRON_TIME;
        case 1482: return RCE_MAGICTHRON_FIGHT;
        case 1483: return RCE_MAGICTHRON_FIGHTMAKE;
        case 1484: return RCE_PlayerAlreadyChooseArea;
        case 1485: return RCE_PlayerNotChooseArea;
        case 1501: return RCE_Barrage_IllegalMsg;
        case 1502: return RCE_Barrage_MsgIntervalTooShort;
        case 1521: return RCE_CP_IllegalTeamName;
        case 1522: return RCE_CP_PlayerInTeam;
        case 1523: return RCE_CP_NotJoinTeam;
        case 1524: return RCE_CP_TeamNotExists;
        case 1525: return RCE_CP_AbilityNotEnough;
        case 1526: return RCE_CP_FullTeamMember;
        case 1527: return RCE_CP_RepeatPublishTeam;
        case 1528: return RCE_CP_OnlyLeaderCanOperate;
        case 1529: return RCE_CP_CpInviteNotExists;
        case 1530: return RCE_CP_PlayerApplyJoinTeamNotExist;
        case 1531: return RCE_CP_CopyNotExists;
        case 1532: return RCE_CP_PointCantReach;
        case 1553: return RCE_CP_PointAlreadyExplore;
        case 1554: return RCE_CP_PlayTimesUseOut;
        case 1555: return RCE_CP_RepeatInvitePlayer;
        case 1556: return RCE_CP_RepeatApplyJoin;
        case 1557: return RCE_CP_RepeatClaim;
        case 1558: return RCE_CP_NotMatchCondition;
        case 1559: return RCE_CP_PlayerIsFighting;
        case 1560: return RCE_CP_PleaseReUploadTeam;
        case 1561: return RCE_CP_ApplyJoinTeam_ConditionNotMatch;
        case 1562: return RCE_CP_ReviveTimeUseOut;
        case 1571: return RCE_CROSSARERNAPVP_HAVEROOM;
        case 1572: return RCE_CROSSARERNAPVP_UPDATE;
        case 1573: return RCE_CROSSARERNAPVP_MISS;
        case 1574: return RCE_CROSSARERNAPVP_LIMIT;
        case 1575: return RCE_CROSSARERNAPVP_POWER;
        case 1576: return RCE_CROSSARERNAPVP_LEVEL;
        case 1577: return RCE_CROSSARERNAPVP_PETNUll;
        case 1578: return RCE_CROSSARERNAPVP_BATTLESERVERNUll;
        case 1579: return RCE_CROSSARERNAPVP_PETCREATEERR;
        case 1580: return RCE_CROSSARERNAPVP_RES_NULL;
        case 1591: return RCE_OfferReward_NoTask;
        case 1592: return RCE_OfferReward_TaskNotFinish;
        case 1593: return RCE_OfferReward_TaskExpired;
        case 1594: return RCE_OfferReward_TaskFinishedByOthers;
        case 1660: return RCE_CrazyDuel_TeamHasPublish;
        case 1661: return RCE_CrazyDuel_TeamSizeError;
        case 1662: return RCE_CrazyDuel_PlayerAlreadyDefeat;
        case 1663: return RCE_CrazyDuel_FloorError;
        case 1664: return RCE_CrazyDuel_PlayTimeUseOut;
        case 1665: return RCE_CrazyDuel_PlayNotSettingTeam;
        case 1666: return RCE_CrazyDuel_PlayerNotFinishSettingTeam;
        case 166: return RCE_CrazyDuel_RefreshTimeUseOut;
        case 1667: return RCE_CrazyDuel_CantBattleMorePlayer;
        case 1700: return RCE_PLAY_FIGHT;
        case 1701: return RCE_PLAY_LTPVP;
        case 1702: return RCE_PLAY_LT;
        case 1703: return RCE_PLAY_CRAZY;
        case 1704: return RCE_PLAY_TEAM;
        case 1705: return REC_IN_PET_AVOIDANCE_GAME;
        case 1801: return RCE_StoneRift_TimeNotReach;
        case 1802: return RCE_StoneRift_OverLoadInCD;
        case 1803: return RCE_StoneRift_FactoryNotUnlock;
        case 1804: return RCE_StoneRift_PetAlreadyInDefend;
        case 1805: return RCE_StoneRift_FactoryAlreadyUnlock;
        case 1806: return RCE_StoneRift_EventInCD;
        case 1807: return RCE_StoneRift_InvalidWord;
        case 1809: return RCE_StoneRiftScienceStudyConditionNotMatch;
        case 1810: return RCE_StoneRiftScienceLevelMaxLimit;
        case 1811: return RCE_StoneRift_LimitBuy;
        case 1812: return RCE_StoneRift_TimeUseOut;
        case 1813: return RCE_StoneRift_CantSteal;
        case 1814: return RCE_StoneRift_EmptyRewards;
        case 1815: return RCE_StoneRift_RiftLvNotEnough;
        case 1816: return RCE_StoneRift_PetNotMatch;
        case 1817: return RCE_StoneRift_FullDurable;
        case 1818: return RCE_StoneRift_AlreadyStealPlayer;
        case 1819: return RCE_StoneRift_NoResCanSteal;
        case 1901: return RCE_Activity_AlreadyShare;
        case 2051: return REC_Star_NotEnough;
        case 2052: return REC_StarTreasure_choosen;
        case 2053: return REC_StarTreasure_NotChoose;
        case 2054: return REC_StarTreasure_GetAll;
        case 3051: return REC_PetAvoidance_AlreadyInGame;
        case 3052: return REC_PetAvoidance_NotInGame;
        case 3053: return REC_petAvoidance_TimesLimit;
        case 3054: return REC_petAvoidance_Timeout;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RetCodeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RetCodeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RetCodeEnum>() {
            public RetCodeEnum findValueByNumber(int number) {
              return RetCodeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return protocol.RetCodeId.getDescriptor().getEnumTypes().get(0);
    }

    private static final RetCodeEnum[] VALUES = values();

    public static RetCodeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RetCodeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:RetCodeEnum)
  }

  public interface RetCodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RetCode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.RetCodeEnum retCode = 1;</code>
     */
    int getRetCodeValue();
    /**
     * <code>.RetCodeEnum retCode = 1;</code>
     */
    protocol.RetCodeId.RetCodeEnum getRetCode();

    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    java.util.List<protocol.RetCodeId.ParamInfo> 
        getParamsList();
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    protocol.RetCodeId.ParamInfo getParams(int index);
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    int getParamsCount();
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    java.util.List<? extends protocol.RetCodeId.ParamInfoOrBuilder> 
        getParamsOrBuilderList();
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    protocol.RetCodeId.ParamInfoOrBuilder getParamsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code RetCode}
   */
  public  static final class RetCode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:RetCode)
      RetCodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RetCode.newBuilder() to construct.
    private RetCode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RetCode() {
      retCode_ = 0;
      params_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RetCode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              retCode_ = rawValue;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                params_ = new java.util.ArrayList<protocol.RetCodeId.ParamInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              params_.add(
                  input.readMessage(protocol.RetCodeId.ParamInfo.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          params_ = java.util.Collections.unmodifiableList(params_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.RetCodeId.internal_static_RetCode_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.RetCodeId.internal_static_RetCode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.RetCodeId.RetCode.class, protocol.RetCodeId.RetCode.Builder.class);
    }

    private int bitField0_;
    public static final int RETCODE_FIELD_NUMBER = 1;
    private int retCode_;
    /**
     * <code>.RetCodeEnum retCode = 1;</code>
     */
    public int getRetCodeValue() {
      return retCode_;
    }
    /**
     * <code>.RetCodeEnum retCode = 1;</code>
     */
    public protocol.RetCodeId.RetCodeEnum getRetCode() {
      protocol.RetCodeId.RetCodeEnum result = protocol.RetCodeId.RetCodeEnum.valueOf(retCode_);
      return result == null ? protocol.RetCodeId.RetCodeEnum.UNRECOGNIZED : result;
    }

    public static final int PARAMS_FIELD_NUMBER = 2;
    private java.util.List<protocol.RetCodeId.ParamInfo> params_;
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public java.util.List<protocol.RetCodeId.ParamInfo> getParamsList() {
      return params_;
    }
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public java.util.List<? extends protocol.RetCodeId.ParamInfoOrBuilder> 
        getParamsOrBuilderList() {
      return params_;
    }
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public int getParamsCount() {
      return params_.size();
    }
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public protocol.RetCodeId.ParamInfo getParams(int index) {
      return params_.get(index);
    }
    /**
     * <code>repeated .ParamInfo params = 2;</code>
     */
    public protocol.RetCodeId.ParamInfoOrBuilder getParamsOrBuilder(
        int index) {
      return params_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (retCode_ != protocol.RetCodeId.RetCodeEnum.RCE_Null.getNumber()) {
        output.writeEnum(1, retCode_);
      }
      for (int i = 0; i < params_.size(); i++) {
        output.writeMessage(2, params_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (retCode_ != protocol.RetCodeId.RetCodeEnum.RCE_Null.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, retCode_);
      }
      for (int i = 0; i < params_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, params_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocol.RetCodeId.RetCode)) {
        return super.equals(obj);
      }
      protocol.RetCodeId.RetCode other = (protocol.RetCodeId.RetCode) obj;

      boolean result = true;
      result = result && retCode_ == other.retCode_;
      result = result && getParamsList()
          .equals(other.getParamsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RETCODE_FIELD_NUMBER;
      hash = (53 * hash) + retCode_;
      if (getParamsCount() > 0) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getParamsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocol.RetCodeId.RetCode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.RetCode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.RetCode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocol.RetCodeId.RetCode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RetCode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RetCode)
        protocol.RetCodeId.RetCodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocol.RetCodeId.internal_static_RetCode_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocol.RetCodeId.internal_static_RetCode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocol.RetCodeId.RetCode.class, protocol.RetCodeId.RetCode.Builder.class);
      }

      // Construct using protocol.RetCodeId.RetCode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        retCode_ = 0;

        if (paramsBuilder_ == null) {
          params_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          paramsBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocol.RetCodeId.internal_static_RetCode_descriptor;
      }

      public protocol.RetCodeId.RetCode getDefaultInstanceForType() {
        return protocol.RetCodeId.RetCode.getDefaultInstance();
      }

      public protocol.RetCodeId.RetCode build() {
        protocol.RetCodeId.RetCode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocol.RetCodeId.RetCode buildPartial() {
        protocol.RetCodeId.RetCode result = new protocol.RetCodeId.RetCode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.retCode_ = retCode_;
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            params_ = java.util.Collections.unmodifiableList(params_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocol.RetCodeId.RetCode) {
          return mergeFrom((protocol.RetCodeId.RetCode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocol.RetCodeId.RetCode other) {
        if (other == protocol.RetCodeId.RetCode.getDefaultInstance()) return this;
        if (other.retCode_ != 0) {
          setRetCodeValue(other.getRetCodeValue());
        }
        if (paramsBuilder_ == null) {
          if (!other.params_.isEmpty()) {
            if (params_.isEmpty()) {
              params_ = other.params_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureParamsIsMutable();
              params_.addAll(other.params_);
            }
            onChanged();
          }
        } else {
          if (!other.params_.isEmpty()) {
            if (paramsBuilder_.isEmpty()) {
              paramsBuilder_.dispose();
              paramsBuilder_ = null;
              params_ = other.params_;
              bitField0_ = (bitField0_ & ~0x00000002);
              paramsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getParamsFieldBuilder() : null;
            } else {
              paramsBuilder_.addAllMessages(other.params_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocol.RetCodeId.RetCode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocol.RetCodeId.RetCode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int retCode_ = 0;
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public int getRetCodeValue() {
        return retCode_;
      }
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public Builder setRetCodeValue(int value) {
        retCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public protocol.RetCodeId.RetCodeEnum getRetCode() {
        protocol.RetCodeId.RetCodeEnum result = protocol.RetCodeId.RetCodeEnum.valueOf(retCode_);
        return result == null ? protocol.RetCodeId.RetCodeEnum.UNRECOGNIZED : result;
      }
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public Builder setRetCode(protocol.RetCodeId.RetCodeEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        retCode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.RetCodeEnum retCode = 1;</code>
       */
      public Builder clearRetCode() {
        
        retCode_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<protocol.RetCodeId.ParamInfo> params_ =
        java.util.Collections.emptyList();
      private void ensureParamsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          params_ = new java.util.ArrayList<protocol.RetCodeId.ParamInfo>(params_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocol.RetCodeId.ParamInfo, protocol.RetCodeId.ParamInfo.Builder, protocol.RetCodeId.ParamInfoOrBuilder> paramsBuilder_;

      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public java.util.List<protocol.RetCodeId.ParamInfo> getParamsList() {
        if (paramsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(params_);
        } else {
          return paramsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public int getParamsCount() {
        if (paramsBuilder_ == null) {
          return params_.size();
        } else {
          return paramsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfo getParams(int index) {
        if (paramsBuilder_ == null) {
          return params_.get(index);
        } else {
          return paramsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder setParams(
          int index, protocol.RetCodeId.ParamInfo value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.set(index, value);
          onChanged();
        } else {
          paramsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder setParams(
          int index, protocol.RetCodeId.ParamInfo.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.set(index, builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addParams(protocol.RetCodeId.ParamInfo value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.add(value);
          onChanged();
        } else {
          paramsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addParams(
          int index, protocol.RetCodeId.ParamInfo value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.add(index, value);
          onChanged();
        } else {
          paramsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addParams(
          protocol.RetCodeId.ParamInfo.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.add(builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addParams(
          int index, protocol.RetCodeId.ParamInfo.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.add(index, builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder addAllParams(
          java.lang.Iterable<? extends protocol.RetCodeId.ParamInfo> values) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, params_);
          onChanged();
        } else {
          paramsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public Builder removeParams(int index) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.remove(index);
          onChanged();
        } else {
          paramsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfo.Builder getParamsBuilder(
          int index) {
        return getParamsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfoOrBuilder getParamsOrBuilder(
          int index) {
        if (paramsBuilder_ == null) {
          return params_.get(index);  } else {
          return paramsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public java.util.List<? extends protocol.RetCodeId.ParamInfoOrBuilder> 
           getParamsOrBuilderList() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(params_);
        }
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfo.Builder addParamsBuilder() {
        return getParamsFieldBuilder().addBuilder(
            protocol.RetCodeId.ParamInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public protocol.RetCodeId.ParamInfo.Builder addParamsBuilder(
          int index) {
        return getParamsFieldBuilder().addBuilder(
            index, protocol.RetCodeId.ParamInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .ParamInfo params = 2;</code>
       */
      public java.util.List<protocol.RetCodeId.ParamInfo.Builder> 
           getParamsBuilderList() {
        return getParamsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocol.RetCodeId.ParamInfo, protocol.RetCodeId.ParamInfo.Builder, protocol.RetCodeId.ParamInfoOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              protocol.RetCodeId.ParamInfo, protocol.RetCodeId.ParamInfo.Builder, protocol.RetCodeId.ParamInfoOrBuilder>(
                  params_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:RetCode)
    }

    // @@protoc_insertion_point(class_scope:RetCode)
    private static final protocol.RetCodeId.RetCode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocol.RetCodeId.RetCode();
    }

    public static protocol.RetCodeId.RetCode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RetCode>
        PARSER = new com.google.protobuf.AbstractParser<RetCode>() {
      public RetCode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new RetCode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RetCode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RetCode> getParserForType() {
      return PARSER;
    }

    public protocol.RetCodeId.RetCode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ParamInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ParamInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 0为int32，1为string，2为int64
     * </pre>
     *
     * <code>int32 pramType = 1;</code>
     */
    int getPramType();

    /**
     * <code>string paramVal = 2;</code>
     */
    java.lang.String getParamVal();
    /**
     * <code>string paramVal = 2;</code>
     */
    com.google.protobuf.ByteString
        getParamValBytes();
  }
  /**
   * Protobuf type {@code ParamInfo}
   */
  public  static final class ParamInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ParamInfo)
      ParamInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ParamInfo.newBuilder() to construct.
    private ParamInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ParamInfo() {
      pramType_ = 0;
      paramVal_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ParamInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              pramType_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              paramVal_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.RetCodeId.internal_static_ParamInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.RetCodeId.internal_static_ParamInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.RetCodeId.ParamInfo.class, protocol.RetCodeId.ParamInfo.Builder.class);
    }

    public static final int PRAMTYPE_FIELD_NUMBER = 1;
    private int pramType_;
    /**
     * <pre>
     * 0为int32，1为string，2为int64
     * </pre>
     *
     * <code>int32 pramType = 1;</code>
     */
    public int getPramType() {
      return pramType_;
    }

    public static final int PARAMVAL_FIELD_NUMBER = 2;
    private volatile java.lang.Object paramVal_;
    /**
     * <code>string paramVal = 2;</code>
     */
    public java.lang.String getParamVal() {
      java.lang.Object ref = paramVal_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        paramVal_ = s;
        return s;
      }
    }
    /**
     * <code>string paramVal = 2;</code>
     */
    public com.google.protobuf.ByteString
        getParamValBytes() {
      java.lang.Object ref = paramVal_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        paramVal_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (pramType_ != 0) {
        output.writeInt32(1, pramType_);
      }
      if (!getParamValBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, paramVal_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (pramType_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, pramType_);
      }
      if (!getParamValBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, paramVal_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocol.RetCodeId.ParamInfo)) {
        return super.equals(obj);
      }
      protocol.RetCodeId.ParamInfo other = (protocol.RetCodeId.ParamInfo) obj;

      boolean result = true;
      result = result && (getPramType()
          == other.getPramType());
      result = result && getParamVal()
          .equals(other.getParamVal());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PRAMTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getPramType();
      hash = (37 * hash) + PARAMVAL_FIELD_NUMBER;
      hash = (53 * hash) + getParamVal().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocol.RetCodeId.ParamInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.ParamInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.RetCodeId.ParamInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocol.RetCodeId.ParamInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ParamInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ParamInfo)
        protocol.RetCodeId.ParamInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocol.RetCodeId.internal_static_ParamInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocol.RetCodeId.internal_static_ParamInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocol.RetCodeId.ParamInfo.class, protocol.RetCodeId.ParamInfo.Builder.class);
      }

      // Construct using protocol.RetCodeId.ParamInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        pramType_ = 0;

        paramVal_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocol.RetCodeId.internal_static_ParamInfo_descriptor;
      }

      public protocol.RetCodeId.ParamInfo getDefaultInstanceForType() {
        return protocol.RetCodeId.ParamInfo.getDefaultInstance();
      }

      public protocol.RetCodeId.ParamInfo build() {
        protocol.RetCodeId.ParamInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocol.RetCodeId.ParamInfo buildPartial() {
        protocol.RetCodeId.ParamInfo result = new protocol.RetCodeId.ParamInfo(this);
        result.pramType_ = pramType_;
        result.paramVal_ = paramVal_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocol.RetCodeId.ParamInfo) {
          return mergeFrom((protocol.RetCodeId.ParamInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocol.RetCodeId.ParamInfo other) {
        if (other == protocol.RetCodeId.ParamInfo.getDefaultInstance()) return this;
        if (other.getPramType() != 0) {
          setPramType(other.getPramType());
        }
        if (!other.getParamVal().isEmpty()) {
          paramVal_ = other.paramVal_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocol.RetCodeId.ParamInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocol.RetCodeId.ParamInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int pramType_ ;
      /**
       * <pre>
       * 0为int32，1为string，2为int64
       * </pre>
       *
       * <code>int32 pramType = 1;</code>
       */
      public int getPramType() {
        return pramType_;
      }
      /**
       * <pre>
       * 0为int32，1为string，2为int64
       * </pre>
       *
       * <code>int32 pramType = 1;</code>
       */
      public Builder setPramType(int value) {
        
        pramType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 0为int32，1为string，2为int64
       * </pre>
       *
       * <code>int32 pramType = 1;</code>
       */
      public Builder clearPramType() {
        
        pramType_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object paramVal_ = "";
      /**
       * <code>string paramVal = 2;</code>
       */
      public java.lang.String getParamVal() {
        java.lang.Object ref = paramVal_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          paramVal_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string paramVal = 2;</code>
       */
      public com.google.protobuf.ByteString
          getParamValBytes() {
        java.lang.Object ref = paramVal_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          paramVal_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string paramVal = 2;</code>
       */
      public Builder setParamVal(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        paramVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string paramVal = 2;</code>
       */
      public Builder clearParamVal() {
        
        paramVal_ = getDefaultInstance().getParamVal();
        onChanged();
        return this;
      }
      /**
       * <code>string paramVal = 2;</code>
       */
      public Builder setParamValBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        paramVal_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ParamInfo)
    }

    // @@protoc_insertion_point(class_scope:ParamInfo)
    private static final protocol.RetCodeId.ParamInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocol.RetCodeId.ParamInfo();
    }

    public static protocol.RetCodeId.ParamInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ParamInfo>
        PARSER = new com.google.protobuf.AbstractParser<ParamInfo>() {
      public ParamInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ParamInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ParamInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ParamInfo> getParserForType() {
      return PARSER;
    }

    public protocol.RetCodeId.ParamInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RetCode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RetCode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ParamInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ParamInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017RetCodeId.proto\"D\n\007RetCode\022\035\n\007retCode\030" +
      "\001 \001(\0162\014.RetCodeEnum\022\032\n\006params\030\002 \003(\0132\n.Pa" +
      "ramInfo\"/\n\tParamInfo\022\020\n\010pramType\030\001 \001(\005\022\020" +
      "\n\010paramVal\030\002 \001(\t*\204\205\001\n\013RetCodeEnum\022\014\n\010RCE" +
      "_Null\020\000\022\017\n\013RCE_Success\020\001\022\017\n\013RCE_Failure\020" +
      "\002\022\024\n\020RCE_UnknownError\020\003\022\025\n\021RCE_PlayerOff" +
      "line\020\004\022\022\n\016RCE_ErrorParam\020\005\022\026\n\022RCE_Functi" +
      "onIsLock\020\006\022\031\n\025RCE_ShopTypeMissMatch\020\007\022\031\n" +
      "\025RCE_MatieralNotEnough\020\010\022\023\n\017RCE_LvNotEno" +
      "ugh\020\t\022\026\n\022RCE_Login_ErrorPwd\020\n\022\030\n\024RCE_Log",
      "in_FullPlayer\020\013\022\033\n\027RCE_Login_ServerNotOp" +
      "en\020\014\022 \n\034RCE_Login_ClientVersionError\020\r\022\023" +
      "\n\017RCE_ConfigError\020\016\022\026\n\022RSE_ConfigNotExis" +
      "t\020\017\022\026\n\022RSE_VipGiftClaimed\020\020\022\026\n\022RSE_Inval" +
      "idRequest\020\021\022$\n RSE_Function_AbnormalMain" +
      "tenance\020\022\022\031\n\025RSE_Login_AccountLock\020\023\022 \n\034" +
      "RCE_CreateRole_DuplicateName\020\024\022\036\n\032RCE_Cr" +
      "eateRole_InvalidName\020\025\022\035\n\031RCE_CreateRole" +
      "_ErrorOrder\020\026\022\"\n\036RCE_CreateRole_ForbidMo" +
      "difySex\020\027\022\030\n\024RCE_Login_ServerBusy\020\035\022\032\n\026R",
      "CE_Login_LoginTooFast\020\036\022\033\n\027RCE_KickOut_R" +
      "epeatLogin\020\037\022\033\n\027RCE_KickOut_ServerClose\020" +
      " \022\031\n\025RCE_KickOut_AntiLimit\020!\022\026\n\022RCE_Kick" +
      "Out_Banned\020\"\022\037\n\033RCE_KickOut_SkipNewBeeGu" +
      "ide\020#\022%\n!RCE_KickOut_RepeatLoginWithSame" +
      "Ip\020$\022\031\n\025RCE_Mail_GemBagIsFull\020%\022\032\n\026RCE_M" +
      "ail_ItemBagIsFull\020&\022\031\n\025RCE_Mail_PetBagIs" +
      "Full\020\'\022\032\n\026RCE_Mail_RuneBagIsFull\020(\022\024\n\020RC" +
      "E_Mail_UnExist\020)\022\031\n\025RCE_Mail_NoAttachmen" +
      "t\020*\022\036\n\032RCE_Mail_UnEnoughtCapacity\020+\022\033\n\027R",
      "CE_Mail_AlreadyCliamed\020,\022\036\n\032RCE_Mail_Att" +
      "achmentNoClaim\020-\022\023\n\017RCE_Mail_UnRead\020.\022\'\n" +
      "#RCE_PrepareWar_TargetPositionHasPet\020/\022%" +
      "\n!RCE_PrepareWar_PetIsInPetTransfer\0200\022#\n" +
      "\037RCE_PrepareWar_TeamStatusIslock\0201\022\034\n\030RC" +
      "E_PrepareWar_PetIsDead\0202\022\035\n\031RCE_PrepareW" +
      "ar_PetNoExist\0203\022\036\n\032RCE_PrepareWar_LvNotE" +
      "ought\0204\022\"\n\036RCE_PrepareWar_IllegalTeamNam" +
      "e\0205\022 \n\034RCE_PrepareWar_CanNotBuyMore\0206\022$\n" +
      " RCE_PrepareWar_DiamondNotEnought\0208\022!\n\035R",
      "CE_PrepareWar_PositionIsLock\0209\022\035\n\031RCE_Pr" +
      "epareWar_TeamIslock\020:\022 \n\034RCE_PrepareWar_" +
      "SkillNotExist\020;\022%\n!RCE_PrepareWar_Repeat" +
      "edSetSamePet\020<\022\034\n\030RCE_Itembag_ItemNotExi" +
      "st\020=\022\036\n\032RCE_Itembag_ItemNotEnought\020>\022\036\n\032" +
      "RCE_Itembag_ItemCanNotUsed\020?\022\036\n\032RCE_Item" +
      "Bag_ItemCanNotSell\020@\022\034\n\030RCE_ItemBag_Mist" +
      "BoxLimit\020A\022\035\n\031RCE_ItemBag_CanNotUseMore\020" +
      "B\022\035\n\031RCE_Player_NotOwnedAvatar\020G\022\035\n\031RCE_" +
      "Player_GoldNotEnought\020H\022 \n\034RCE_Player_Di",
      "amondNotEnought\020I\022\"\n\036RCE_Player_Currency" +
      "sNotEnought\020J\022!\n\035RCE_Player_DisplayPetNo" +
      "tExist\020K\022\"\n\036RCE_Player_QueryPlayerNotExi" +
      "st\020L\022!\n\035RCE_Player_AvatarBorderLocked\020M\022" +
      "!\n\035RCE_Player_AvatarBorderExpire\020N\022\033\n\027RC" +
      "E_Player_GoodsExpired\020O\022%\n!RCE_EndlessSp" +
      "ire_ThisLvCanNotPlay\020Q\022%\n!RCE_EndlessSpi" +
      "re_PlayerStatusBusy\020R\022\'\n#RCE_EndlessSpir" +
      "e_ThisLvCanNotSettle\020S\0222\n.RCE_EndlessSpi" +
      "re_ThisLvHaveNoAchievementReward\020T\0223\n/RC",
      "E_EndlessSpire_ThisLvAchievementRewardCl" +
      "aimed\020U\022.\n*RCE_EndlessSpire_CurAchieveme" +
      "ntNotFinished\020V\022\036\n\032RCE_Battle_EnemyPetIs" +
      "Empty\020Z\022!\n\035RCE_Battle_UsedTeamNotHavePet" +
      "\020[\022\"\n\036RCE_Battle_FightMakeIsNotExist\020\\\022\"" +
      "\n\036RCE_Battle_RepeatedEnterBattle\020]\022\030\n\024RC" +
      "E_Battle_DataError\020^\022\032\n\026RCE_Battle_NotIn" +
      "Battle\020`\022\031\n\025RCE_Battle_OutOfLimit\020a\022\034\n\030R" +
      "CE_Battle_BattleTooFast\020b\022%\n!RCE_Prepare" +
      "War_PetCountOutOfLimit\020c\022 \n\034RCE_AlterNam",
      "e_NotFoundPlayer\020d\022\034\n\030RCE_AlterName_Evil" +
      "Player\020e\022 \n\034RCE_AlterName_DuringRenameCD" +
      "\020f\022\035\n\031RCE_AlterName_IllegalName\020g\022\036\n\032RCE" +
      "_AlterName_IllegalWords\020n\022\031\n\025RCE_AlterNa" +
      "me_TooLong\020o\022\033\n\027RCE_AlterName_Duplicate\020" +
      "p\022\027\n\023RCE_AlterName_Empty\020q\022\035\n\031RCE_VipExp" +
      "MaxBuyTimeLimit\020r\022\031\n\025RCE_FunctionNotUnLo" +
      "ck\020s\022\031\n\025RCE_PlayerLvNotEnough\020t\022\"\n\035RCE_M" +
      "istForest_CreateRoomFail\020\310\001\022&\n!RCE_MistF" +
      "orest_NotFoundMistPlayer\020\311\001\022!\n\034RCE_MistF",
      "orest_NotInMistRoom\020\312\001\022\'\n\"RCE_MistForest" +
      "_NotFoundMistFighter\020\313\001\022#\n\036RCE_MistFores" +
      "t_NotInSafeRegion\020\314\001\022!\n\034RCE_MistForest_A" +
      "lreadyInMist\020\315\001\022\037\n\032RCE_MistForest_CanNot" +
      "Touch\020\316\001\022(\n#RCE_MistForest_AlreadySubmit" +
      "Jewelry\020\317\001\022#\n\036RCE_MistForest_NotFoundSea" +
      "lBox\020\320\001\022$\n\037RCE_MistForest_NotEnoughJewel" +
      "ry\020\321\001\022%\n RCE_MistForest_JewelryIdNotMatc" +
      "h\020\322\001\022&\n!RCE_MistForest_HiddenEvilNotFoun" +
      "d\020\323\001\022%\n RCE_MistForest_HiddenEvilExpired",
      "\020\324\001\022&\n!RCE_MistForest_HiddenEvilSummoned" +
      "\020\325\001\022\"\n\035RCE_MistForest_ServerNotLogin\020\204\002\022" +
      "!\n\034RCE_ForInv_StatusMismatching\020\255\002\022\"\n\035RC" +
      "E_ForInv_MonsterIdxNotExist\020\256\002\022!\n\034RCE_Fo" +
      "rInv_BossCloneNotExist\020\257\002\022\037\n\032RCE_ForInv_" +
      "ClaimCountLimit\020\260\002\022#\n\036RCE_ForInv_RemoveM" +
      "onsterFailed\020\261\002\022#\n\036RCE_ForInv_CreateMons" +
      "terFailed\020\262\002\022\035\n\030RCE_ForInv_BuildingFreed" +
      "\020\263\002\022 \n\033RCE_Friend_FriendUpperLimit\020\301\002\022$\n" +
      "\037RCE_Friend_TargetPlayerNotExist\020\302\002\022%\n R",
      "CE_Friend_TargetApplyUpperLimit\020\303\002\022&\n!RC" +
      "E_Friend_TargetFriendUpperLimit\020\304\002\022!\n\034RC" +
      "E_Friend_TargetIsNotFriend\020\305\002\022\036\n\031RCE_Fri" +
      "end_CanNotFindSelf\020\306\002\022(\n#RCE_Friend_Repe" +
      "atedSendToSameTarget\020\307\002\022$\n\037RCE_Friend_No" +
      "tRecvPointFromThis\020\310\002\022\035\n\030RCE_Friend_Repe" +
      "atedClaim\020\311\002\022#\n\036RCE_Friend_FriendItemGai" +
      "nLimit\020\312\002\022+\n&RCE_DrawCard_FriednshipPoin" +
      "tNotEnought\020\325\002\022#\n\036RCE_DrawCard_LowBookNo" +
      "tEnought\020\326\002\022$\n\037RCE_DrawCard_HighBookNotE",
      "nought\020\327\002\022)\n$RCE_DrawCard_HighDrawCountU" +
      "pperLimit\020\330\002\022\034\n\027RCE_GoldEx_ExUpperLimit\020" +
      "\351\002\022\'\n\"RCE_Pet_PetNumLessThanCoupTeamNeed" +
      "\020\365\002\022\'\n\"RCE_Pet_CoupTeamPetLvDifferGreatl" +
      "y\020\366\002\022\036\n\031RCE_Pet_VoidStoneIsUnLock\020\367\002\022\027\n\022" +
      "RCE_Pet_LevelLimit\020\370\002\022\035\n\030RCE_Pet_RarityM" +
      "axLvLimit\020\371\002\022 \n\033RCE_Pet_VoidStoneMaxLvLi" +
      "mit\020\372\002\022\036\n\031RCE_Pet_VoidStoneNotExist\020\373\002\022\034" +
      "\n\027RCE_Pet_PetLvGtPlayerLv\020\374\002\022\031\n\024RCE_Pet_" +
      "UpLvlFailure\020\375\002\022\030\n\023RCE_Pet_PetNotExist\020\376",
      "\002\022\031\n\024RCE_Pet_RuneNotExist\020\377\002\022#\n\036RCE_Pet_" +
      "MissionAlreadyFinished\020\200\003\022\034\n\027RCE_Pet_Mis" +
      "sionMaxError\020\201\003\022\034\n\027RCE_Pet_MissionNotFou" +
      "nd\020\202\003\022!\n\034RCE_Pet_MissionPetNotCorrect\020\203\003" +
      "\022\036\n\031RCE_Pet_FragmentNotEnough\020\204\003\022\035\n\030RCE_" +
      "Pet_FragmentNotFound\020\205\003\022\032\n\025RCE_Pet_PetSt" +
      "atusLock\020\206\003\022!\n\034RCE_Pet_PetStatusMissionL" +
      "ock\020\207\003\022\036\n\031RCE_Pet_PetStatusMineLock\020\210\003\022\036" +
      "\n\031RCE_Pet_PetStatusTeamLock\020\211\003\022 \n\033RCE_Pe" +
      "t_PetStatusChangeLock\020\212\003\022%\n RCE_Pet_PetC",
      "olleciontRewardError\020\213\003\022\033\n\026RCE_Pet_PetLv" +
      "lMaxErroe\020\214\003\022\"\n\035RCE_Pet_PetRuneAlreadyEq" +
      "uiped\020\215\003\022\034\n\027RCE_Pet_PetBagNotEnough\020\216\003\022\035" +
      "\n\030RCE_Pet_RuneBagNotEnough\020\217\003\022\037\n\032RCE_Pet" +
      "_MissionNotComplete\020\220\003\022%\n RCE_MainLine_C" +
      "heckPointCfgIsNull\020\221\003\022\"\n\035RCE_MainLine_Ch" +
      "eckPointIsLock\020\222\003\022(\n#RCE_MainLine_CheckP" +
      "ointCanNotBattle\020\223\003\022!\n\034RCE_MainLine_Figh" +
      "tOrderError\020\224\003\022!\n\034RCE_MainLine_NodeCanNo" +
      "tReach\020\225\003\022 \n\033RCE_MainLine_CurLvMissMatch",
      "\020\226\003\022&\n!RCE_MainLine_NodeTypeCanNotBattle" +
      "\020\227\003\022!\n\034RCE_MainLine_CurNodeIsPassed\020\230\003\022$" +
      "\n\037RCE_MainLine_PlayerHaveNoOnhook\020\231\003\022\037\n\032" +
      "RCE_MainLine_NodeCfgIsNull\020\232\003\022\037\n\032RCE_Mai" +
      "nLine_CurNodeIsLock\020\233\003\022%\n RCE_MainLine_C" +
      "urNodeCanNotBattle\020\234\003\022#\n\036RCE_MainLine_Ps" +
      "wNotInputFinish\020\235\003\022)\n$RCE_MainLine_Check" +
      "PointTypeMissMatch\020\236\003\022 \n\033RCE_MainLine_Ps" +
      "wLengthError\020\237\003\022!\n\034RCE_MainLine_InputNot" +
      "PswNode\020\240\003\022!\n\034RCE_MainLine_InputTheSameP",
      "sw\020\241\003\022\"\n\035RCE_MainLine_QuickOnHookLimit\020\242" +
      "\003\022.\n)RCE_MainLIne_ThisMainMissionRewardC" +
      "laimed\020\243\003\022+\n&RCE_MainLine_ThisAdditionRe" +
      "wardClaimed\020\244\003\0221\n,RCE_MainLine_ThisAddit" +
      "ionRewardCanNotClaimed\020\245\003\022+\n&RCE_MainLin" +
      "e_KeyNodeMissionNotComplete\020\246\003\022-\n(RCE_Ma" +
      "inLine_CompleteKeyNodeMissionFirst\020\247\003\022\035\n" +
      "\030RCE_Patorl_ErrorLocation\020\303\003\022\030\n\023RCE_Pato" +
      "rl_Explored\020\304\003\022\033\n\026RCE_Patrol_NotExplored" +
      "\020\305\003\022\031\n\024RCE_Patorl_EventFail\020\306\003\022\034\n\027RCE_Pa",
      "trol_FailureError\020\307\003\022\037\n\032RCE_Patrol_Daily" +
      "MaxFailure\020\310\003\022\037\n\032RCE_Patrol_DissatisfyGr" +
      "eed\020\311\003\022 \n\033RCE_Patrol_MissionNotExists\020\312\003" +
      "\022\032\n\025RCE_Patrol_MissionEnd\020\313\003\022 \n\033RCE_Patr" +
      "ol_TodayAlreadyPlay\020\314\003\022\"\n\035RCE_Patrol_Tod" +
      "ayNotFinishPlay\020\315\003\022\036\n\031RCE_Store_GoodsIdN" +
      "otExist\020\327\003\022!\n\034RCE_Store_GoodsBuyUpperLim" +
      "it\020\330\003\022 \n\033RCE_Store_RefreshTimesLimit\020\331\003\022" +
      "%\n RCE_Store_UnsupportManualRefresh\020\332\003\022!" +
      "\n\034RCE_Target_MissionUnfinished\020\353\003\022#\n\036RCE",
      "_Target_MissionAlreadyClaim\020\354\003\022$\n\037RCE_Ta" +
      "rget_MissionCfgIdNotExist\020\355\003\022 \n\033RCE_Targ" +
      "et_MissionNotAccept\020\356\003\022)\n$RCE_BraveChall" +
      "enge_ChoosenDifficulty\020\377\003\022%\n RCE_BraveCh" +
      "allenge_AlreadyFinish\020\200\004\022(\n#RCE_BraveCha" +
      "llenge_RebornTimesUseUp\020\201\004\022\"\n\035RCE_MineFi" +
      "ght_NotFoundMineSvr\020\223\004\022$\n\037RCE_MineFight_" +
      "NotFoundBattleSrv\020\224\004\022\037\n\032RCE_MineFight_No" +
      "tFoundMine\020\225\004\022*\n%RCE_MineFight_NotEnough" +
      "tExploitScroll\020\226\004\022$\n\037RCE_MineFight_PetFo",
      "rmPlundering\020\227\004\022$\n\037RCE_MineFight_PetForm" +
      "Exploiting\020\230\004\022(\n#RCE_MineFight_NotClaimP" +
      "etFormReward\020\231\004\022!\n\034RCE_MineFight_MineIsB" +
      "attling\020\232\004\022\037\n\032RCE_MineFight_EmptyPetForm" +
      "\020\233\004\022\036\n\031RCE_MineFight_EnemyGiveUp\020\234\004\022!\n\034R" +
      "CE_MineFight_PlayerBattling\020\235\004\022!\n\034RCE_Mi" +
      "neFight_NotInMineFight\020\236\004\022)\n$RCE_MineFig" +
      "ht_ChooseRewardErrorIndex\020\237\004\022\"\n\035RCE_Mine" +
      "Fight_NotOccupiedMine\020\240\004\022!\n\034RCE_MineFigh" +
      "t_ErrorMineState\020\241\004\022 \n\033RCE_MineFight_Cla",
      "imedReward\020\242\004\022\035\n\030RCE_MineFight_LevelLimi" +
      "t\020\243\004\022#\n\036RCE_MineFight_ScrollPriceError\020\244" +
      "\004\022 \n\033RCE_MineFight_FriendHelping\020\245\004\022%\n R" +
      "CE_MineFight_EmptyFriendPetForm\020\246\004\022&\n!RC" +
      "E_MineFight_FriendPetFormLocked\020\247\004\022 \n\033RC" +
      "E_MineFight_FriendRefused\020\250\004\022$\n\037RCE_Mine" +
      "Fight_AppliedFriendHelp\020\251\004\022\"\n\035RCE_MineFi" +
      "ght_NotFoundPetForm\020\252\004\022(\n#RCE_MineFight_" +
      "ExitFailedForBattling\020\253\004\022#\n\036RCE_MineFigh" +
      "t_BeyondGiftExpire\020\254\004\022%\n RCE_MineFight_F",
      "riendIsHelpingYou\020\255\004\022(\n#RCE_MineFight_Ca" +
      "nNotHelpMultiFriend\020\256\004\022,\n\'RCE_MineFight_" +
      "CannotOccupyHelpingFriend\020\257\004\022\036\n\031RCE_Anci" +
      "entCall_PetInTeam\020\261\004\022,\n\'RCE_PetTransfer_" +
      "UnsupportedTransferType\020\262\004\022(\n#RCE_PetTra" +
      "msfer_HavaNoPetInTrsnsfer\020\263\004\022$\n\037RCE_ResC" +
      "opy_ChallengeTimesLimit\020\305\004\022\036\n\031RCE_ResCop" +
      "y_BuyTimesLimit\020\306\004\022\035\n\030RCE_ResCopy_FightI" +
      "sLimit\020\307\004\022!\n\034RCE_ResCopy_IndexCanNotFigh" +
      "t\020\310\004\022\031\n\024RCE_Activity_NotOpen\020\331\004\022#\n\036RCE_A",
      "ctivity_CurrencyNotEnough\020\332\004\022\"\n\035RCE_Acti" +
      "vity_MissionOutOfTime\020\333\004\022$\n\037RCE_Activity" +
      "_MissionCanNotClaim\020\334\004\022$\n\037RCE_Activity_R" +
      "ewardAlreadyClaim\020\335\004\022 \n\033RCE_Activity_Rep" +
      "eatedSignIn\020\336\004\022\036\n\031RCE_Activity_ExTimesLi" +
      "mit\020\337\004\022$\n\037RCE_Activity_DissatisfyAdditio" +
      "n\020\340\004\022!\n\034RCE_Activity_MissionIsExpire\020\341\004\022" +
      " \n\033RCE_Activity_PointNotEnough\020\342\004\022\035\n\030RCE" +
      "_Activity_RepeatedBuy\020\343\004\022\030\n\023RCE_Pet_PetR" +
      "uneLock\020\213\005\022\"\n\035RCE_Pet_RuneMaterailRuneEr",
      "ror\020\214\005\022\034\n\027RCE_Pet_RuneLvlMaxError\020\215\005\022\030\n\023" +
      "RCE_Pet_GemNotExist\020\216\005\022\027\n\022RCE_Pet_PetGem" +
      "Lock\020\217\005\022\037\n\032RCE_Pet_PetGemAlreadyEquip\020\220\005" +
      "\022\037\n\032RCE_Pet_RankingPetNotExist\020\221\005\022\035\n\030RCE" +
      "_Pet_NotMathCondition\020\222\005\022\035\n\030RCE_Pet_MaxE" +
      "volveLvLimit\020\223\005\022!\n\034RCE_Pet_NoCanComplete" +
      "Mission\020\224\005\022 \n\033RCE_ActiveCode_LoseEfficac" +
      "y\020\275\005\022\030\n\023RCE_ActiveCode_Used\020\276\005\022\031\n\024RCE_Ac" +
      "tiveCode_Error\020\277\005\022\036\n\031RCE_ActiveCode_Uppe" +
      "rLimit\020\300\005\022#\n\036RCE_ActiveCode_UseSameTypeC",
      "ode\020\301\005\022\034\n\027RCE_NewBee_RepeatedName\020\357\005\022!\n\034" +
      "RCE_NewBee_RepeatedChoicePet\020\360\005\022 \n\033RCE_N" +
      "ewBee_RepeatedDrawCard\020\361\005\022\"\n\035RCE_NewBee_" +
      "MistRewardCfgError\020\362\005\022\'\n\"RCE_NewBee_Clai" +
      "medMistNewbeeReward\020\363\005\022%\n RCE_Arena_Chal" +
      "lengeItemNotEnough\020\241\006\022$\n\037RCE_Arena_Chall" +
      "engeItemOwnedCap\020\242\006\022#\n\036RCE_Arena_Opponen" +
      "tCanNotBattle\020\243\006\022#\n\036RCE_Arena_Allocation" +
      "RoomFailed\020\244\006\022\037\n\032RCE_Arena_PlayerIsNotEx" +
      "ist\020\245\006\022\037\n\032RCE_Arena_CanNotFindServer\020\246\006\022",
      "\034\n\027RCE_ActivityBoss_Closed\020\323\006\022\037\n\032RCE_Act" +
      "ivityBoss_UseUpTime\020\324\006\022 \n\033RCE_Arena_Refr" +
      "eshFrequently\020\325\006\022#\n\036RCE_ActivityBoss_Can" +
      "NotBuyMore\020\326\006\022#\n\036RCE_ActivityBoss_Player" +
      "LvLimit\020\327\006\022 \n\033RCE_Comment_NotFoundCommen" +
      "t\020\335\006\022\033\n\026RCE_Comment_ErrorParam\020\336\006\022\034\n\027RCE" +
      "_Comment_ErrorLength\020\337\006\022\035\n\030RCE_Comment_E" +
      "mptyContent\020\340\006\022\034\n\027RCE_Comment_InvalidWor" +
      "d\020\341\006\022\035\n\030RCE_Comment_AlreadyLiked\020\342\006\022\037\n\032R" +
      "CE_Comment_AlreadyComment\020\343\006\022\033\n\026RCE_Mont",
      "hCard_NotFound\020\347\006\022\033\n\026RCE_MonthCard_Limit" +
      "Buy\020\350\006\022 \n\033RCE_MonthCard_AlreadyActive\020\351\006" +
      "\022\030\n\023RCE_Feats_NotEnough\020\361\006\022!\n\034RCE_Feats_" +
      "RewardAlreadyClaim\020\362\006\022\"\n\035RCE_Feats_HasBu" +
      "yAdvancedFeats\020\363\006\022\034\n\027RCE_Feats_AlreadyAc" +
      "tive\020\364\006\022\031\n\024RCE_Recharge_Success\020\206\007\022\032\n\025RC" +
      "E_BanShu_OutOfLimit\020\231\007\022\032\n\025RCE_GrowthFund" +
      "_NotBuy\020\267\007\022\036\n\031RCE_AdsBonus_NoBonusTimes\020" +
      "\301\007\022!\n\034RCE_AdsBonus_NoWatchAdsTimes\020\302\007\022\037\n" +
      "\032RCE_AdsBonus_InvalidPlayer\020\303\007\022 \n\033RCE_Ti",
      "meLimitGift_NotActive\020\304\007\022\030\n\023RCE_Report_R" +
      "epeated\020\325\007\022\032\n\025RCE_Report_TimesLimit\020\326\007\022\024" +
      "\n\017RCE_Ban_Comment\020\327\007\022\026\n\021RCE_UploadTooFas" +
      "t\020\315\010\022\037\n\032RCE_Player_SkillMaxLvError\020\327\010\022!\n" +
      "\034RCE_Player_SkillMaxStarError\020\330\010\022\036\n\031RCE_" +
      "Player_SkillNotExists\020\331\010\022\036\n\031RCE_Player_S" +
      "killNotActive\020\332\010\0221\n,RCE_DemonDescends_Re" +
      "chargeItemAlreadyClaimed\020\353\010\022#\n\036RCE_Demon" +
      "Descends_ItemBuyLimit\020\354\010\022#\n\036RCE_Hades_Re" +
      "mainNoWorshipTimes\020\377\010\022\035\n\030RCE_NewTitle_In",
      "activated\020\223\t\022\031\n\024RCE_NewTitle_Expired\020\224\t\022" +
      "\032\n\025RCE_NewTitle_NotEquip\020\225\t\022#\n\036RCE_Glory" +
      "Road_RedBag_OutOfTime\020\247\t\022(\n#RCE_GloryRoa" +
      "d_RedBag_AlreadyClaimed\020\250\t\022!\n\034RCE_GloryR" +
      "oad_Quiz_OutOfTime\020\251\t\022(\n#RCE_GloryRoad_Q" +
      "uiz_AlreadySupported\020\252\t\022&\n!RCE_GloryRoad" +
      "_Quiz_IllegalComment\020\253\t\022&\n!RCE_GloryRoad" +
      "_Quiz_CommentTooLong\020\254\t\022)\n$RCE_GloryRoad" +
      "_Quiz_CommentFrequently\020\255\t\022\"\n\035RCE_GloryR" +
      "oad_EnsureOutOfTime\020\256\t\022\035\n\030RCE_TheWar_Not",
      "JoinTheWar\020\343\t\022\027\n\022RCE_TheWar_NotOpen\020\344\t\022\031" +
      "\n\024RCE_TheWar_RoomEnded\020\345\t\022\033\n\026RCE_TheWar_" +
      "NotFoundMap\020\346\t\022\037\n\032RCE_TheWar_AttackOther" +
      "Grid\020\347\t\022&\n!RCE_TheWar_NotFoundAroundTeam" +
      "Grid\020\350\t\022\031\n\024RCE_TheWar_BlockGrid\020\351\t\022\037\n\032RC" +
      "E_TheWar_JobTileCfgError\020\352\t\022\"\n\035RCE_TheWa" +
      "r_LimitOccupyGridNum\020\353\t\022\'\n\"RCE_TheWar_Ta" +
      "rgetGridIsPlayerSpawn\020\354\t\022$\n\037RCE_TheWar_O" +
      "therPlayerAttacking\020\355\t\022 \n\033RCE_TheWar_Occ" +
      "upyProtecting\020\356\t\022\030\n\023RCE_TheWar_TeamGrid\020",
      "\357\t\022 \n\033RCE_TheWar_StaminaNotEnough\020\360\t\022\034\n\027" +
      "RCE_TheWar_EmptyPetTeam\020\361\t\022\033\n\026RCE_TheWar" +
      "_InvalidGrid\020\362\t\022!\n\034RCE_TheWar_NotFoundWa" +
      "rServer\020\200\n\022\036\n\031RCE_RichMan_NotEnoughDice\020" +
      "\224\n\022#\n\036RCE_Inscription_GemLvNotEnough\020\204\001\022" +
      "&\n!RCE_Inscription_MaterialNotExists\020\205\001\022" +
      "+\n&RCE_BattlePlayBack_VersionMissMatchin" +
      "g\020\251\n\022\027\n\022RCE_Battle_Batting\020\252\n\022#\n\036RCE_Bat" +
      "tle_CanNotChallengeSelf\020\253\n\022%\n RCE_MatchA" +
      "rena_CanNotCancelMatch\020\307\n\022$\n\037RCE_MatchAr",
      "ena_NotInMatchStatus\020\310\n\022&\n!RCE_MatchAren" +
      "a_PlayerInfoNotFount\020\311\n\022$\n\037RCE_MatchAren" +
      "a_UpdateDataFailed\020\312\n\022$\n\037RCE_MatchArena_" +
      "RepeatedMatching\020\313\n\022\037\n\032RCE_MatchArenaLT_" +
      "BattleEnd\020\314\n\022!\n\034RCE_MatchArenaLT_STAGE_N" +
      "OTEQ\020\315\n\022\036\n\031RCE_MatchArenaLT_NOT_WAIT\020\316\n\022" +
      "\036\n\031RCE_MatchArenaLT_NOT_MYLT\020\317\n\022\037\n\032RCE_M" +
      "atchArenaLT_NOT_FIGHT\020\320\n\022 \n\033RCE_MatchAre" +
      "naLT_RPEI_GUESS\020\321\n\022\035\n\030RCE_MatchArenaLT_N" +
      "OATTMY\020\322\n\022\031\n\024RCE_MatchArenaLT_RPT\020\323\n\022\033\n\026",
      "RCE_MatchArenaLT_LTING\020\324\n\022$\n\037RCE_MatchAr" +
      "ena_PlayerIsMatching\020\325\n\022\035\n\030RCE_CrossAren" +
      "a_TableNull\020\326\n\022\036\n\031RCE_CrossArena_TableHa" +
      "vep\020\327\n\022\035\n\030RCE_CrossArena_TableStop\020\330\n\022\037\n" +
      "\032RCE_CrossArena_TableNotDef\020\331\n\022!\n\034RCE_Cr" +
      "ossArena_TableQueueMax\020\332\n\022\036\n\031RCE_CrossAr" +
      "ena_RPEI_GUESS\020\333\n\022\037\n\032RCE_CrossArena_NO_F" +
      "ighting\020\334\n\022\033\n\026RCE_CrossArena_NO_WAIT\020\335\n\022" +
      "\034\n\027RCE_CrossArena_Fighting\020\336\n\022\033\n\026RCE_Cro" +
      "ssArena_NOATTMY\020\337\n\022\031\n\024RCE_CrossArena_LVN",
      "OT\020\340\n\022\032\n\025RCE_CrossArena_CHOOSE\020\341\n\022\033\n\026RCE" +
      "_CrossArena_OFFLINE\020\342\n\022\035\n\030RCE_CrossArena" +
      "_EVENT_END\020\343\n\022\034\n\027RCE_CrossArena_SCENENEP" +
      "\020\344\n\022\031\n\024RCE_CrossArena_ATQUE\020\345\n\022\033\n\026RCE_Cr" +
      "ossArena_ATTABLE\020\346\n\022\034\n\027RCE_CrossArena_AI" +
      "BATTLE\020\347\n\022\034\n\027RCE_CrossArena_TIMELOCK\020\350\n\022" +
      "%\n RCE_CrossArena_ClaimTimeNotReach\020\351\n\022 " +
      "\n\033RCE_CrossArena_AlreadyMoBai\020\352\n\022)\n$RCE_" +
      "CrossArena_ProtectCardTimeUseOut\020\353\n\022%\n R" +
      "CE_CrossArena_ConditionNotMatch\020\354\n\0221\n,RC",
      "E_CrossArena_OnlyCanChooseOneScienceRewa" +
      "rd\020\355\n\022$\n\037RCE_CrossArena_NoRewardCanClaim" +
      "\020\356\n\022\"\n\035RCE_CrossArena_NoMorePageData\020\357\n\022" +
      "*\n%RCE_ResourceRecycle_NoRewardsCanClaim" +
      "\020\371\n\022\027\n\022RCE_TRAIN_POSERROR\020\204\013\022\032\n\025RCE_TRAI" +
      "N_POSNOTFLISH\020\205\013\022\026\n\021RCE_TRAIN_NOTOPEN\020\206\013" +
      "\022\035\n\030RCE_TRAIN_ExistTrainBuff\020\207\013\022 \n\033RCE_T" +
      "RAIN_NotFinishNpcEvent\020\210\013\022!\n\034RCE_TRAIN_N" +
      "otFinishChoseBUFF\020\211\013\022 \n\033RCE_TRAIN_CanNot" +
      "RefreshShop\020\212\013\022\037\n\032RCE_TRAIN_ItemUseBuffL",
      "imit\020\213\013\022\036\n\031RCE_Mist_StaminaNotEnough\020\227\013\022" +
      "\034\n\027RCE_Mist_PlayerNotFound\020\230\013\022\026\n\021RCE_Mis" +
      "t_CfgError\020\231\013\022\036\n\031RCE_Mist_HasClaimedRewa" +
      "rd\020\232\013\022 \n\033RCE_Mist_InvalidClaimReward\020\233\013\022" +
      "\036\n\031RCE_Mist_BoxHasBeenOpened\020\234\013\022\032\n\025RCE_M" +
      "ist_BoxDisappear\020\235\013\022\037\n\032RCE_Mist_MagicBox" +
      "HasGuards\020\236\013\022!\n\034RCE_Mist_FakeGargoyleMon" +
      "ster\020\237\013\022\"\n\035RCE_Mist_TrulyGargoyleMonster" +
      "\020\240\013\022$\n\037RCE_Mist_ClaimedBossActivityBox\020\241" +
      "\013\022(\n#RCE_Mist_NoQualificationToGetReward",
      "\020\242\013\022\031\n\024RCE_FARMMINE_NOTMINE\020\253\013\022\034\n\027RCE_FA" +
      "RMMINE_NOTHARVEST\020\254\013\022 \n\033RCE_FARMMINE_USE" +
      "ITEMTIMEMAX\020\255\013\022\034\n\027RCE_FARMMINE_HARVESTMA" +
      "X\020\256\013\022\033\n\026RCE_FARMMINE_HARVESTQK\020\257\013\022\033\n\026RCE" +
      "_FARMMINE_LJTIMENOT\020\260\013\022\032\n\025RCE_FARMMINE_S" +
      "tealNOT\020\261\013\022\032\n\025RCE_FARMMINE_OFFERREQ\020\262\013\022\035" +
      "\n\030RCE_FARMMINE_OFFERNUMMAX\020\263\013\022\032\n\025RCE_FAR" +
      "MMINE_OFFERPEL\020\264\013\022\032\n\025RCE_FARMMINE_HAVEMI" +
      "NE\020\265\013\022\032\n\025RCE_FARMMINE_StealMAX\020\266\013\022\034\n\027RCE" +
      "_FARMMINE_StealREPIR\020\267\013\022\034\n\027RCE_FARMMINE_",
      "BEStealMAX\020\270\013\022\030\n\023RCE_MAGICTHRON_TIME\020\311\013\022" +
      "\031\n\024RCE_MAGICTHRON_FIGHT\020\312\013\022\035\n\030RCE_MAGICT" +
      "HRON_FIGHTMAKE\020\313\013\022 \n\033RCE_PlayerAlreadyCh" +
      "ooseArea\020\314\013\022\034\n\027RCE_PlayerNotChooseArea\020\315" +
      "\013\022\033\n\026RCE_Barrage_IllegalMsg\020\335\013\022$\n\037RCE_Ba" +
      "rrage_MsgIntervalTooShort\020\336\013\022\033\n\026RCE_CP_I" +
      "llegalTeamName\020\361\013\022\030\n\023RCE_CP_PlayerInTeam" +
      "\020\362\013\022\027\n\022RCE_CP_NotJoinTeam\020\363\013\022\031\n\024RCE_CP_T" +
      "eamNotExists\020\364\013\022\034\n\027RCE_CP_AbilityNotEnou" +
      "gh\020\365\013\022\032\n\025RCE_CP_FullTeamMember\020\366\013\022\035\n\030RCE",
      "_CP_RepeatPublishTeam\020\367\013\022 \n\033RCE_CP_OnlyL" +
      "eaderCanOperate\020\370\013\022\035\n\030RCE_CP_CpInviteNot" +
      "Exists\020\371\013\022\'\n\"RCE_CP_PlayerApplyJoinTeamN" +
      "otExist\020\372\013\022\031\n\024RCE_CP_CopyNotExists\020\373\013\022\032\n" +
      "\025RCE_CP_PointCantReach\020\374\013\022\037\n\032RCE_CP_Poin" +
      "tAlreadyExplore\020\221\014\022\033\n\026RCE_CP_PlayTimesUs" +
      "eOut\020\222\014\022\036\n\031RCE_CP_RepeatInvitePlayer\020\223\014\022" +
      "\033\n\026RCE_CP_RepeatApplyJoin\020\224\014\022\027\n\022RCE_CP_R" +
      "epeatClaim\020\225\014\022\035\n\030RCE_CP_NotMatchConditio" +
      "n\020\226\014\022\034\n\027RCE_CP_PlayerIsFighting\020\227\014\022\036\n\031RC",
      "E_CP_PleaseReUploadTeam\020\230\014\022+\n&RCE_CP_App" +
      "lyJoinTeam_ConditionNotMatch\020\231\014\022\034\n\027RCE_C" +
      "P_ReviveTimeUseOut\020\232\014\022 \n\033RCE_CROSSARERNA" +
      "PVP_HAVEROOM\020\243\014\022\036\n\031RCE_CROSSARERNAPVP_UP" +
      "DATE\020\244\014\022\034\n\027RCE_CROSSARERNAPVP_MISS\020\245\014\022\035\n" +
      "\030RCE_CROSSARERNAPVP_LIMIT\020\246\014\022\035\n\030RCE_CROS" +
      "SARERNAPVP_POWER\020\247\014\022\035\n\030RCE_CROSSARERNAPV" +
      "P_LEVEL\020\250\014\022\037\n\032RCE_CROSSARERNAPVP_PETNUll" +
      "\020\251\014\022(\n#RCE_CROSSARERNAPVP_BATTLESERVERNU" +
      "ll\020\252\014\022$\n\037RCE_CROSSARERNAPVP_PETCREATEERR",
      "\020\253\014\022 \n\033RCE_CROSSARERNAPVP_RES_NULL\020\254\014\022\033\n" +
      "\026RCE_OfferReward_NoTask\020\267\014\022\"\n\035RCE_OfferR" +
      "eward_TaskNotFinish\020\270\014\022 \n\033RCE_OfferRewar" +
      "d_TaskExpired\020\271\014\022)\n$RCE_OfferReward_Task" +
      "FinishedByOthers\020\272\014\022!\n\034RCE_CrazyDuel_Tea" +
      "mHasPublish\020\374\014\022 \n\033RCE_CrazyDuel_TeamSize" +
      "Error\020\375\014\022&\n!RCE_CrazyDuel_PlayerAlreadyD" +
      "efeat\020\376\014\022\035\n\030RCE_CrazyDuel_FloorError\020\377\014\022" +
      "!\n\034RCE_CrazyDuel_PlayTimeUseOut\020\200\r\022%\n RC" +
      "E_CrazyDuel_PlayNotSettingTeam\020\201\r\022-\n(RCE",
      "_CrazyDuel_PlayerNotFinishSettingTeam\020\202\r" +
      "\022$\n\037RCE_CrazyDuel_RefreshTimeUseOut\020\246\001\022\'" +
      "\n\"RCE_CrazyDuel_CantBattleMorePlayer\020\203\r\022" +
      "\023\n\016RCE_PLAY_FIGHT\020\244\r\022\023\n\016RCE_PLAY_LTPVP\020\245" +
      "\r\022\020\n\013RCE_PLAY_LT\020\246\r\022\023\n\016RCE_PLAY_CRAZY\020\247\r" +
      "\022\022\n\rRCE_PLAY_TEAM\020\250\r\022\036\n\031REC_IN_PET_AVOID" +
      "ANCE_GAME\020\251\r\022\037\n\032RCE_StoneRift_TimeNotRea" +
      "ch\020\211\016\022\037\n\032RCE_StoneRift_OverLoadInCD\020\212\016\022#" +
      "\n\036RCE_StoneRift_FactoryNotUnlock\020\213\016\022%\n R" +
      "CE_StoneRift_PetAlreadyInDefend\020\214\016\022\'\n\"RC",
      "E_StoneRift_FactoryAlreadyUnlock\020\215\016\022\034\n\027R" +
      "CE_StoneRift_EventInCD\020\216\016\022\036\n\031RCE_StoneRi" +
      "ft_InvalidWord\020\217\016\022/\n*RCE_StoneRiftScienc" +
      "eStudyConditionNotMatch\020\221\016\022&\n!RCE_StoneR" +
      "iftScienceLevelMaxLimit\020\222\016\022\033\n\026RCE_StoneR" +
      "ift_LimitBuy\020\223\016\022\035\n\030RCE_StoneRift_TimeUse" +
      "Out\020\224\016\022\034\n\027RCE_StoneRift_CantSteal\020\225\016\022\037\n\032" +
      "RCE_StoneRift_EmptyRewards\020\226\016\022\"\n\035RCE_Sto" +
      "neRift_RiftLvNotEnough\020\227\016\022\036\n\031RCE_StoneRi" +
      "ft_PetNotMatch\020\230\016\022\036\n\031RCE_StoneRift_FullD",
      "urable\020\231\016\022%\n RCE_StoneRift_AlreadyStealP" +
      "layer\020\232\016\022 \n\033RCE_StoneRift_NoResCanSteal\020" +
      "\233\016\022\036\n\031RCE_Activity_AlreadyShare\020\355\016\022\027\n\022RE" +
      "C_Star_NotEnough\020\203\020\022\035\n\030REC_StarTreasure_" +
      "choosen\020\204\020\022\037\n\032REC_StarTreasure_NotChoose" +
      "\020\205\020\022\034\n\027REC_StarTreasure_GetAll\020\206\020\022#\n\036REC" +
      "_PetAvoidance_AlreadyInGame\020\353\027\022\037\n\032REC_Pe" +
      "tAvoidance_NotInGame\020\354\027\022 \n\033REC_petAvoida" +
      "nce_TimesLimit\020\355\027\022\035\n\030REC_petAvoidance_Ti" +
      "meout\020\356\027B\033\n\010protocol\252\002\016ETHotfix.Protob\006p",
      "roto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_RetCode_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_RetCode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RetCode_descriptor,
        new java.lang.String[] { "RetCode", "Params", });
    internal_static_ParamInfo_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_ParamInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ParamInfo_descriptor,
        new java.lang.String[] { "PramType", "ParamVal", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
